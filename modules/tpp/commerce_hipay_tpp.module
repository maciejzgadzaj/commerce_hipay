<?php
/**
 * @file
 * Provides integration with Hipay TPP payment method (off-site).
 */

require_once 'includes/commerce_hipay_tpp.inc';
require_once 'includes/commerce_hipay_tpp.admin.inc';
require_once 'includes/commerce_hipay_tpp.constants.inc';
require_once 'includes/commerce_hipay_tpp.codes.inc';
require_once 'includes/commerce_hipay_tpp.cardonfile.inc';
require_once 'includes/callbacks/commerce_hipay_tpp.callbacks.inc';
require_once 'includes/api/commerce_hipay_tpp.api.inc';
// Direct Debit.
require_once 'includes/callbacks/commerce_hipay_tpp.callbacks.direct_debit.inc';
require_once 'includes/entities/commerce_hipay_tpp.entity.direct_debit.inc';
require_once 'includes/entities/commerce_hipay_tpp.entity_ui.direct_debit.inc';
require_once 'includes/api/commerce_hipay_tpp.api.direct_debit.inc';
// Virtual IBAN.
require_once 'includes/callbacks/commerce_hipay_tpp.callbacks.virtual_iban.inc';
require_once 'includes/entities/commerce_hipay_tpp.entity.virtual_iban.inc';
require_once 'includes/entities/commerce_hipay_tpp.entity_ui.virtual_iban.inc';
require_once 'includes/api/commerce_hipay_tpp.api.virtual_iban.inc';

/**
 * Implements hook_commerce_payment_method_type_info_alter().
 *
 * Overrides default commerce_payment module's credit card payment method type
 * to avoid checking for card type in case of new Hipay credit cards which do
 * not yet have 'card_type' value set before offsite redirect return.
 *
 * @see \Drupal\commerce_hipay_tpp\Plugin\Commerce\PaymentMethodType\CreditCard
 */
function commerce_hipay_tpp_commerce_payment_method_type_info_alter(array &$definitions) {
  $definitions['credit_card']['class'] = 'Drupal\commerce_hipay_tpp\Plugin\Commerce\PaymentMethodType\CreditCard';
}

/**
 * Implements hook_theme_registry_alter().
 *
 * Overrides default commerce_payment module's credit card template file to hide
 * 'Expires' line for new Hipay credit cards which do not yet have 'expires'
 * value set before offsite redirect return.
 */
function commerce_hipay_tpp_theme_registry_alter(&$theme_registry) {
  $theme_registry['commerce_payment_method__credit_card']['path'] = 'modules/contrib/commerce_hipay/modules/tpp/templates';
}

/**
 * Implements hook_commerce_checkout_pane_info_alter().
 *
 * Overrides default "Payment information" checkout pane to prevent displaying
 * "New credit card" option twice when going back in the checkout process from
 * "Order review" to "Order information" page, and to allow deleting no longer
 * needed order payment method and billing profile.
 *
 * @see \Drupal\commerce_hipay_tpp\Plugin\Commerce\CheckoutPane\PaymentInformation
 */
function commerce_hipay_tpp_commerce_checkout_pane_info_alter(&$definitions) {
  $definitions['payment_information']['class'] = 'Drupal\commerce_hipay_tpp\Plugin\Commerce\CheckoutPane\PaymentInformation';
}

/**
 * Implements hook_entity_info().
 */
function commerce_hipay_tpp_entity_info() {
  return commerce_hipay_tpp_virtual_iban_entity_info()
    + commerce_hipay_tpp_direct_debit_entity_info();
}

/**
 * Implements hook_commerce_payment_method_info().
 *
 * @see hook_commerce_payment_method_info()
 */
function commerce_hipay_tpp_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_hipay_tpp'] = array(
    'title' => 'Hipay TPP',
    'display_title' => t('Credit card'),
    'description' => t('Hipay TPP API payment method (off-site)'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
    'cardonfile' => array(
      'charge callback' => 'commerce_hipay_tpp_cardonfile_charge',
      'update callback' => 'commerce_hipay_tpp_cardonfile_update',
      'delete callback' => 'commerce_hipay_tpp_cardonfile_delete',
    ),
  );

  $payment_methods['commerce_hipay_tpp_virtual_iban'] = array(
    'title' => 'Hipay Virtual IBAN',
    'display_title' => t('Virtual IBAN'),
    'description' => t('Hipay TPP Virtual IBAN payment method (on-site)'),
    'terminal' => FALSE,
    'offsite' => FALSE,
  );

  $payment_methods['commerce_hipay_tpp_direct_debit'] = array(
    'title' => 'Hipay SEPA Direct Debit',
    'display_title' => t('Direct Debit'),
    'description' => t('Hipay TPP SEPA Direct Debit payment method (off-site)'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
  );

  return $payment_methods;
}

/**
 * Implements hook_permission().
 */
function commerce_hipay_tpp_permission() {
  $permissions = array();

  $permissions = array(
    'administer Hipay TPP configuration' => array(
      'title' => t('Administer Hipay TPP configuration'),
      'description' => t('Allows users to administer Hipay TPP configuration.'),
      'restrict access' => TRUE,
    ),
    'access Hipay TPP API calls payload' => array(
      'title' => t('Access Hipay TPP API calls payload'),
      'description' => t('Allows users to administer Hipay TPP configuration.'),
      'restrict access' => TRUE,
    ),
  );

  $permissions += commerce_entity_access_permissions('commerce_hipay_tpp_direct_debit');
  $permissions += commerce_entity_access_permissions('commerce_hipay_tpp_virtual_iban');

  return $permissions;
}

/**
 * Implements hook_commerce_order_status_info().
 */
function commerce_hipay_tpp_commerce_order_status_info() {
  $order_statuses = array();

  $order_statuses[COMMERCE_HIPAY_TPP_ORDER_STATUS_PENDING_BANK_TRANSFER] = array(
    'name' => COMMERCE_HIPAY_TPP_ORDER_STATUS_PENDING_BANK_TRANSFER,
    'title' => t('Pending bank transfer'),
    'state' => 'pending',
  );

  return $order_statuses;
}

/**
 * Implements hook_commerce_payment_transaction_status_info().
 *
 * We will use custom transaction success statuses instead of Drupal Commerce's
 * default COMMERCE_PAYMENT_STATUS_SUCCESS, as it will make it easier selecting
 * specific transaction types for follow-up maintenance (for example when
 * checking access rights and validating whether a specific transaction type
 * already exists).
 */
function commerce_hipay_tpp_commerce_payment_transaction_status_info() {
  $statuses = array();

  $statuses[COMMERCE_HIPAY_TPP_PAYMENT_STATUS_AUTHORIZED] = array(
    'status' => COMMERCE_HIPAY_TPP_PAYMENT_STATUS_AUTHORIZED,
    'title' => t('Authorized'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-success.png',
    // Authorize transactions should not influence order balance.
    'total' => FALSE,
  );

  $statuses[COMMERCE_HIPAY_TPP_PAYMENT_STATUS_CANCELLED] = array(
    'status' => COMMERCE_HIPAY_TPP_PAYMENT_STATUS_CANCELLED,
    'title' => t('Cancelled'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-success.png',
    // Only authorized transactions can be canceled, therefore cancel
    // transactions should not influence order balance.
    'total' => FALSE,
  );

  // Special Hipay pending status - transaction is waiting for server-to-server
  // notification before updating its status to confirmed/failed.
  $statuses[COMMERCE_HIPAY_TPP_PAYMENT_STATUS_PENDING] = array(
    'status' => COMMERCE_HIPAY_TPP_PAYMENT_STATUS_PENDING,
    'title' => t('Waiting for server-to-server notification'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-pending.png',
    'total' => FALSE,
  );

  // Special statuses for "history transactions".
  $statuses[COMMERCE_HIPAY_TPP_PAYMENT_STATUS_CAPTURED] = array(
    'status' => COMMERCE_HIPAY_TPP_PAYMENT_STATUS_CAPTURED,
    'title' => t('Captured'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-success.png',
    'total' => TRUE,
  );

  $statuses[COMMERCE_HIPAY_TPP_PAYMENT_STATUS_PARTIALLY_REFUNDED] = array(
    'status' => COMMERCE_HIPAY_TPP_PAYMENT_STATUS_PARTIALLY_REFUNDED,
    'title' => t('Partially refunded'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-success.png',
    'total' => TRUE,
  );

  $statuses[COMMERCE_HIPAY_TPP_PAYMENT_STATUS_REFUNDED] = array(
    'status' => COMMERCE_HIPAY_TPP_PAYMENT_STATUS_REFUNDED,
    'title' => t('Refunded'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-success.png',
    'total' => TRUE,
  );

  return $statuses;
}

/**
 * Implements hook_menu().
 */
function commerce_hipay_tpp_menu() {
  $items = array();

  // Async Response URL.
  $items['commerce-hipay-tpp/notify'] = array(
    'page callback' => 'commerce_hipay_tpp_callback_notification',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Refresh.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/hipay-refresh'] = array(
    'title' => 'Refresh',
    'page callback' => 'commerce_hipay_tpp_refresh',
    'page arguments' => array(3, 5),
    'access callback' => 'commerce_hipay_tpp_access_refresh',
    'access arguments' => array(3, 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_hipay_tpp.admin.inc',
    'weight' => 1,
  );

  // Capture.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/hipay-capture'] = array(
    'title' => 'Capture',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_hipay_tpp_capture_form', 3, 5),
    'access callback' => 'commerce_hipay_tpp_access_capture',
    'access arguments' => array(3, 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_hipay_tpp.admin.inc',
    'weight' => 1,
  );

  // Refund.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/hipay-refund'] = array(
    'title' => 'Refund',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_hipay_tpp_refund_form', 3, 5),
    'access callback' => 'commerce_hipay_tpp_access_refund',
    'access arguments' => array(3, 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_hipay_tpp.admin.inc',
    'weight' => 1,
  );

  // Cancel.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/hipay-cancel'] = array(
    'title' => 'Cancel',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_hipay_tpp_cancel_form', 3, 5),
    'access callback' => 'commerce_hipay_tpp_access_cancel',
    'access arguments' => array(3, 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_hipay_tpp.admin.inc',
    'weight' => 1,
  );

  $items['admin/commerce/hipay-tpp'] = array(
    'title' => 'Hipay TPP',
    'description' => 'Manage Hipay TPP settings.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  // Virtual IBANs.
  $items += commerce_hipay_tpp_virtual_iban_menu();

  // Direct Debit mandates.
  $items += commerce_hipay_tpp_direct_debit_menu();

  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * @see commerce_payment_ui_menu()
 */
function commerce_hipay_tpp_menu_alter(&$items) {
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/delete']['access callback'] = 'commerce_hipay_tpp_access_delete';
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/delete']['access arguments'] = array(3, 5);
}

/**
 * Implements hook_views_api().
 */
function commerce_hipay_tpp_views_api() {
  return array(
    'api' => 3,
    'version' => '3.0',
    'path' => drupal_get_path('module', 'commerce_hipay_tpp') . '/includes/views',
  );
}

/**
 * Determine whether the user has permissions to refresh the transaction.
 *
 * @see commerce_hipay_tpp_menu()
 */
function commerce_hipay_tpp_access_refresh($order, $transaction) {
  // Deny access if transaction was not done using Hipay method, or it doesn't
  // have Hipay transaction reference in 'remote_id' parameter, or it is not
  // the main (first) transaction for this order.
  if (
    !in_array($transaction->payment_method, array_keys(commerce_hipay_tpp_commerce_payment_method_info()))
    || empty($transaction->remote_id)
    || !empty($transaction->data['reference_transaction_id'])
  ) {
    return FALSE;
  }

  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Determine whether the user has permissions to capture the transaction.
 *
 * @see commerce_hipay_tpp_menu()
 */
function commerce_hipay_tpp_access_capture($order, $transaction) {
  // Hipay-specific capture access restrictions.
  if (in_array($transaction->payment_method, array_keys(commerce_hipay_tpp_commerce_payment_method_info()))) {
    // Deny access if authorization has not been successfully completed,
    // has been denied or cancelled.
    if (
      $transaction->status !== COMMERCE_HIPAY_TPP_PAYMENT_STATUS_AUTHORIZED
      || $transaction->remote_status == COMMERCE_HIPAY_TPP_REMOTE_STATUS_CANCELLED
    ) {
      return FALSE;
    }
    // Deny access if total authorization amount has already been captured.
    $totals = commerce_hipay_tpp_get_order_operation_totals($order);
    if (
      !empty($totals[COMMERCE_HIPAY_TPP_OPERATION_AUTHORIZATION])
      && !empty($totals[COMMERCE_HIPAY_TPP_OPERATION_CAPTURE])
      && $totals[COMMERCE_HIPAY_TPP_OPERATION_CAPTURE] >= $totals[COMMERCE_HIPAY_TPP_OPERATION_AUTHORIZATION]
    ) {
      return FALSE;
    }
  }

  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Determine whether the user has permissions to refund the transaction.
 *
 * @see commerce_hipay_tpp_menu()
 */
function commerce_hipay_tpp_access_refund($order, $transaction) {
  // Hipay-specific refund access restrictions.
  if (in_array($transaction->payment_method, array_keys(commerce_hipay_tpp_commerce_payment_method_info()))) {
    // Deny access if no capture or canceled.
    if (!(
      // Sale transactions.
      $transaction->data['operation'] == COMMERCE_HIPAY_TPP_OPERATION_SALE
      && $transaction->status == COMMERCE_PAYMENT_STATUS_SUCCESS
      // Capture transactions.
      || $transaction->data['operation'] == COMMERCE_HIPAY_TPP_OPERATION_CAPTURE
      && (
        $transaction->status == COMMERCE_PAYMENT_STATUS_PENDING
        || $transaction->status == COMMERCE_HIPAY_TPP_PAYMENT_STATUS_CAPTURED
      )
    )) {
      return FALSE;
    }

    // Deny access if total captured amount has already been refunded.
    $totals = commerce_hipay_tpp_get_order_operation_totals($order);
    $total_captured = commerce_hipay_tpp_get_order_total_captured($totals);
    if (
      !empty($totals[COMMERCE_HIPAY_TPP_OPERATION_REFUND])
      && abs($totals[COMMERCE_HIPAY_TPP_OPERATION_REFUND]) >= $total_captured
    ) {
      return FALSE;
    }
  }

  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Determine whether the user has permissions to refund the transaction.
 *
 * @see commerce_hipay_tpp_menu()
 */
function commerce_hipay_tpp_access_cancel($order, $transaction) {
  // Hipay-specific refund access restrictions.
  if (in_array($transaction->payment_method, array_keys(commerce_hipay_tpp_commerce_payment_method_info()))) {
    // Deny access if no capture or canceled.
    $status = (int) $transaction->remote_status;
    if (
      $status !== COMMERCE_HIPAY_TPP_REMOTE_STATUS_AUTHORIZED
      && $status !== COMMERCE_HIPAY_TPP_REMOTE_STATUS_AUTHORIZATION_REQUESTED
    ) {
      return FALSE;
    }

    // Deny access if a capture transaction exists.
    $totals = commerce_hipay_tpp_get_order_operation_totals($order);
    if (!empty($totals[COMMERCE_HIPAY_TPP_OPERATION_CAPTURE])) {
      return FALSE;
    }
  }

  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Determine whether the user has permissions to delete the transaction.
 *
 * @see commerce_hipay_tpp_menu_alter()
 */
function commerce_hipay_tpp_access_delete($order, $transaction) {
  // Hipay-specific delete access restrictions.
  if (in_array($transaction->payment_method, array_keys(commerce_hipay_tpp_commerce_payment_method_info()))) {
    // Do not allow to delete a transaction if it is referenced by another
    // transaction in the same order.
    $order_transactions = commerce_hipay_tpp_get_order_transactions($order);
    foreach ($order_transactions as $order_transaction) {
      if (
        !empty($order_transaction->data['reference_transaction_id'])
        && $order_transaction->data['reference_transaction_id'] == $transaction->transaction_id
      ) {
        return FALSE;
      }
    }

    // Also do not allow to delete a capture transaction if a refund transaction
    // exists (because we might have multiple captures, and one refund attached
    // to only one of these captures, but the amounts don't have to match, so we
    // shouldn't be able to delete any capture in such situation).
    if (
      !empty($transaction->data['operation'])
      && $transaction->data['operation'] == COMMERCE_HIPAY_TPP_OPERATION_CAPTURE
    ) {
      $transactions_by_operation = commerce_hipay_tpp_get_order_transactions_by_operation($order);
      if (!empty($transactions_by_operation[COMMERCE_HIPAY_TPP_OPERATION_REFUND])) {
        return FALSE;
      }
    }
  }
  // Allow access if the user can delete this transaction.
  return commerce_payment_transaction_access('delete', $transaction);
}

/**
 * Returns generic Hipay TPP API request parameters.
 *
 * @param object $order
 *   An order object being paid for.
 * @param array $payment_method
 *   The payment method instance used for the payment transaction.
 *
 * @return array
 *   An array of generic Hipay TPP API request parameters.
 */
function commerce_hipay_tpp_get_request_data($order, $payment_method) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_currency_code = $order_wrapper->commerce_order_total->currency_code->value();

  $charge = commerce_hipay_tpp_get_charge_data($order, $payment_method);

  if (!empty($order->commerce_customer_billing)) {
    $customer_billing_address_wrapper = $order_wrapper->commerce_customer_billing->commerce_customer_address;
    $billing_country = $customer_billing_address_wrapper->country->value();
  }
  if (!empty($order->commerce_customer_shipping)) {
    $customer_shipping_address_wrapper = $order_wrapper->commerce_customer_shipping->commerce_customer_address;
    $shipping_country = $customer_billing_address_wrapper->country->value();
  }

  $return_url = url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));
  $cancel_url = url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));

  // For each HPP initialization call we want to send a different value of
  // $orderid, to make sure that the 'forwardUrl' we receive in gateway response
  // is different. That's because with each init call we're sending a different
  // value of 'cdata2' parameter (which contains Drupal payment transaction ID),
  // and if the forwardUrl wouldn't change, the gateway would return the value
  // of 'cdata2' from the very first init call for this order.
  // Therefore for first init call we set 'orderid' to just order ID, and then
  // add auto-incrementing number at the end for all subsequent init calls.
  $orderid = $order->order_id;
  $existing_transactions = commerce_hipay_tpp_get_order_transactions($order);
  if (count($existing_transactions) > 0) {
    $orderid .= '-' . (count($existing_transactions) + 1);
  }

  $request_data = array(
    'orderid' => $orderid,
    'operation' => $payment_method['settings']['operation'],
    'authentication_indicator' => !empty($payment_method['settings']['3ds']) ? $payment_method['settings']['3ds'] : 0,
    'merchant_display_name' => substr(variable_get('site_name', url('<front>', array('absolute' => TRUE))), 0, 32),
    'description' => substr(t('Order @order_number at @store', array(
      '@order_number' => $order->order_number,
      '@store' => variable_get('site_name', url('<front>', array('absolute' => TRUE))),
    )), 0, 255),
    'currency' => $charge['currency_code'],
    'amount' => number_format(commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']), 2, '.', ''),
    'cid' => $order->uid,
    'ipaddr' => $_SERVER['REMOTE_ADDR'],
    'accept_url' => $return_url,
    'decline_url' => $return_url,
    'pending_url' => $return_url,
    'exception_url' => $return_url,
    'cancel_url' => $cancel_url,
    'language' => commerce_hipay_tpp_get_request_language($payment_method),
    // Customer parameters.
    'email' => $order->mail,
    // Custom data.
    // We pass order_id in custom cdata1 parameter again, even though it was
    // already added to the request in 'orderid' parameter, to make sure that
    // we consistency receive it in the same response parameter both in return
    // redirect as well as server-to-server notification (as they use different
    // structure when returning order details).
    'cdata1' => $order->order_id,
    'cdata3' => $order->data['payment_redirect_key'],
  );

  // Add billing details if available.
  if (isset($customer_billing_address_wrapper)) {
    $request_data += array(
      'firstname' => $customer_billing_address_wrapper->first_name->value(),
      'lastname' => $customer_billing_address_wrapper->last_name->value(),
      'recipientinfo' => $customer_billing_address_wrapper->organisation_name->value(),
      'streetaddress' => $customer_billing_address_wrapper->thoroughfare->value(),
      'streetaddress2' => $customer_billing_address_wrapper->premise->value(),
      'city' => $customer_billing_address_wrapper->locality->value(),
      'zipcode' => $customer_billing_address_wrapper->postal_code->value(),
      'country' => $billing_country,
    );

    // State could be sent only for USA and Canada.
    if ($billing_country == 'CA' || $billing_country == 'US') {
      $request_data['state'] = $customer_billing_address_wrapper->administrative_area->value();
    }
  }

  // Add shipping details if available.
  if (isset($customer_shipping_address_wrapper)) {
    $request_data += array(
      'shipto_firstname' => $customer_shipping_address_wrapper->first_name->value(),
      'shipto_lastname' => $customer_shipping_address_wrapper->last_name->value(),
      'shipto_recipientinfo' => $customer_shipping_address_wrapper->organisation_name->value(),
      'shipto_streetaddress' => $customer_shipping_address_wrapper->thoroughfare->value(),
      'shipto_streetaddress2' => $customer_shipping_address_wrapper->premise->value(),
      'shipto_city' => $customer_shipping_address_wrapper->locality->value(),
      'shipto_zipcode' => $customer_shipping_address_wrapper->postal_code->value(),
      'shipto_country' => $shipping_country,
    );

    if ($shipping_country == 'CA' || $shipping_country == 'US') {
      $request_data['shipto_state'] = $customer_shipping_address_wrapper->administrative_area->value();
    }
  }

  // Add extra keys for SEPA Direct Debit payment method.
  if ($payment_method['method_id'] == 'commerce_hipay_tpp_direct_debit') {
    $request_data['payment_product'] = 'sdd';
    // Hide other payment methods.
    $request_data['payment_product_list'] = 'sdd';
    $request_data['recurring_payment'] = 1;
    $request_data['authentication_indicator'] = 0;

    if (!empty($order->data['commerce_hipay_tpp_direct_debit'])) {
      if ($direct_debit = commerce_hipay_tpp_direct_debit_load($order->data['commerce_hipay_tpp_direct_debit'])) {
        $request_data['debit_agreement_id'] = $direct_debit->debit_agreement_id;
        $request_data['eci'] = COMMERCE_HIPAY_TPP_ECI_RECURRING_ECOMMERCE;
      }
      else {
        watchdog('commerce_hipay_tpp_direct_debit', 'Error loading direct debit mandate @direct_debit_id for order @order_id.', array(
          '@direct_debit_id' => $order->data['commerce_hipay_tpp_direct_debit'],
          '@order_id' => $order->order_id,
        ), WATCHDOG_ERROR);
      }
    }
  }

  // Add shipping and tax amounts relevant order line items exist.
  $subamounts = commerce_hipay_tpp_get_order_amounts_by_type($order);
  if (!empty($subamounts['shipping'])) {
    $shipping_amount = commerce_currency_convert($subamounts['shipping'], $order_currency_code, $charge['currency_code']);
    $request_data['shipping'] = number_format(commerce_currency_amount_to_decimal($shipping_amount, $charge['currency_code']), 2, '.', '');
  }
  if (!empty($subamounts['tax'])) {
    $tax_amount = commerce_currency_convert($subamounts['tax'], $order_currency_code, $charge['currency_code']);
    $request_data['tax'] = number_format(commerce_currency_amount_to_decimal($tax_amount, $charge['currency_code']), 2, '.', '');
  }

  if (!empty($payment_method['settings']['css'])) {
    $request_data['css'] = url($payment_method['settings']['css'], array(
      'absolute' => TRUE,
      'https' => TRUE,
      'language' => (object) array('language' => FALSE),
    ));
  }

  return $request_data;
}

/**
 * Returns a price array to charge converted to the currency supported by Hipay.
 *
 * @param object $order
 *   An order object being paid for.
 * @param array $payment_method
 *   The payment method instance used for the payment transaction.
 * @param array|null $charge
 *   The price array for the charge amount with keys of 'amount' and 'currency'.
 *   If null the total value of the order is used.
 *
 * @return array
 *   The price array to charge with keys of 'amount' and 'currency',
 *   converted to the currency supported by Hipay TPP gateway.
 */
function commerce_hipay_tpp_get_charge_data($order, $payment_method, $charge = NULL) {
  // Determine the currency code to use to actually process the transaction,
  // which will either be the default currency code or the currency code of the
  // order (charge) if it's supported by Hipay (if that option is enabled).
  $currency_code = $payment_method['settings']['currency_code'];

  if (isset($charge)) {
    $amount = $charge['amount'];
    $order_currency_code = $charge['currency_code'];
  }
  else {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $amount = $order_wrapper->commerce_order_total->amount->value();
    $order_currency_code = $order_wrapper->commerce_order_total->currency_code->value();
  }

  if (in_array($order_currency_code, $payment_method['settings']['supported_currencies'], TRUE)) {
    $currency_code = $order_currency_code;
  }

  // Prepare a transaction amount value in the proper currency.
  if ($order_currency_code != $currency_code) {
    $amount = commerce_currency_convert($amount, $order_currency_code, $currency_code);
  }

  return array(
    'amount' => $amount,
    'currency_code' => $currency_code,
  );
}

/**
 * Returns API credentials for Hipay TPP account for the context currency.
 *
 * @param array $payment_method
 *   An array of payment method details.
 * @param array $context
 *   An array of context information, including 'currency_code' value.
 *
 * @return array
 *   An array of API credentials for Hipay TPP account for the context currency
 *   code, or default currency code if none provided in context.
 */
function commerce_hipay_tpp_get_api_credentials($payment_method, $context) {
  $default_currency_code = commerce_default_currency();
  $currency_code = !empty($context['currency_code']) ? $context['currency_code'] : $default_currency_code;

  return !empty($payment_method['settings']['accounts'][$currency_code]['api_username']) && !empty($payment_method['settings']['accounts'][$currency_code]['api_password']) ? $payment_method['settings']['accounts'][$currency_code] : $payment_method['settings']['accounts'][$default_currency_code];
}

/**
 * Implements hook_form_alter().
 */
function commerce_hipay_tpp_form_alter(&$form, &$form_state, $form_id) {
  // When loading Hipay hosted payment page into the iframe, let's remove the
  // 'Use the button below to proceed to the payment server.' help text from
  // the payment checkout page.
  if (
    $form_id == 'commerce_checkout_form_payment'
    && !empty($form['commerce_hipay_tpp_payment_method'])
    && $form['commerce_hipay_tpp_payment_method']['#value']['settings']['template'] == COMMERCE_HIPAY_TPP_TEMPLATE_IFRAME
  ) {
    unset($form['help']);
  }
}

/**
 * Processes status of the response returned by Hipay API.
 *
 * @param array $response
 *   An associative array containing the Hipay API call response.
 * @param object $transaction
 *   Original payment transaction which current operation is based on.
 * @param string $transaction_type
 *   A string indicating which transaction type we are dealing with.
 *   Might be either 'capture' or 'refund'.
 *
 * @see commerce_hipay_tpp_api_capture()
 * @see commerce_hipay_tpp_api_refund()
 */
function commerce_hipay_tpp_process_response($response, &$transaction, $transaction_type) {
  // Handle API exceptions.
  if (!empty($response['code'])) {
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $transaction->message = t('Error @error_code: @error_message: @error_description');
    $transaction->message_variables = array(
      '@error_code' => $response['code'],
      '@error_message' => $response['message'],
      '@error_description' => $response['description'],
    );
    drupal_set_message(t('There has been an error requesting the @transaction_type: @error_code: @error_message: @error_description', array(
      '@transaction_type' => $transaction_type,
      '@error_code' => $response['code'],
      '@error_message' => $response['message'],
      '@error_description' => $response['description'],
    )), 'error');
  }
  else {
    $transaction->remote_status = $response['status'];

    // Let's put status message in transaction's message_variables parameter,
    // as this way it will be easier to update it later on transaction refresh.
    $transaction->message = t('@status_message');
    $transaction->message_variables = array(
      '@status_message' => commerce_hipay_tpp_get_payment_status_message($response['status']),
    );

    if (in_array($response['status'], commerce_hipay_tpp_get_remote_statuses_for_operation_type($transaction_type))) {
      if ($transaction_type == COMMERCE_HIPAY_TPP_OPERATION_AUTHORIZATION && $success_status = commerce_hipay_tpp_get_remote_success_status_for_operation_type($transaction_type)) {
        $transaction->status = $success_status;
      }
    }
    else {
      $transaction->message .= '<br />' . t('Processing error: unhanded post-@transaction_type status: @remote_status');
      $transaction->message_variables['@transaction_type'] = $transaction_type;
      $transaction->message_variables['@remote_status'] = $response['status'];
    }

    if (!empty($response['reason']['code'])) {
      $message = commerce_hipay_tpp_get_error_message($response['reason']['code']);
      $transaction->message .= '<br />' . t('Error @error_code: @error_message');
      $transaction->message_variables['@error_code'] = $response['reason']['code'];
      $transaction->message_variables['@error_message'] = (!empty($message)) ? $message : $response['reason']['message'];
    }

    drupal_set_message(t('@transaction_type request has been sent to the payment gateway, now waiting for the server-to-server notification to update the transaction details. Refresh this page in a moment to see updated transaction details.', array(
      '@transaction_type' => ucfirst($transaction_type),
    )));
  }

  commerce_payment_transaction_save($transaction);
}

/**
 * Returns parameters returned by Hipay TPP API.
 *
 * @return array
 *   An associative array containing the Hipay feedback taken from the $_GET
 *   and $_POST superglobals, excluding 'q'.
 */
function commerce_hipay_tpp_get_feedback() {
  $feedback = array_replace_recursive($_GET, $_POST);
  unset($feedback['q']);
  return $feedback;
}

/**
 * Returns value of the requested feedback parameter.
 *
 * Parameter names should be provided in camel-case, and if its value will not
 * be found, they will be converted to under_score notation and searched for
 * again.
 *
 * For example when providing parameter name as 'threeDSecure', if not found
 * it will be converted to 'three_d_secure' and search again in the feedback
 * array.
 *
 * @param array $feedback
 *   An associative array containing the Hipay API call feedback.
 * @param string $parameter_name
 *   A feedback parameter name to return the value of, in camel-case format.
 *
 * @return string|null
 *   A value of the requested parameter, or NULL if it doesn't exist.
 *
 * @see commerce_hipay_tpp_process_notification
 */
function commerce_hipay_tpp_get_feedback_value($feedback, $parameter_name, $default_value = NULL) {
  if (isset($feedback[$parameter_name])) {
    return $feedback[$parameter_name];
  }
  else {
    $parameter_name = strtolower(preg_replace('/([A-Z])/', '_$1', $parameter_name));
    return (isset($feedback[$parameter_name])) ? $feedback[$parameter_name] : $default_value;
  }
}

/**
 * Verifies the call signature hash.
 *
 * @param array $parameters
 *   An array of parameters received from the gateway.
 * @param string $secret_passphrase
 *   Payment method instance secret passphrase used to generate the hash.
 *
 * @return bool
 *   A boolean indicating whether the signature verification succeeded or not.
 *
 * @see http://hipay-tpp-gateway-api.readthedocs.org/en/latest/Chap7-Signatureverif.html#example
 */
function commerce_hipay_tpp_validate_signature($parameters, $payment_method) {
  $string_to_hash = $hipay_signature = '';

  // If it is a redirection.
  if (isset($parameters['hash'])) {
    $hipay_signature = $parameters['hash'];
    unset($parameters['hash']);
    ksort($parameters);
    foreach ($parameters as $name => $value) {
      if (strlen($value) > 0) {
        $string_to_hash .= $name . $value . $payment_method['settings']['secret_passphrase'];
      }
    }
  }
  // If it is a server-to-server notification.
  elseif (isset($_SERVER['HTTP_X_ALLOPASS_SIGNATURE'])) {
    $hipay_signature = $_SERVER['HTTP_X_ALLOPASS_SIGNATURE'];
    $string_to_hash = file_get_contents("php://input") . $payment_method['settings']['secret_passphrase'];
  }

  $local_signature = sha1($string_to_hash);

  return ($local_signature === $hipay_signature) ? TRUE : FALSE;
}

/**
 * Returns an iframe embedding Hipay hosted payment page.
 *
 * @param array $response
 *   The Hipay initialization call response object.
 * @param array $payment_method
 *   The payment method instance used to generate the redirect link for the order.
 * @param object $order
 *   The order object the hosted checkout is for.
 *
 * @return
 *   The iframe HTML to use to embed Hipay's hosted payment page on-site.
 */
function commerce_hipay_tpp_get_iframe($response, $payment_method, $order) {
  return '<iframe class="commerce_hipay_tpp_iframe" src="' . $response['forwardUrl'] . '" scrolling="no" frameborder="0" width="600px" height="500px"></iframe>';
}

/**
 * Returns both prod and test Hipay TPP API endpoints.
 *
 * @return array
 *   An array of Hipay TPP API endpoints.
 */
function commerce_hipay_tpp_get_endpoints() {
  return array(
    COMMERCE_HIPAY_TPP_TEST => COMMERCE_HIPAY_TPP_ENDPOINT_TEST,
    COMMERCE_HIPAY_TPP_PRODUCTION => COMMERCE_HIPAY_TPP_ENDPOINT_PRODUCTION,
  );
}

/**
 * Returns the URL of Hipay TPP API for the specified environment.
 *
 * @param string $environment
 *   A string specifying which environment to return the Hipay TPP API URL for.
 *
 * @return string|null
 *   The URL of Hipay TPP API for the specified environment.
 */
function commerce_hipay_tpp_get_endpoint($environment) {
  $endpoints = commerce_hipay_tpp_get_endpoints();
  return (!empty($endpoints[$environment])) ? $endpoints[$environment] : NULL;
}

/**
 * Returns full URL of Hipay TPP API endpoint.
 *
 * @param array $payment_method
 *   Payment method definition array.
 *
 * @return string
 *   The full URL of Hipay TPP API endpoint
 */
function commerce_hipay_tpp_get_server_url($payment_method, $version = 'v1') {
  switch ($payment_method['settings']['endpoint']) {
    case COMMERCE_HIPAY_TPP_PRODUCTION:
      $url = COMMERCE_HIPAY_TPP_ENDPOINT_PRODUCTION;
      break;
    case COMMERCE_HIPAY_TPP_TEST:
      $url = COMMERCE_HIPAY_TPP_ENDPOINT_TEST;
      break;
  }

  $url .= $version . '/';

  return $url;
}

/**
 * Returns full URL of Hipay TPP API endpoint.
 *
 * @param array $payment_method
 *   Payment method definition array.
 *
 * @return string
 *   The full URL of Hipay TPP API endpoint
 */
function commerce_hipay_tpp_get_secure_vault_url($payment_method) {
  switch ($payment_method['settings']['endpoint']) {
    case COMMERCE_HIPAY_TPP_PRODUCTION:
      return COMMERCE_HIPAY_TPP_SECURE_VAULT_ENDPOINT_PRODUCTION;
    case COMMERCE_HIPAY_TPP_TEST:
      return COMMERCE_HIPAY_TPP_SECURE_VAULT_ENDPOINT_TEST;
  }
}

/**
 * Returns current user's language string formatted for API request.
 *
 * @param array $payment_method
 *   Payment method definition array.
 *
 * @return string
 *   Current user's language string formatted for API request.
 */
function commerce_hipay_tpp_get_request_language($payment_method) {
  global $language;

  $locale_elements = explode('-', $language->prefix);
  if (isset($locale_elements[1])) {
    $request_language = $locale_elements[0] . '_' . drupal_strtoupper($locale_elements[1]);
  }
  else {
    $request_language = $locale_elements[0] . '_' . drupal_strtoupper($locale_elements[0]);
  }

  if (!in_array($request_language, array_keys(commerce_hipay_get_supported_languages()))) {
    $request_language = $payment_method['settings']['language'];
  }

  return $request_language;
}

/**
 * Returns an array of order total amount elements.
 *
 * @param object $order
 *   The order object the hosted checkout is for.
 *
 * @return array
 *   An array of order total amount elements.
 */
function commerce_hipay_tpp_get_order_amounts_by_type($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  $amounts = array();
  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    $type = $line_item_wrapper->type->value();

    if (!isset($amounts[$type])) {
      $amounts[$type] = 0;
    }

    $price = $line_item_wrapper->commerce_unit_price->value();
    $amounts[$type] += $price['amount'];

    // Tax needs to be taken from each price components.
    if (module_exists('commerce_tax')) {
      if (!isset($amounts['tax'])) {
        $amounts['tax'] = 0;
      }

      $tax_components = commerce_tax_components($price['data']['components']);
      $amounts['tax'] += commerce_tax_total_amount($tax_components, TRUE, $price['currency_code']);
    }
  }

  return $amounts;
}

/**
 * Loads Hipay TPP payment transactions for specified order.
 *
 * @param object $order
 *   An order object.
 * @param array $conditions
 *   An array of conditions on the {commerce_payment_transaction} table in the
 *   form 'field' => $value.
 *
 * @return array
 *   An array of transaction objects indexed by transaction_id.
 */
function commerce_hipay_tpp_get_order_transactions($order, $conditions = array()) {
  $conditions += array(
    'order_id' => $order->order_id,
    'payment_method' => array_keys(commerce_hipay_tpp_commerce_payment_method_info()),
  );
  return commerce_payment_transaction_load_multiple(array(), $conditions);
}

/**
 * Returns an array of order payment transactions keyed by operation type.
 *
 * @param object $order
 *   An order object.
 * @param array $conditions
 *   An array of conditions on the {commerce_payment_transaction} table in the
 *   form 'field' => $value.
 *
 * @return array
 *   An array of order payment transactions keyed by operation type.
 */
function commerce_hipay_tpp_get_order_transactions_by_operation($order, $conditions = array()) {
  $transactions = commerce_hipay_tpp_get_order_transactions($order, $conditions);
  $transactions_by_operation = array();

  foreach ($transactions as $transaction) {
    $operation = $transaction->data['operation'];
    $transactions_by_operation[$operation][] = $transaction;
  }

  return $transactions_by_operation;
}

/**
 * Returns an array of total amounts for each transaction type.
 *
 * @param object $order
 *   An order for which to calculate total amounts.
 * @param array $conditions
 *   Additional conditions to filter payment transaction for totals calculation.
 *
 * @return array
 *   An array of total amounts for each transaction type.
 */
function commerce_hipay_tpp_get_order_operation_totals($order, $conditions = NULL) {
  $totals = array();

  // By default, if no specific conditions were requested in the function param,
  // let's return only successful transactions (including pending, which is used
  // for Capture Requested and Refund Requested remote statuses).
  if (!isset($conditions)) {
    $conditions = array(
      'status' => array(
        COMMERCE_PAYMENT_STATUS_PENDING,
        COMMERCE_PAYMENT_STATUS_SUCCESS,
        COMMERCE_HIPAY_TPP_PAYMENT_STATUS_AUTHORIZED,
        COMMERCE_HIPAY_TPP_PAYMENT_STATUS_CAPTURED,
        COMMERCE_HIPAY_TPP_PAYMENT_STATUS_PARTIALLY_REFUNDED,
        COMMERCE_HIPAY_TPP_PAYMENT_STATUS_REFUNDED,
      ),
    );
  }

  $transactions = commerce_hipay_tpp_get_order_transactions_by_operation($order, $conditions);
  foreach ($transactions as $operation => $operation_transactions) {
    $totals[$operation] = 0;
    foreach ($operation_transactions as $transaction) {
      // Ignore authorization transactions that hasn't been executed.
      if ($transaction->status != 'pending' || !empty($transaction->remote_status)) {
        $totals[$operation] += $transaction->amount;
      }
    }
  }
  return $totals;
}

/**
 * Returns a total amount of all 'sale' and 'capture' transactions.
 *
 * @param array $totals
 *   And array of total amounts calculated for each transaction type.
 *
 * @return int
 *   Total amount of all sale/capture transactions.
 */
function commerce_hipay_tpp_get_order_total_captured($totals) {
  $total_captured = 0;

  $capture_operations = array(
    COMMERCE_HIPAY_TPP_OPERATION_SALE,
    COMMERCE_HIPAY_TPP_OPERATION_CAPTURE,
  );

  foreach ($capture_operations as $capture_operation) {
    if (!empty($totals[$capture_operation])) {
      $total_captured += $totals[$capture_operation];
    }
  }

  return $total_captured;
}

/**
 * Returns an array of remote payment statuses keyed by operation type.
 *
 * @return array
 *   An array of managed remote payment statuses keyed by operation type.
 */
function commerce_hipay_tpp_get_remote_statuses_by_operation_type() {
  return array(
    COMMERCE_HIPAY_TPP_OPERATION_AUTHORIZATION => array(
      COMMERCE_HIPAY_TPP_REMOTE_STATUS_AUTHORIZATION_REQUESTED,
      COMMERCE_HIPAY_TPP_REMOTE_STATUS_AUTHORIZED,
    ),
    COMMERCE_HIPAY_TPP_OPERATION_CAPTURE => array(
      COMMERCE_HIPAY_TPP_REMOTE_STATUS_CAPTURE_REQUESTED,
      COMMERCE_HIPAY_TPP_REMOTE_STATUS_CAPTURED,
      COMMERCE_HIPAY_TPP_REMOTE_STATUS_PARTIALLY_CAPTURED,
    ),
    COMMERCE_HIPAY_TPP_OPERATION_REFUND => array(
      COMMERCE_HIPAY_TPP_REMOTE_STATUS_REFUND_REQUESTED,
      COMMERCE_HIPAY_TPP_REMOTE_STATUS_REFUNDED,
      COMMERCE_HIPAY_TPP_REMOTE_STATUS_PARTIALLY_REFUNDED,
    ),
  );
}

/**
 * Returns an array of remote payment statuses for a specific operation type.
 *
 * @param string $operation_type
 *   An operation type to return remote payment statuses for.
 *
 * @return mixed
 *   An array of remote payment statuses for a specific operation type.
 */
function commerce_hipay_tpp_get_remote_statuses_for_operation_type($operation_type) {
  $remote_statuses_by_type = commerce_hipay_tpp_get_remote_statuses_by_operation_type();
  return $remote_statuses_by_type[$operation_type];
}

/**
 * Returns an array of remote payment success statuses keyed by operation type.
 *
 * @return array
 *   An array of remote payment success statuses keyed by operation type.
 */
function commerce_hipay_tpp_get_remote_success_statuses_by_operation_type() {
  return array(
    COMMERCE_HIPAY_TPP_OPERATION_AUTHORIZATION => array(
      COMMERCE_HIPAY_TPP_REMOTE_STATUS_AUTHORIZED,
    ),
    COMMERCE_HIPAY_TPP_OPERATION_CAPTURE => array(
      COMMERCE_HIPAY_TPP_REMOTE_STATUS_CAPTURED,
    ),
    COMMERCE_HIPAY_TPP_OPERATION_REFUND => array(
      COMMERCE_HIPAY_TPP_REMOTE_STATUS_REFUNDED,
    ),
  );
}

/**
 * Returns an array of remote payment statuses for a specific operation type.
 *
 * @param string $operation_type
 *   An operation type to return remote payment statuses for.
 *
 * @return mixed
 *   An array of remote payment statuses for a specific operation type.
 */
function commerce_hipay_tpp_get_remote_success_statuses_for_operation_type($operation_type) {
  $remote_statuses_by_type = commerce_hipay_tpp_get_remote_success_statuses_by_operation_type();
  return isset($remote_statuses_by_type[$operation_type]) ? $remote_statuses_by_type[$operation_type] : array();
}

/**
 * Returns local success payment status for a specific operation type.
 *
 * @param string $operation_type
 *   An operation type to return the local success payment status for.
 *
 * @return string
 *   A local success payment status for a specific operation type.
 */
function commerce_hipay_tpp_get_remote_success_status_for_operation_type($operation_type) {
  switch ($operation_type) {
    case COMMERCE_HIPAY_TPP_OPERATION_AUTHORIZATION:
      return COMMERCE_HIPAY_TPP_PAYMENT_STATUS_AUTHORIZED;
    case COMMERCE_HIPAY_TPP_OPERATION_CAPTURE:
      return COMMERCE_HIPAY_TPP_PAYMENT_STATUS_CAPTURED;
    case COMMERCE_HIPAY_TPP_OPERATION_REFUND:
      return COMMERCE_HIPAY_TPP_PAYMENT_STATUS_REFUNDED;
  }
}

/**
 * Returns all payment method instances for a given payment method id.
 *
 * @param $method_id
 *   A payment method id
 * @param $include_disabled
 *   Return enabled and disabled instances
 *
 * @return
 *   An array of all loaded payment method instances keyed by instance_id
 */
function commerce_hipay_tpp_payment_method_instances($method_id = 'commerce_hipay_tpp', $include_disabled = FALSE) {
  $cached_ids = &drupal_static(__FUNCTION__, array());
  $include_disabled = !empty($include_disabled);

  if (!array_key_exists($method_id, $cached_ids)) {
    $cached_ids[$method_id] = array();

    // load all rules ... no easier way
    $rules_configs = rules_config_load_multiple(FALSE);

    // find all rules with an action to enable this method
    foreach ($rules_configs as $rule_name => $rule) {
      // Only rules and sub-types have actions.
      if (!($rule instanceof Rule)) {
        continue;
      }

      // fast skip if rule does not depend on commerce_payment
      if (!isset($rule->dependencies) || !in_array('commerce_payment', $rule->dependencies)) {
        continue;
      }

      foreach ($rule->actions() as $action) {
        // skip any actions that are not simple rules actions, ie loops
        if (!($action instanceof RulesAction)) {
          continue;
        }

        if ($action->getElementName() == 'commerce_payment_enable_' . $method_id) {
          $instance_id = commerce_payment_method_instance_id($method_id, $rule);
          $cached_ids[$method_id][$instance_id] = $rule->active;
          continue 2; // skip to next rule
        }
      }
    }
  }

  // load instances
  $instances = array();
  if (!empty($cached_ids[$method_id])) {
    foreach ($cached_ids[$method_id] as $instance_id => $instance_active) {
      if ($instance_active || $include_disabled) {
        $instances[$instance_id] = commerce_payment_method_instance_load($instance_id);
      }
    }
  }

  return $instances;
}
