<?php
/**
 * @file
 * Provides integration with Hipay TPP payment method (off-site).
 */

require_once 'includes/commerce_hipay_tpp.inc';
require_once 'includes/commerce_hipay_tpp.constants.inc';
require_once 'includes/commerce_hipay_tpp.codes.inc';
require_once 'includes/commerce_hipay_tpp.cardonfile.inc';

/**
 * Implements hook_commerce_payment_method_info().
 *
 * @see hook_commerce_payment_method_info()
 */
function commerce_hipay_tpp_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_hipay_tpp'] = array(
    'title' => 'Hipay TPP',
    'display_title' => t('Credit card'),
    'description' => t('Hipay TPP API payment method (off-site)'),
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => FALSE,
    'cardonfile' => array(
      'charge callback' => 'commerce_hipay_tpp_cardonfile_charge',
      'update callback' => 'commerce_hipay_tpp_cardonfile_update',
      'delete callback' => 'commerce_hipay_tpp_cardonfile_delete',
    ),
  );

  return $payment_methods;
}

/**
 * Implements hook_commerce_payment_transaction_status_info().
 *
 * We will use custom transaction success statuses instead of Drupal Commerce's
 * default COMMERCE_PAYMENT_STATUS_SUCCESS, as it will make it easier selecting
 * specific transaction types for follow-up maintenance (for example when
 * checking access rights and validating whether a specific transaction type
 * already exists).
 */
function commerce_hipay_tpp_commerce_payment_transaction_status_info() {
  $statuses = array();

  $statuses[COMMERCE_HIPAY_TPP_PAYMENT_STATUS_AUTHORIZED] = array(
    'status' => COMMERCE_HIPAY_TPP_PAYMENT_STATUS_AUTHORIZED,
    'title' => t('Authorized'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-success.png',
    // Authorize transactions should not influence order balance.
    'total' => FALSE,
  );

  $statuses[COMMERCE_HIPAY_TPP_PAYMENT_STATUS_CANCELLED] = array(
    'status' => COMMERCE_HIPAY_TPP_PAYMENT_STATUS_CANCELLED,
    'title' => t('Cancelled'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-success.png',
    // Only authorized transactions can be canceled, therefore cancel
    // transactions should not influence order balance.
    'total' => FALSE,
  );

  // Special Hipay pending status - transaction is waiting for server-to-server
  // notification before updating its status to confirmed/failed.
  $statuses[COMMERCE_HIPAY_TPP_PAYMENT_STATUS_PENDING] = array(
    'status' => COMMERCE_HIPAY_TPP_PAYMENT_STATUS_PENDING,
    'title' => t('Waiting for server-to-server notification'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-pending.png',
    'total' => FALSE,
  );

  // Special statuses for "history transactions".
  $statuses[COMMERCE_HIPAY_TPP_PAYMENT_STATUS_CAPTURED] = array(
    'status' => COMMERCE_HIPAY_TPP_PAYMENT_STATUS_CAPTURED,
    'title' => t('Captured'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-success.png',
    'total' => TRUE,
  );

  $statuses[COMMERCE_HIPAY_TPP_PAYMENT_STATUS_REFUNDED] = array(
    'status' => COMMERCE_HIPAY_TPP_PAYMENT_STATUS_REFUNDED,
    'title' => t('Refunded'),
    'icon' => drupal_get_path('module', 'commerce_payment') . '/theme/icon-success.png',
    'total' => TRUE,
  );

  return $statuses;
}

/**
 * Implements hook_menu().
 */
function commerce_hipay_tpp_menu() {
  $items = array();

  // Async Response URL.
  $items['commerce-hipay-tpp/notify'] = array(
    'page callback' => 'commerce_hipay_tpp_callback_notification',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Refresh.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/hipay-refresh'] = array(
    'title' => 'Refresh',
    'page callback' => 'commerce_hipay_tpp_refresh',
    'page arguments' => array(3, 5),
    'access callback' => 'commerce_hipay_tpp_access_refresh',
    'access arguments' => array(3, 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_hipay_tpp.admin.inc',
    'weight' => 1,
  );

  // Capture.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/hipay-capture'] = array(
    'title' => 'Capture',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_hipay_tpp_capture_form', 3, 5),
    'access callback' => 'commerce_hipay_tpp_access_capture',
    'access arguments' => array(3, 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_hipay_tpp.admin.inc',
    'weight' => 1,
  );

  // Refund.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/hipay-refund'] = array(
    'title' => 'Refund',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_hipay_tpp_refund_form', 3, 5),
    'access callback' => 'commerce_hipay_tpp_access_refund',
    'access arguments' => array(3, 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_hipay_tpp.admin.inc',
    'weight' => 1,
  );

  // Cancel.
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/hipay-cancel'] = array(
    'title' => 'Cancel',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_hipay_tpp_cancel_form', 3, 5),
    'access callback' => 'commerce_hipay_tpp_access_cancel',
    'access arguments' => array(3, 5),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_hipay_tpp.admin.inc',
    'weight' => 1,
  );

  return $items;
}

/**
 * Implements hook_menu_alter().
 *
 * @see commerce_payment_ui_menu()
 */
function commerce_hipay_tpp_menu_alter(&$items) {
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/delete']['access callback'] = 'commerce_hipay_tpp_access_delete';
  $items['admin/commerce/orders/%commerce_order/payment/%commerce_payment_transaction/delete']['access arguments'] = array(3, 5);
}

/**
 * Determine whether the user has permissions to refresh the transaction.
 *
 * @see commerce_hipay_tpp_menu()
 */
function commerce_hipay_tpp_access_refresh($order, $transaction) {
  // Deny access if transaction was not done using Hipay method, or it doesn't
  // have Hipay transaction reference in 'remote_id' parameter, or it is not
  // the main (first) transaction for this order.
  if (
    !in_array($transaction->payment_method, array_keys(commerce_hipay_tpp_commerce_payment_method_info()))
    || empty($transaction->remote_id)
    || !empty($transaction->data['reference_transaction_id'])
  ) {
    return FALSE;
  }

  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Determine whether the user has permissions to capture the transaction.
 *
 * @see commerce_hipay_tpp_menu()
 */
function commerce_hipay_tpp_access_capture($order, $transaction) {
  // Hipay-specific capture access restrictions.
  if (in_array($transaction->payment_method, array_keys(commerce_hipay_tpp_commerce_payment_method_info()))) {
    // Deny access if authorization has not been successfully completed,
    // has been denied or cancelled.
    if (
      $transaction->status !== COMMERCE_HIPAY_TPP_PAYMENT_STATUS_AUTHORIZED
      || $transaction->remote_status == COMMERCE_HIPAY_TPP_REMOTE_STATUS_CANCELLED
    ) {
      return FALSE;
    }
    // Deny access if total authorization amount has already been captured.
    $totals = commerce_hipay_tpp_get_order_operation_totals($order);
    if (
      !empty($totals[COMMERCE_HIPAY_TPP_OPERATION_AUTHORIZATION])
      && !empty($totals[COMMERCE_HIPAY_TPP_OPERATION_CAPTURE])
      && $totals[COMMERCE_HIPAY_TPP_OPERATION_CAPTURE] >= $totals[COMMERCE_HIPAY_TPP_OPERATION_AUTHORIZATION]
    ) {
      return FALSE;
    }
  }

  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Determine whether the user has permissions to refund the transaction.
 *
 * @see commerce_hipay_tpp_menu()
 */
function commerce_hipay_tpp_access_refund($order, $transaction) {
  // Hipay-specific refund access restrictions.
  if (in_array($transaction->payment_method, array_keys(commerce_hipay_tpp_commerce_payment_method_info()))) {
    // Deny access if no capture or canceled.
    if (!(
      // Sale transactions.
      $transaction->data['operation'] == COMMERCE_HIPAY_TPP_OPERATION_SALE
      && $transaction->status == COMMERCE_PAYMENT_STATUS_SUCCESS
      // Capture transactions.
      || $transaction->data['operation'] == COMMERCE_HIPAY_TPP_OPERATION_CAPTURE
      && (
        $transaction->status == COMMERCE_PAYMENT_STATUS_PENDING
        || $transaction->status == COMMERCE_HIPAY_TPP_PAYMENT_STATUS_CAPTURED
      )
    )) {
      return FALSE;
    }

    // Deny access if total captured amount has already been refunded.
    $totals = commerce_hipay_tpp_get_order_operation_totals($order);
    $total_captured = commerce_hipay_tpp_get_order_total_captured($totals);
    if (
      !empty($totals[COMMERCE_HIPAY_TPP_OPERATION_REFUND])
      && abs($totals[COMMERCE_HIPAY_TPP_OPERATION_REFUND]) >= $total_captured
    ) {
      return FALSE;
    }
  }

  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Determine whether the user has permissions to refund the transaction.
 *
 * @see commerce_hipay_tpp_menu()
 */
function commerce_hipay_tpp_access_cancel($order, $transaction) {
  // Hipay-specific refund access restrictions.
  if (in_array($transaction->payment_method, array_keys(commerce_hipay_tpp_commerce_payment_method_info()))) {
    // Deny access if no capture or canceled.
    $status = (int) $transaction->remote_status;
    if (
      $status !== COMMERCE_HIPAY_TPP_REMOTE_STATUS_AUTHORIZED
      && $status !== COMMERCE_HIPAY_TPP_REMOTE_STATUS_AUTHORIZATION_REQUESTED
    ) {
      return FALSE;
    }

    // Deny access if a capture transaction exists.
    $totals = commerce_hipay_tpp_get_order_operation_totals($order);
    if (!empty($totals[COMMERCE_HIPAY_TPP_OPERATION_CAPTURE])) {
      return FALSE;
    }
  }

  // Allow access if the user can update this transaction.
  return commerce_payment_transaction_access('update', $transaction);
}

/**
 * Determine whether the user has permissions to delete the transaction.
 *
 * @see commerce_hipay_tpp_menu_alter()
 */
function commerce_hipay_tpp_access_delete($order, $transaction) {
  // Hipay-specific delete access restrictions.
  if (in_array($transaction->payment_method, array_keys(commerce_hipay_tpp_commerce_payment_method_info()))) {
    // Do not allow to delete a transaction if it is referenced by another
    // transaction in the same order.
    $order_transactions = commerce_hipay_tpp_get_order_transactions($order);
    foreach ($order_transactions as $order_transaction) {
      if (
        !empty($order_transaction->data['reference_transaction_id'])
        && $order_transaction->data['reference_transaction_id'] == $transaction->transaction_id
      ) {
        return FALSE;
      }
    }

    // Also do not allow to delete a capture transaction if a refund transaction
    // exists (because we might have multiple captures, and one refund attached
    // to only one of these captures, but the amounts don't have to match, so we
    // shouldn't be able to delete any capture in such situation).
    if (
      !empty($transaction->data['operation'])
      && $transaction->data['operation'] == COMMERCE_HIPAY_TPP_OPERATION_CAPTURE
    ) {
      $transactions_by_operation = commerce_hipay_tpp_get_order_transactions_by_operation($order);
      if (!empty($transactions_by_operation[COMMERCE_HIPAY_TPP_OPERATION_REFUND])) {
        return FALSE;
      }
    }
  }
  // Allow access if the user can delete this transaction.
  return commerce_payment_transaction_access('delete', $transaction);
}

/**
 * Returns default settings for the Hipay TPP payment method.
 *
 * @see commerce_hipay_tpp_settings_form()
 */
function commerce_hipay_tpp_settings_default() {
  $default_settings = array(
    'endpoint' => COMMERCE_HIPAY_TPP_TEST,
    'api_username' => '',
    'api_password' => '',
    'secret_passphrase' => '',
    'operation' => COMMERCE_HIPAY_TPP_OPERATION_SALE,
    'supported_currencies' => drupal_map_assoc(array_keys(commerce_hipay_get_enabled_currencies())),
    'currency_code' => commerce_default_currency(),
    'template' => COMMERCE_HIPAY_TPP_TEMPLATE_BASIC,
    'language' => 'en_GB',
    '3ds' => 1,
    'cardonfile' => FALSE,
    'css' => '',
    'api_logging' => array(
      'request' => FALSE,
      'response' => FALSE,
    ),
  );
  return $default_settings;
}

/**
 * Payment method callback: settings form.
 *
 * @see hook_commerce_payment_method_info()
 */
function commerce_hipay_tpp_settings_form($settings = array()) {
  // Merge default settings into the stored settings array.
  // Settings are stored in multi-level array, so we need recursive merge. And
  // actually replace instead of merge, to make sure the default settings are
  // correctly overriden by custom user settings (array_merge_recursive() would
  // just add new array elements instead of overriding existing ones).
  $settings = array_replace_recursive(commerce_hipay_tpp_settings_default(), $settings);

  $form = array();

  $form['endpoint'] = array(
    '#type' => 'radios',
    '#title' => t('Environment'),
    '#options' => array(
      COMMERCE_HIPAY_TPP_TEST => t('Test - process test transactions to a test account'),
      COMMERCE_HIPAY_TPP_PRODUCTION => t('Production - process real transactions to a production account'),
    ),
    '#default_value' => $settings['endpoint'],
    '#required' => TRUE,
  );

  $form['api_username'] = array(
    '#type' => 'textfield',
    '#title' => t('API username'),
    '#description' => t('The name of the user for accessing Hipay TPP webservice. This, as well as API password, can be found in your Hipay Fullservice Account under <em>Integration / Security Settings</em>.'),
    '#default_value' => $settings['api_username'],
    '#required' => TRUE,
  );

  $form['api_password'] = array(
    '#type' => 'textfield',
    '#title' => t('API password'),
    '#description' => t('The password for the user specified in the above field.'),
    '#default_value' => $settings['api_password'],
    '#required' => TRUE,
  );

  $form['secret_passphrase'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret Passphrase'),
    '#description' => t('This secret passphrase is used to generate a unique character string (signature) hashed with SHA algorithm. It should be the same as the value provided in <em>Secret Passphrase</em> field in your Hipay Fullservice Account configuration in <em>Integration » Security Settings</em>.'),
    '#default_value' => $settings['secret_passphrase'],
    '#required' => TRUE,
  );

  $form['operation'] = array(
    '#type' => 'radios',
    '#title' => t('Default transaction type'),
    '#options' => array(
      COMMERCE_HIPAY_TPP_OPERATION_SALE => t('Sale - indicates transaction is sent for authorization, and if approved, is automatically submitted for capture'),
      COMMERCE_HIPAY_TPP_OPERATION_AUTHORIZATION => t('Authorization - indicates this transaction is sent for authorization only. The transaction will not be sent for settlement until the transaction is submitted for capture manually by the Merchant'),
    ),
    '#default_value' => $settings['operation'],
    '#required' => TRUE,
  );

  $form['supported_currencies'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Supported currencies'),
    '#description' => t('Transactions in these currencies will be sent as-is to the gateway, without any prior conversion. This setting should reflect your <em>Settlement currencies</em> configuration of your Hipay Fullservice account.'),
    '#options' => commerce_hipay_get_enabled_currencies(),
    '#multiple' => TRUE,
    '#default_value' => $settings['supported_currencies'],
    '#required' => TRUE,
  );

  $form['currency_code'] = array(
    '#type' => 'select',
    '#title' => t('Default currency'),
    '#description' => t('Transactions in other currencies will be converted to this currency, so multi-currency sites must be configured to use appropriate conversion rates.'),
    '#options' => commerce_hipay_get_enabled_currencies(),
    '#default_value' => $settings['currency_code'],
  );

  $form['template'] = array(
    '#type' => 'radios',
    '#title' => t('Checkout redirect mode'),
    '#options' => array(
      COMMERCE_HIPAY_TPP_TEMPLATE_BASIC => t('Redirect to the hosted checkout page through an automatically submitted form'),
      COMMERCE_HIPAY_TPP_TEMPLATE_IFRAME => t('Stay on this site using an iframe to embed the hosted checkout page'),
    ),
    '#default_value' => $settings['template'],
    '#required' => TRUE,
  );

  $form['language'] = array(
    '#type' => 'select',
    '#title' => t('Default language'),
    '#description' => t("Language to be used by the off-site payment page or iframe if user's language is not supported by the gateway."),
    '#options' => commerce_hipay_get_supported_languages(),
    '#default_value' => $settings['language'],
  );

  $form['3ds'] = array(
    '#type' => 'radios',
    '#title' => t('Should the 3-D Secure authentication be performed for payment transactions'),
    '#options' => array(
      0 => t('Bypass 3-D Secure authentication.'),
      1 => t('3-D Secure authentication if available.'),
      2 => t('3-D Secure authentication mandatory.'),
    ),
    '#default_value' => $settings['3ds'],
    '#required' => TRUE,
  );

  if (module_exists('commerce_cardonfile')) {
    $form['cardonfile'] = array(
      '#type' => 'checkbox',
      '#title' => t('Enable Card on File functionality with this payment method.'),
      '#description' => t('Stores tokenized value for card data.'),
      '#default_value' => $settings['cardonfile'],
    );
  }
  else {
    $form['cardonfile'] = array(
      '#type' => 'markup',
      '#markup' => t('To enable Card on File functionality download and install the <a href="@cardonfile_url">Card on File</a> module.', array(
        '@cardonfile_url' => url('https://www.drupal.org/project/commerce_cardonfile'),
      )),
    );
  }

  $form['css'] = array(
    '#type' => 'textfield',
    '#title' => t('Payment page style sheet'),
    '#description' => t('Path and filename of the custom style sheet for the hosted payment page, relative to Drupal webroot.')
    . '<br />' . t('Note that Hipay requires HTTPS protocol, and the URL generated will reflect this requirement - make sure that your server configuration supports it.'),
    '#default_value' => $settings['css'],
  );

  $form['api_logging'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#description' => t('Basic transaction-related request and response data will be saved in transaction <em>payload</em> property regardless of this setting. Enabling this option will save additional information on each transaction request and response in the dblog.'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => $settings['api_logging'],
  );

  return $form;
}

/**
 * Returns generic Hipay TPP API request parameters.
 *
 * @param object $order
 *   An order object being paid for.
 * @param array $payment_method
 *   The payment method instance used for the payment transaction.
 *
 * @return array
 *   An array of generic Hipay TPP API request parameters.
 */
function commerce_hipay_tpp_get_request_data($order, $payment_method) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_currency_code = $order_wrapper->commerce_order_total->currency_code->value();

  $charge = commerce_hipay_tpp_get_charge_data($order, $payment_method);

  $customer_billing_address_wrapper = $order_wrapper->commerce_customer_billing->commerce_customer_address;
  $customer_shipping_address_wrapper = $order_wrapper->commerce_customer_shipping->commerce_customer_address;

  $billing_country = $customer_billing_address_wrapper->country->value();
  $shipping_country = $customer_billing_address_wrapper->country->value();

  $return_url = url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));
  $cancel_url = url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE));

  // For each HPP initialization call we want to send a different value of
  // $orderid, to make sure that the 'forwardUrl' we receive in gateway response
  // is different. That's because with each init call we're sending a different
  // value of 'cdata2' parameter (which contains Drupal payment transaction ID),
  // and if the forwardUrl wouldn't change, the gateway would return the value
  // of 'cdata2' from the very first init call for this order.
  // Therefore for first init call we set 'orderid' to just order ID, and then
  // add auto-incrementing number at the end for all subsequent init calls.
  $orderid = $order->order_id;
  $existing_transactions = commerce_hipay_tpp_get_order_transactions($order);
  if (count($existing_transactions) > 0) {
    $orderid .= '-' . (count($existing_transactions) + 1);
  }

  $request_data = array(
    'orderid' => $orderid,
    'operation' => $payment_method['settings']['operation'],
    'authentication_indicator' => $payment_method['settings']['3ds'],
    'merchant_display_name' => substr(variable_get('site_name', url('<front>', array('absolute' => TRUE))), 0, 32),
    'description' => substr(t('Order @order_number at @store', array(
      '@order_number' => $order->order_number,
      '@store' => variable_get('site_name', url('<front>', array('absolute' => TRUE))),
    )), 0, 255),
    'currency' => $charge['currency_code'],
    'amount' => number_format(commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']), 2, '.', ''),
    'cid' => $order->uid,
    'ipaddr' => $_SERVER['REMOTE_ADDR'],
    'accept_url' => $return_url,
    'decline_url' => $return_url,
    'pending_url' => $return_url,
    'exception_url' => $return_url,
    'cancel_url' => $cancel_url,
    'language' => commerce_hipay_tpp_get_request_language($payment_method),
    // Customer parameters.
    'email' => $order->mail,
    'firstname' => $customer_billing_address_wrapper->first_name->value(),
    'lastname' => $customer_billing_address_wrapper->last_name->value(),
    'recipientinfo' => $customer_billing_address_wrapper->organisation_name->value(),
    'streetaddress' => $customer_billing_address_wrapper->thoroughfare->value(),
    'streetaddress2' => $customer_billing_address_wrapper->premise->value(),
    'city' => $customer_billing_address_wrapper->locality->value(),
    'zipcode' => $customer_billing_address_wrapper->postal_code->value(),
    'country' => $billing_country,
    // Shipping information parameters.
    'shipto_firstname' => $customer_shipping_address_wrapper->first_name->value(),
    'shipto_lastname' => $customer_shipping_address_wrapper->last_name->value(),
    'shipto_recipientinfo' => $customer_shipping_address_wrapper->organisation_name->value(),
    'shipto_streetaddress' => $customer_shipping_address_wrapper->thoroughfare->value(),
    'shipto_streetaddress2' => $customer_shipping_address_wrapper->premise->value(),
    'shipto_city' => $customer_shipping_address_wrapper->locality->value(),
    'shipto_zipcode' => $customer_shipping_address_wrapper->postal_code->value(),
    'shipto_country' => $shipping_country,
    // Custom data.
    // We pass order_id in custom cdata1 parameter again, even though it was
    // already added to the request in 'orderid' parameter, to make sure that
    // we consistency receive it in the same response parameter both in return
    // redirect as well as server-to-server notification (as they use different
    // structure when returning order details).
    'cdata1' => $order->order_id,
    'cdata3' => $order->data['payment_redirect_key'],
  );
  // State could be sent only for USA and Canada.
  if ($billing_country == 'CA' || $billing_country == 'US') {
    $request_data['state'] = $customer_billing_address_wrapper->administrative_area->value();
  }
  if ($shipping_country == 'CA' || $shipping_country == 'US') {
    $request_data['shipto_state'] = $customer_shipping_address_wrapper->administrative_area->value();
  }

  // Add shipping and tax amounts relevant order line items exist.
  $subamounts = commerce_hipay_tpp_get_order_amounts_by_type($order);
  if (!empty($subamounts['shipping'])) {
    $shipping_amount = commerce_currency_convert($subamounts['shipping'], $order_currency_code, $charge['currency_code']);
    $request_data['shipping'] = number_format(commerce_currency_amount_to_decimal($shipping_amount, $charge['currency_code']), 2, '.', '');
  }
  if (!empty($subamounts['tax'])) {
    $tax_amount = commerce_currency_convert($subamounts['tax'], $order_currency_code, $charge['currency_code']);
    $request_data['tax'] = number_format(commerce_currency_amount_to_decimal($tax_amount, $charge['currency_code']), 2, '.', '');
  }

  if (!empty($payment_method['settings']['css'])) {
    $request_data['css'] = url($payment_method['settings']['css'], array(
      'absolute' => TRUE,
      'https' => TRUE,
      'language' => (object) array('language' => FALSE),
    ));
  }

  return $request_data;
}

/**
 * Returns a price array to charge converted to the currency supported by Hipay.
 *
 * @param object $order
 *   An order object being paid for.
 * @param array $payment_method
 *   The payment method instance used for the payment transaction.
 * @param array|null $charge
 *   The price array for the charge amount with keys of 'amount' and 'currency'.
 *   If null the total value of the order is used.
 *
 * @return array
 *   The price array to charge with keys of 'amount' and 'currency',
 *   converted to the currency supported by Hipay TPP gateway.
 */
function commerce_hipay_tpp_get_charge_data($order, $payment_method, $charge = NULL) {
  // Determine the currency code to use to actually process the transaction,
  // which will either be the default currency code or the currency code of the
  // order (charge) if it's supported by Hipay (if that option is enabled).
  $currency_code = $payment_method['settings']['currency_code'];

  if (isset($charge)) {
    $amount = $charge['amount'];
    $order_currency_code = $charge['currency_code'];
  }
  else {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $amount = $order_wrapper->commerce_order_total->amount->value();
    $order_currency_code = $order_wrapper->commerce_order_total->currency_code->value();
  }

  if (in_array($order_currency_code, $payment_method['settings']['supported_currencies'], TRUE)) {
    $currency_code = $order_currency_code;
  }

  // Prepare a transaction amount value in the proper currency.
  if ($order_currency_code != $currency_code) {
    $amount = commerce_currency_convert($amount, $order_currency_code, $currency_code);
  }

  return array(
    'amount' => $amount,
    'currency_code' => $currency_code,
  );
}

/**
 * Performs background call to Hipay API to initialize the hosted payment page.
 *
 * @param object $order
 *   The order object the hosted checkout is for.
 * @param array $payment_method
 *   The payment method instance used to generate the redirect link.
 *
 * @return object
 *   The Hipay initialization call response object.
 *
 * @see http://hipay-tpp-gateway-api.readthedocs.org/en/latest/Chap3-RESTAPIResources-initializeHostedPaymentPage.html
 */
function commerce_hipay_tpp_api_initialize($order, $payment_method) {
  // Get generic API request data.
  // The same function is also used for 'Request a New Order' API resource
  // (see commerce_hipay_tpp_api_order_request()).
  $request_data = commerce_hipay_tpp_get_request_data($order, $payment_method);

  // E-commerce with SSL/TLS Encryption.
  $request_data['eci'] = COMMERCE_HIPAY_TPP_ECI_ECOMMERCE;

  // Use either full-page redirect to the hosted payment page
  // or embed it in the iframe.
  $request_data['template'] = $payment_method['settings']['template'];

  // Create payment transaction before we call Hipay API.
  $transaction = commerce_payment_transaction_new($payment_method['method_id'], $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = commerce_currency_decimal_to_amount($request_data['amount'], $request_data['currency']);
  $transaction->currency_code = $request_data['currency'];
  $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  $transaction->message = t('@operation transaction initialized.');
  $transaction->message_variables = array(
    '@operation' => ucfirst($payment_method['settings']['operation']),
  );
  $transaction->data['operation'] = $payment_method['settings']['operation'];
  commerce_payment_transaction_save($transaction);

  $request_data['cdata2'] = $transaction->transaction_id;

  //$request_data['operation_id'] = $transaction->transaction_id;

  if (module_exists('commerce_cardonfile') && !empty($payment_method['settings']['cardonfile'])) {
    $request_data['multi_use'] = 1;
  }

  // Allow other modules to alter the $request_data array.
  drupal_alter('commerce_hipay_tpp_api_initialize', $request_data, $order, $payment_method);

  // Add request data to the transaction payload.
  $transaction->payload['init-request-' . time()] = $request_data;
  commerce_payment_transaction_save($transaction);

  // Perform the call to Hipay TPP API.
  $url = commerce_hipay_tpp_get_server_url($payment_method) . COMMERCE_HIPAY_TPP_RESOURCE_INITIALIZATION;
  $response = commerce_hipay_tpp_api_request($url, $request_data, $payment_method, 'Initialization');

  // Update payment transaction with response details.
  $transaction->payload['init-response-' . time()] = $response;

  // Handle API exceptions.
  if (!empty($response['code'])) {
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $transaction->message = t('Error @error_code: @error_message: @error_description');
    $transaction->message_variables = array(
      '@error_code' => $response['code'],
      '@error_message' => $response['message'],
      '@error_description' => $response['description'],
    );
  }

  // Save updated transaction.
  commerce_payment_transaction_save($transaction);

  // Allow other modules to process the initialization response.
  foreach (module_implements('commerce_hipay_tpp_api_initialize_response') as $module) {
    $function = $module . '_commerce_hipay_tpp_api_initialize_response';
    $function($response, $transaction, $order, $payment_method);
  }

  return $response;
}

/**
 * Performs background call to Hipay API to request a new order.
 *
 * @param object $order
 *   The order object the hosted checkout is for.
 * @param array $payment_method
 *   The payment method instance used to request a new Hipay order.
 *
 * @see http://hipay-tpp-gateway-api.readthedocs.org/en/latest/Chap3-RESTAPIResources-requestNewOrder.html
 */
function commerce_hipay_tpp_api_order_request($order, $payment_method) {
  // We use 'cardonfile_charge' callback.
  if (commerce_hipay_tpp_cardonfile_charge($payment_method, $order->data['cardonfile'], $order)) {
    commerce_payment_redirect_pane_next_page($order);
  }
  else {
    commerce_payment_redirect_pane_previous_page($order);
  }

  // Redirect user to the relevant checkout page.
  drupal_goto(commerce_checkout_order_uri($order));
}

/**
 * Performs a call to Hipay TPP API.
 *
 * @param string $url
 *   Hipay API endpoint URL.
 * @param array $request_data
 *   A string of parameters to be sent to Hipay TPP API.
 * @param array $payment_method
 *   The payment method being used.
 *
 * @return object
 *   An array of Hipay TPP API response parameters.
 */
function commerce_hipay_tpp_api_request($url, $request_data, $payment_method, $call_type = 'API call') {
  // Log the request data if request logging is enabled.
  if (!empty($payment_method['settings']['api_logging']['request'])) {
    watchdog('commerce_hipay_tpp', '@call_type: request: !request_data', array(
      '@call_type' => $call_type,
      '!request_data' => '<pre>' . var_export($request_data, TRUE) . '</pre>',
    ), WATCHDOG_DEBUG);
  }

  $ch = curl_init($url);

  curl_setopt($ch, CURLOPT_USERPWD, $payment_method['settings']['api_username'] . ':' . $payment_method['settings']['api_password']);
  curl_setopt($ch, CURLOPT_HTTPHEADER, array(
    'Accept: application/json',
  ));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_FAILONERROR, FALSE);
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);
  curl_setopt($ch, CURLOPT_HEADER, FALSE);
  curl_setopt($ch, CURLOPT_POST, TRUE);
  curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($request_data));

  // Execute the request.
  $result = curl_exec($ch);

  // Log the cURL response if response logging is enabled.
  if (!empty($payment_method['settings']['api_logging']['response'])) {
    watchdog('commerce_hipay_tpp', '@call_type: cURL response: !response', array(
      '@call_type' => $call_type,
      '!response' => '<pre>' . var_export($result, TRUE) . '</pre>',
    ), WATCHDOG_DEBUG);
  }

  // If there was an error performing cURL request.
  if ($error = curl_error($ch)) {
    // Log cURL error.
    watchdog('commerce_hipay_tpp', '@call_type: cURL error: @error', array(
      '@call_type' => $call_type,
      '@error' => $error,
    ), WATCHDOG_ERROR);

    // Create response object in the same format as decoded Hipay API exception
    // response.
    $response = array(
      'code' => curl_errno($ch),
      'message' => 'cURL error',
      'description' => $error,
    );
  }
  // No cURL errors, the request worked fine.
  else {
    // Decode JSON response into array.
    $response = json_decode($result, TRUE);

    // Log the response if response logging is enabled.
    if (!empty($payment_method['settings']['api_logging']['response'])) {
      watchdog('commerce_hipay_tpp', '@call_type: response: !response', array(
        '@call_type' => $call_type,
        '!response' => '<pre>' . var_export($response, TRUE) . '</pre>',
      ), WATCHDOG_DEBUG);
    }
  }

  curl_close($ch);

  return $response;
}

/**
 * Implements hook_form_alter().
 */
function commerce_hipay_tpp_form_alter(&$form, &$form_state, $form_id) {
  // When loading Hipay hosted payment page into the iframe, let's remove the
  // 'Use the button below to proceed to the payment server.' help text from
  // the payment checkout page.
  if (
    $form_id == 'commerce_checkout_form_payment'
    && !empty($form['commerce_hipay_tpp_payment_method'])
    && $form['commerce_hipay_tpp_payment_method']['#value']['settings']['template'] == COMMERCE_HIPAY_TPP_TEMPLATE_IFRAME
  ) {
    unset($form['help']);
  }
}

function commerce_hipay_tpp_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge) {
  if (!empty($pane_values['cardonfile']) && $pane_values['cardonfile'] != 'new') {
    // First attempt to load the card on file.
    $card_data = commerce_cardonfile_load($pane_values['cardonfile']);

    // Fail now if it is no longer available or the card is inactive.
    if (empty($card_data) || $card_data->status == 0) {
      drupal_set_message(t('The requested card on file is no longer valid.'), 'error');
      return FALSE;
    }

    $order->data['cardonfile'] = $card_data;
    commerce_order_save($order);
  }
}

/**
 * Payment method callback: redirect form.
 *
 * @see hook_commerce_payment_method_info()
 * @see commerce_hipay_tpp_redirect_form_validate()
 * @see commerce_hipay_tpp_redirect_form_submit()
 */
function commerce_hipay_tpp_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the payment method has not been configured yet.
  if (empty($payment_method['settings']['api_username']) || empty($payment_method['settings']['api_password'])) {
    drupal_set_message(t('Selected payment method has not yet been configured for use.'), 'error');
    // Redirect user to previous checkout page.
    commerce_payment_redirect_pane_previous_page($order);
    drupal_goto(commerce_checkout_order_uri($order));
  }
  elseif (!in_array(arg(3), array('back', 'return'))) {

    // If existing Card on File was selected, we need to use Request a New Order
    // Hipay API resource, instead of Initializing a Hosted Payment Page.
    if (!empty($order->data['cardonfile'])) {
      commerce_hipay_tpp_api_order_request($order, $payment_method);
    }

    // Initialize a hosted payment page.
    $response = commerce_hipay_tpp_api_initialize($order, $payment_method);

    if (!empty($response['code'])) {
      drupal_set_message(t('There was an error processing your payment with Hipay. Please try again or contact us if the problem persists.'), 'error');
      // Redirect user to previous checkout page.
      commerce_payment_redirect_pane_previous_page($order);
      drupal_goto(commerce_checkout_order_uri($order));
    }

    // Prepare redirect form.
    $form = array();

    // Store the payment method instance in the form array.
    $form['commerce_hipay_tpp_payment_method'] = array(
      '#type' => 'value',
      '#value' => $payment_method,
    );

    // Determine how to process the redirect based on the payment method
    // settings.
    switch ($payment_method['settings']['template']) {

      // Full-page redirect: go to Hipay URL received in the init call response.
      case COMMERCE_HIPAY_TPP_TEMPLATE_BASIC:
        drupal_goto($response['forwardUrl']);
        break;

      // Embedded iframe: display content of the Hipay URL received in the init
      // call response without leaving the site.
      case COMMERCE_HIPAY_TPP_TEMPLATE_IFRAME:
        // Add the iframe in a markup element.
        $form['iframe'] = array(
          '#markup' => commerce_hipay_tpp_get_iframe($response, $payment_method, $order),
        );
        break;
    }

    return $form;
  }
}

/**
 * Payment method callback: redirect form return validation.
 *
 * @see hook_commerce_payment_method_info()
 * @see commerce_hipay_tpp_redirect_form()
 * @see commerce_hipay_tpp_redirect_form_submit()
 * @see commerce_payment_redirect_pane_checkout_form()
 */
function commerce_hipay_tpp_redirect_form_validate($order, $payment_method) {
  $feedback = commerce_hipay_tpp_get_feedback();

  $result = commerce_hipay_tpp_redirect_process_feedback($feedback, $order, $payment_method);

  // Allow other modules to validate feedback and change the validation result.
  foreach (module_implements('commerce_hipay_tpp_redirect_form_validate') as $module) {
    $function = $module . '_commerce_hipay_tpp_redirect_form_validate';
    $result = $result && $function($feedback, $order, $payment_method);
  }

  return $result;
}

/**
 * Processes the offsite redirect return feedback.
 *
 * @param array $feedback
 *   An associative array containing the Hipay API call feedback.
 * @param object $order
 *   An order the feedback relates to.
 * @param array $payment_method
 *   A payment method used to pay for the order.
 *
 * @return bool
 *   A boolean indicating whether the processing was successful or not.
 *
 * @see commerce_hipay_tpp_redirect_form_validate()
 */
function commerce_hipay_tpp_redirect_process_feedback($feedback, $order, $payment_method) {
  // Log the Hipay return feedback if response logging is enabled.
  if (!empty($payment_method['settings']['api_logging']['response'])) {
    watchdog('commerce_hipay_tpp', 'Offsite redirect: received feedback: !feedback', array(
      '!feedback' => '<pre>' . var_export($feedback, TRUE) . '</pre>',
    ), WATCHDOG_DEBUG);
  }

  // Make sure that we have actually received the feedback from the gateway.
  if (empty($feedback) || !is_array($feedback)) {
    watchdog('commerce_hipay_tpp', 'Offsite redirect: Missing or invalid feedback received on redirect return: !feedback', array(
      '!feedback' => '<pre>' . var_export($feedback, TRUE) . '</pre>',
    ), WATCHDOG_ERROR);
    return FALSE;
  }

  // Before we start with any validation, let's first try to load the payment
  // transaction and add received feedback to its payload, so it would be
  // possible later on to check what has gone wrong.
  if (!$transaction = commerce_hipay_tpp_feedback_get_payment_transaction($feedback)) {
    watchdog('commerce_hipay_tpp', 'Offsite redirect: Unable to load payment transaction from response cdata2 (@cdata2)', array(
      '@cdata2' => $feedback['cdata2'],
    ), WATCHDOG_ERROR);
    return FALSE;
  }

  // Update payment transaction payload with received feedback.
  $transaction->payload['return-' . time()] = $feedback;
  commerce_payment_transaction_save($transaction);

  // Validate the signature either if it was provided by the gateway
  // or when the secret passphrase is configured locally.
  if (!commerce_hipay_tpp_feedback_validate_signature($feedback, $payment_method)) {
    watchdog('commerce_hipay_tpp', 'Offsite redirect: signature hashes do not match.', array(), WATCHDOG_ERROR);
    return FALSE;
  }

  // Verify that the response orderid matches local order_id.
  if (empty($feedback['cdata1']) || $feedback['cdata1'] != $order->order_id) {
    watchdog('commerce_hipay_tpp', 'Offsite redirect: Response order ID in cdata1 (@cdata1) does not match local order_id (@order_id).', array(
      '@cdata1' => $feedback['cdata1'],
      '@order_id' => $order->order_id,
    ), WATCHDOG_ERROR);
    return FALSE;
  }

  // Verify that the response redirect key matches the one stored in the order.
  if (!commerce_hipay_tpp_feedback_validate_payment_redirect_key($feedback, $order)) {
    watchdog('commerce_hipay_tpp', 'Offsite redirect: Response redirect key in cdata3 (@cdata3) does not match order @order_id redirect key (@order_redirect_key).', array(
      '@cdata3' => $feedback['cdata3'],
      '@order_id' => $order->order_id,
      '@order_redirect_key' => $order->data['payment_redirect_key'],
    ), WATCHDOG_ERROR);
    return FALSE;
  }

  // Now that we have done some basic feedback validation, let's update
  // the payment transaction with feedback details. We need to do it here
  // instead of commerce_hipay_tpp_redirect_form_submit(), as we want to
  // populate it with selected feedback details, even if the payment was
  // declined (because if the payment is declined we don't go into
  // commerce_hipay_tpp_redirect_form_submit() at all).
  // Also:
  // If transaction status is anything else than 'pending' (the original status
  // with which a payment transaction is created during initialization request)
  // it means that we have already received a server-to-server notification,
  // which already updated its details, so we don't want to change them anymore.
  if ($transaction->status == COMMERCE_PAYMENT_STATUS_PENDING) {
    $transaction->remote_id = $feedback['reference'];
    $transaction->status = COMMERCE_HIPAY_TPP_PAYMENT_STATUS_PENDING;
    $transaction->remote_status = $feedback['status'];
    $transaction->message = t('@message');
    $transaction->message_variables = array(
      '@message' => commerce_hipay_tpp_get_payment_status_message($feedback['status']),
    );
  }
  commerce_payment_transaction_save($transaction);

  // Finally, if payment status is anything but accepted or pending,
  // we need to return the customer to the previous checkout page.
  if (
    $feedback['state'] != COMMERCE_HIPAY_TPP_API_STATUS_COMPLETED
    && $feedback['state'] != COMMERCE_HIPAY_TPP_API_STATUS_PENDING
  ) {
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    commerce_payment_transaction_save($transaction);
    return FALSE;
  }

  return TRUE;
}

/**
 * Payment method callback: redirect form return submission.
 *
 * @see hook_commerce_payment_method_info()
 * @see commerce_hipay_tpp_redirect_form()
 * @see commerce_hipay_tpp_redirect_form_validate()
 * @see commerce_payment_redirect_pane_checkout_form()
 */
function commerce_hipay_tpp_redirect_form_submit($order, $payment_method) {
  $feedback = commerce_hipay_tpp_get_feedback();

  // Allow other modules to do their own submit processing.
  foreach (module_implements('commerce_hipay_tpp_redirect_form_submit') as $module) {
    $function = $module . '_commerce_hipay_tpp_redirect_form_submit';
    $function($feedback, $order, $payment_method);
  }
}

/**
 * Callback page for both gateway responses - redirect back and validate.
 *
 * @see commerce_hipay_tpp_menu().
 */
function commerce_hipay_tpp_callback_notification() {
  // Get Hipay API notification feedback and process it.
  $callback_type = 'notification';
  $feedback = commerce_hipay_tpp_get_feedback();
  $result = commerce_hipay_tpp_process_notification($feedback, $callback_type);

  // Allow other modules to process the notification.
  foreach (module_implements('commerce_hipay_tpp_process_notification') as $module) {
    $function = $module . '_commerce_hipay_tpp_process_notification';
    $result = $result && $function($feedback, $callback_type, $result);
  }
}

/**
 * Processes status of the response returned by Hipay API.
 *
 * @param array $response
 *   An associative array containing the Hipay API call response.
 * @param object $transaction
 *   Original payment transaction which current operation is based on.
 * @param string $transaction_type
 *   A string indicating which transaction type we are dealing with.
 *   Might be either 'capture' or 'refund'.
 *
 * @see commerce_hipay_tpp_api_capture()
 * @see commerce_hipay_tpp_api_refund()
 */
function commerce_hipay_tpp_process_response($response, &$transaction, $transaction_type) {
  // Handle API exceptions.
  if (!empty($response['code'])) {
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
    $transaction->message = t('Error @error_code: @error_message: @error_description');
    $transaction->message_variables = array(
      '@error_code' => $response['code'],
      '@error_message' => $response['message'],
      '@error_description' => $response['description'],
    );
    drupal_set_message(t('There has been an error requesting the @transaction_type: @error_code: @error_message: @error_description', array(
      '@transaction_type' => $transaction_type,
      '@error_code' => $response['code'],
      '@error_message' => $response['message'],
      '@error_description' => $response['description'],
    )), 'error');
  }
  else {
    $transaction->remote_status = $response['status'];

    // Let's put status message in transaction's message_variables parameter,
    // as this way it will be easier to update it later on transaction refresh.
    $transaction->message = t('@status_message');
    $transaction->message_variables = array(
      '@status_message' => commerce_hipay_tpp_get_payment_status_message($response['status']),
    );

    if (in_array($response['status'], commerce_hipay_tpp_get_remote_statuses_for_operation_type($transaction_type))) {
      if ($transaction_type == COMMERCE_HIPAY_TPP_OPERATION_AUTHORIZATION && $success_status = commerce_hipay_tpp_get_remote_success_status_for_operation_type($transaction_type)) {
        $transaction->status = $success_status;
      }
    }
    else {
      $transaction->message .= '<br />' . t('Processing error: unhanded post-@transaction_type status: @remote_status');
      $transaction->message_variables['@transaction_type'] = $transaction_type;
      $transaction->message_variables['@remote_status'] = $response['status'];
    }

    if (!empty($response['reason']['code'])) {
      $message = commerce_hipay_tpp_get_error_message($response['reason']['code']);
      $transaction->message .= '<br />' . t('Error @error_code: @error_message');
      $transaction->message_variables['@error_code'] = $response['reason']['code'];
      $transaction->message_variables['@error_message'] = (!empty($message)) ? $message : $response['reason']['message'];
    }

    drupal_set_message(t('@transaction_type request has been sent to the payment gateway, now waiting for the server-to-server notification to update the transaction details. Refresh this page in a moment to see updated transaction details.', array(
      '@transaction_type' => ucfirst($transaction_type),
    )));
  }

  commerce_payment_transaction_save($transaction);
}

/**
 * Processes the feedback returned by Hipay API.
 *
 * @param array $feedback
 *   An associative array containing the Hipay API call feedback.
 * @param string $callback_type
 *   A string indicating which callback type we are dealing with.
 *   Might be either 'response', when a user is redirected back from Hipay
 *   after completing/cancelling the payment transaction, or 'notification',
 *   when the gateway performs an asynchronous Server-to-Server Notificagtion
 *   to verify transaction details/status.
 *
 * @return bool
 *   Boolean indicating whether the feedback was processed successfully.
 *
 * @see commerce_hipay_tpp_callback_notification()
 * @see commerce_hipay_tpp_refresh()
 */
function commerce_hipay_tpp_process_notification($feedback, $callback_type) {
  // Make sure that we have actually received the feedback from the gateway.
  if (empty($feedback) || !is_array($feedback)) {
    watchdog('commerce_hipay_tpp', '@callback_type: Missing or invalid feedback received in notification: !feedback', array(
      '@callback_type' => ucfirst($callback_type),
      '!feedback' => '<pre>' . var_export($feedback, TRUE) . '</pre>',
    ), WATCHDOG_ERROR);
    return FALSE;
  }

  // Before we start with any validation, let's first try to load the payment
  // transaction and add received feedback to its payload, so it would be
  // possible later on to check what has gone wrong.
  if (!$transaction = commerce_hipay_tpp_feedback_get_payment_transaction($feedback)) {
    watchdog('commerce_hipay_tpp', '@callback_type: Unable to load payment transaction from feedback cdata2 (@cdata2). Feedback received: !feedback', array(
      '@callback_type' => ucfirst($callback_type),
      '@cdata2' => $feedback['cdata2'],
      '!feedback' => '<pre>' . var_export($feedback, TRUE) . '</pre>',
    ), WATCHDOG_ERROR);
    return FALSE;
  }

  $operation_transaction = NULL;
  if (!empty($feedback['operation']['id'])) {
    if (!$operation_transaction = commerce_hipay_tpp_feedback_get_operation_payment_transaction($feedback)) {
      watchdog('commerce_hipay_tpp', '@callback_type: Unable to load payment transaction from Operation Reference (@last_operation_id). Feedback received: !feedback', array(
        '@callback_type' => ucfirst($callback_type),
        '@last_operation_id' => $feedback['operation']['id'],
        '!feedback' => '<pre>' . var_export($feedback, TRUE) . '</pre>',
      ), WATCHDOG_ERROR);
      return FALSE;
    }
  }
  // Update main payment transaction payload with received feedback.
  else {
    $transaction->payload[$callback_type . '-' . time()] = $feedback;
    commerce_payment_transaction_save($transaction);
  }

  // Log the Hipay return feedback if response logging is enabled.
  $payment_method = commerce_payment_method_instance_load($transaction->instance_id);
  if (!empty($payment_method['settings']['api_logging']['response'])) {
    watchdog('commerce_hipay_tpp', '@callback_type: !feedback', array(
      '@callback_type' => ucfirst($callback_type),
      '!feedback' => '<pre>' . var_export($feedback, TRUE) . '</pre>',
    ), WATCHDOG_DEBUG);
  }

  // Validate the feedback signature.
  if (!commerce_hipay_tpp_feedback_validate_signature($feedback, $payment_method)) {
    watchdog('commerce_hipay_tpp', '@callback_type: signature hashes do not match.', array(
      '@callback_type' => ucfirst($callback_type),
    ), WATCHDOG_ERROR);
    return FALSE;
  }

  // Try to load the order.
  if (!$order = commerce_hipay_tpp_feedback_get_order($feedback)) {
    watchdog('commerce_hipay_tpp', '@callback_type: Unable to load order from response cdata1 (@cdata1).', array(
      '@callback_type' => ucfirst($callback_type),
      '@cdata1' => $feedback['cdata1'],
    ), WATCHDOG_ERROR);
    return FALSE;
  }

  // Make sure the response redirect key matches the one stored in the order.
  if (!commerce_hipay_tpp_feedback_validate_payment_redirect_key($feedback, $order)) {
    watchdog('commerce_hipay_tpp', '@callback_type: Response redirect key (@response_redirect_key) does not match order @order_id key (@order_redirect_key).', array(
      '@callback_type' => ucfirst($callback_type),
      '@response_redirect_key' => $feedback['cdata3'],
      '@order_id' => $order->order_id,
      '@order_redirect_key' => $order->data['payment_redirect_key'],
    ), WATCHDOG_ERROR);
    return FALSE;
  }

  // Update the payment transaction with notification data.
  // Note that this function is used for processing feedback return both by
  // server-to-server notification as well as transaction refresh call.
  // http://hipay-tpp-gateway-api.readthedocs.org/en/latest/Chap6-ServerToServer.html
  // http://hipay-tpp-gateway-api.readthedocs.org/en/latest/Chap3-RESTAPIResources-requestDetails.html
  // In some cases they return different names for the same parameter (for
  // example server-to-server notification returns 'transaction_reference',
  // while refresh call returns 'transactionReference'), which we must account
  // for here - hence the use of commerce_hipay_hpp_get_feedback_value().
  $transaction->data['authorized_amount'] = commerce_currency_decimal_to_amount(commerce_hipay_tpp_get_feedback_value($feedback, 'authorizedAmount'), $feedback['currency']);
  $transaction->data['captured_amount'] = commerce_currency_decimal_to_amount(commerce_hipay_tpp_get_feedback_value($feedback, 'capturedAmount'), $feedback['currency']);
  $transaction->data['refunded_amount'] = commerce_currency_decimal_to_amount(commerce_hipay_tpp_get_feedback_value($feedback, 'refundedAmount'), $feedback['currency']);

  // If we have a notification for a certain transaction operation
  // let's update that first.
  if ($operation_transaction) {
    switch ($feedback['status']) {
      case COMMERCE_HIPAY_TPP_REMOTE_STATUS_CAPTURED:
        $operation_transaction->status = COMMERCE_HIPAY_TPP_PAYMENT_STATUS_CAPTURED;
        break;

      case COMMERCE_HIPAY_TPP_REMOTE_STATUS_CAPTURE_REFUSED:
        $operation_transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
        break;

      case COMMERCE_HIPAY_TPP_REMOTE_STATUS_REFUNDED:
        $operation_transaction->status = COMMERCE_HIPAY_TPP_PAYMENT_STATUS_REFUNDED;
        break;
    }

    $operation_transaction->remote_status = $feedback['status'];
    $operation_transaction->message = t('@status_message');
    $operation_transaction->message_variables = array(
      '@status_message' => commerce_hipay_tpp_get_payment_status_message($feedback['status']),
    );
    $operation_transaction->payload[$callback_type . '-' . time()] = $feedback;
    commerce_payment_transaction_save($operation_transaction);
  }
  // Otherwise we update the main transaction.
  else {
    $transaction->remote_id = commerce_hipay_tpp_get_feedback_value($feedback, 'transactionReference');

    // We do not want to change the main transaction status from one of 'captured'
    // statuses to one of 'authorized' statuses (which might happen when we start
    // with a 'sale' transaction, and Hipay might send us first notification for
    // 'capture requested', and only after that for 'authorized'.
    if (!(
      in_array($transaction->remote_status, commerce_hipay_tpp_get_remote_statuses_for_operation_type(COMMERCE_HIPAY_TPP_OPERATION_CAPTURE))
      && in_array($feedback['status'], commerce_hipay_tpp_get_remote_statuses_for_operation_type(COMMERCE_HIPAY_TPP_OPERATION_AUTHORIZATION))
    )) {
      $transaction->remote_status = $feedback['status'];
    }
  }

  // We want to update the main transaction status only for the very first call
  // (regardless whether it was authorization or capture), which means only when
  // the main transaction still has its 'pending' status.
  if (
    // Initial status for 'sale' transactions.
    $transaction->status == COMMERCE_PAYMENT_STATUS_PENDING
    // Initial status for 'authorization' transactions.
    || $transaction->status == COMMERCE_HIPAY_TPP_PAYMENT_STATUS_PENDING
  ) {
    switch ($feedback['state']) {
      case 'completed':
        // We use different 'success' status for authorization and sale
        // transactions. Note that it is important to use payment transaction
        // status COMMERCE_PAYMENT_STATUS_SUCCESS for sale transactions, as only
        // then the 'commerce_payment_order_paid_in_full' rule will be invoked
        // (see commerce_payment_commerce_payment_transaction_insert()).
        if (
          $transaction->data['operation'] == COMMERCE_HIPAY_TPP_OPERATION_SALE
          && in_array($feedback['status'], commerce_hipay_tpp_get_remote_success_statuses_for_operation_type(COMMERCE_HIPAY_TPP_OPERATION_CAPTURE))
        ) {
          $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        }
        elseif (
          $transaction->data['operation'] == COMMERCE_HIPAY_TPP_OPERATION_AUTHORIZATION
          && in_array($feedback['status'], commerce_hipay_tpp_get_remote_success_statuses_for_operation_type(COMMERCE_HIPAY_TPP_OPERATION_AUTHORIZATION))
        ) {
          $transaction->status = COMMERCE_HIPAY_TPP_PAYMENT_STATUS_AUTHORIZED;
        }
        break;

      case 'declined':
      case 'error':
      default:
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
        break;
    }
  }

  // Let's put status message in transaction's message_variables parameter,
  // as this way it will be easier to update it later on transaction refresh.
  $transaction->message = t('Last operation: @status_message');
  $transaction->message_variables = array(
    '@status_message' => commerce_hipay_tpp_get_payment_status_message($feedback['status']),
  );

  if (!empty($feedback['reason']['code'])) {
    $message = commerce_hipay_tpp_get_error_message($feedback['reason']['code']);
    $transaction->message .= '<br />' . t('Error @error_code: @error_message');
    $transaction->message_variables['@error_code'] = $feedback['reason']['code'];
    $transaction->message_variables['@error_message'] = (!empty($message)) ? $message : $feedback['reason']['message'];
  }

  // CVC result.
  if (($cvc_result = commerce_hipay_tpp_get_feedback_value($feedback, 'cvcResult')) !== NULL) {
    $transaction->message .= '<br />' . t('CVC: @cvc_message');
    $transaction->message_variables['@cvc_message'] = commerce_hipay_tpp_get_cvc_result_message($cvc_result);
  }

  // AVS result.
  if (($avs_result = commerce_hipay_tpp_get_feedback_value($feedback, 'avsResult')) !== NULL) {
    $transaction->message .= '<br />' . t('AVS: @avs_message');
    $transaction->message_variables['@avs_message'] = commerce_hipay_tpp_get_avs_result_message($avs_result);
  }

  // 3-D Secure result.
  if ($three_d_secure = commerce_hipay_tpp_get_feedback_value($feedback, 'threeDSecure')) {
    $transaction->message .= '<br />' . t('3DS: @3ds_message');
    if ($authentication_message = commerce_hipay_tpp_get_feedback_value($three_d_secure, 'authenticationMessage')) {
      $transaction->message_variables['@3ds_message'] = $authentication_message;
    }
    else {
      $transaction->message_variables['@3ds_message'] = commerce_hipay_tpp_get_feedback_value($three_d_secure, 'enrollmentMessage');
    }
  }

  // Fraud screening result.
  if ($fraud_screening = commerce_hipay_tpp_get_feedback_value($feedback, 'fraudScreening')) {
    $message = array(t('Fraud screening'));
    if (!empty($fraud_screening['scoring'])) {
      $message[] = t('score @fraud_score');
      $transaction->message_variables['@fraud_score'] = $fraud_screening['scoring'];
    }
    if (!empty($fraud_screening['result'])) {
      $message[] = t('@fraud_result');
      $transaction->message_variables['@fraud_result'] = $fraud_screening['result'];
    }
    if (!empty($fraud_screening['review'])) {
      $message[] = t('@fraud_review');
      $transaction->message_variables['@fraud_review'] = $fraud_screening['review'];
    }
    $transaction->message .= '<br />' . implode(': ', $message);
  }

  // Authorized amount.
  if (($authorized_amount = commerce_hipay_tpp_get_feedback_value($feedback, 'authorizedAmount')) != 0) {
    $transaction->message .= '<br />' . t('Authorized amount: @authorized_amount');
    $transaction->message_variables['@authorized_amount'] = commerce_currency_format(commerce_currency_decimal_to_amount($authorized_amount, $transaction->currency_code), $transaction->currency_code);
  }

  // Captured amount.
  if (($captured_amount = commerce_hipay_tpp_get_feedback_value($feedback, 'capturedAmount')) != 0) {
    $transaction->message .= '<br />' . t('Total captured amount: @captured_amount');
    $transaction->message_variables['@captured_amount'] = commerce_currency_format(commerce_currency_decimal_to_amount($captured_amount, $transaction->currency_code), $transaction->currency_code);
  }

  // Refunded amount.
  if (($refunded_amount = commerce_hipay_tpp_get_feedback_value($feedback, 'refundedAmount')) != 0) {
    $transaction->message .= '<br />' . t('Total refunded amount: @refunded_amount');
    $transaction->message_variables['@refunded_amount'] = commerce_currency_format(commerce_currency_decimal_to_amount($refunded_amount, $transaction->currency_code), $transaction->currency_code);
  }

  commerce_payment_transaction_save($transaction);

  // Try to save new Card on File.
  if (!empty($order->data['commerce_hipay_tpp']['cardonfile_store'])) {
    commerce_hipay_tpp_cardonfile_save($feedback, $order, $payment_method);
  }

  return TRUE;
}

/**
 * Captures an amount on existing authorization transaction.
 *
 * @param object $transaction
 *   An authorization transaction to be captured.
 * @param int $amount
 *   An amount to be captured.
 *
 * @return object
 *   A capture transaction.
 */
function commerce_hipay_tpp_api_capture($transaction, $amount) {
  $order = commerce_order_load($transaction->order_id);
  $payment_method = commerce_payment_method_instance_load($transaction->instance_id);

  // Create new transaction for capture.
  $capture_transaction = commerce_payment_transaction_new($payment_method['method_id'], $transaction->order_id);
  $capture_transaction->instance_id = $payment_method['instance_id'];
  $capture_transaction->amount = commerce_currency_decimal_to_amount($amount, $transaction->currency_code);
  $capture_transaction->currency_code = $transaction->currency_code;
  $capture_transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  $capture_transaction->message = t('Capture transaction initialized.');
  $capture_transaction->data['reference_transaction_id'] = $transaction->transaction_id;
  $capture_transaction->data['operation'] = COMMERCE_HIPAY_TPP_OPERATION_CAPTURE;
  $capture_transaction->remote_id = $transaction->remote_id;
  commerce_payment_transaction_save($capture_transaction);

  // Prepare the request data.
  // See http://hipay-tpp-gateway-api.readthedocs.org/en/latest/Chap3-RESTAPIResources-maintenanceOperations.html
  $request_data = array(
    'operation' => COMMERCE_HIPAY_TPP_OPERATION_CAPTURE,
    'amount' => $amount,
    'operation_id' => $capture_transaction->transaction_id,
  );

  // Allow other modules to alter the $request_data array.
  drupal_alter('commerce_hipay_tpp_api_capture', $request_data, $order, $payment_method);

  // Add request data to the transaction's payload.
  $capture_transaction->payload['request-' . time()] = $request_data;
  commerce_payment_transaction_save($capture_transaction);

  // Perform the call to Hipay TPP API.
  $url = commerce_hipay_tpp_get_server_url($payment_method) . COMMERCE_HIPAY_TPP_RESOURCE_MAINTAINANCE . $transaction->remote_id;
  $response = commerce_hipay_tpp_api_request($url, $request_data, $payment_method);

  // Update payment transaction with response details.
  $capture_transaction->payload['response-' . time()] = $response;
  commerce_payment_transaction_save($capture_transaction);

  commerce_hipay_tpp_process_response($response, $capture_transaction, COMMERCE_HIPAY_TPP_OPERATION_CAPTURE);

  return $capture_transaction;
}

/**
 * Refunds an amount on existing transaction.
 *
 * @param object $capture_transaction
 *   The capture transaction
 * @param int $amount
 *   An amount to be refunded.
 *
 * @return object
 *   A Refund transaction.
 */
function commerce_hipay_tpp_api_refund($capture_transaction, $amount) {
  $order = commerce_order_load($capture_transaction->order_id);
  $payment_method = commerce_payment_method_instance_load($capture_transaction->instance_id);

  // Create new transaction for refund.
  $refund_transaction = commerce_payment_transaction_new($payment_method['method_id'], $capture_transaction->order_id);
  $refund_transaction->instance_id = $payment_method['instance_id'];
  $refund_transaction->amount = -commerce_currency_decimal_to_amount($amount, $capture_transaction->currency_code);
  $refund_transaction->currency_code = $capture_transaction->currency_code;
  $refund_transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
  $refund_transaction->message = t('Refund transaction initialized.');
  $refund_transaction->data['reference_transaction_id'] = $capture_transaction->transaction_id;
  $refund_transaction->data['operation'] = COMMERCE_HIPAY_TPP_OPERATION_REFUND;
  $refund_transaction->remote_id = $capture_transaction->remote_id;

  commerce_payment_transaction_save($refund_transaction);

  // Prepare the request data.
  // See http://hipay-tpp-gateway-api.readthedocs.org/en/latest/Chap3-RESTAPIResources-maintenanceOperations.html
  $request_data = array(
    'operation' => COMMERCE_HIPAY_TPP_OPERATION_REFUND,
    'amount' => $amount,
    'operation_id' => $refund_transaction->transaction_id,
  );

  // Allow other modules to alter the $request_data array.
  drupal_alter('commerce_hipay_tpp_api_refund', $request_data, $order, $payment_method);

  // Add request data to the transaction's payload.
  $refund_transaction->payload['request-' . time()] = $request_data;
  commerce_payment_transaction_save($refund_transaction);

  // Perform the call to Hipay TPP API.
  $url = commerce_hipay_tpp_get_server_url($payment_method) . COMMERCE_HIPAY_TPP_RESOURCE_MAINTAINANCE . $capture_transaction->remote_id;
  $response = commerce_hipay_tpp_api_request($url, $request_data, $payment_method);

  // Update refund transaction with response details.
  $refund_transaction->payload['response-' . time()] = $response;
  commerce_payment_transaction_save($refund_transaction);

  commerce_hipay_tpp_process_response($response, $refund_transaction, 'refund');

  return $refund_transaction;
}

/**
 * Cancels an existing transaction.
 *
 * @param object $transaction
 *   An transaction to cancel.
 */
function commerce_hipay_tpp_api_cancel($transaction) {
  $order = commerce_order_load($transaction->order_id);
  $payment_method = commerce_payment_method_instance_load($transaction->instance_id);

  // Prepare the request data.
  // See http://hipay-tpp-gateway-api.readthedocs.org/en/latest/Chap3-RESTAPIResources-maintenanceOperations.html
  $request_data = array(
    'operation' => COMMERCE_HIPAY_TPP_OPERATION_CANCEL,
  );

  // Allow other modules to alter the $request_data array.
  drupal_alter('commerce_hipay_tpp_api_cancel', $request_data, $order, $payment_method);

  $transaction->payload['cancel-request-' . time()] = $request_data;
  commerce_payment_transaction_save($transaction);

  // Perform the call to Hipay TPP API.
  $url = commerce_hipay_tpp_get_server_url($payment_method) . COMMERCE_HIPAY_TPP_RESOURCE_MAINTAINANCE . $transaction->remote_id;
  $response = commerce_hipay_tpp_api_request($url, $request_data, $payment_method);

  // Update payment transaction with response details.
  $transaction->payload['cancel-response-' . time()] = $response;

  commerce_payment_transaction_save($transaction);

  if (!isset($response['code'])) {
    drupal_set_message(t('Cancel request has been sent to the payment gateway, now waiting for the server-to-server notification to update the transaction details. Refresh this page in a moment to see updated transaction details.'));
  }
  else {
    drupal_set_message(t('There has been an error requesting the Cancel: @error_code: @error_message: @error_description', array(
      '@error_code' => $response['code'],
      '@error_message' => $response['message'],
      '@error_description' => $response['description'],
    )), 'error');
  }
}

/**
 * Returns parameters returned by Hipay TPP API.
 *
 * @return array
 *   An associative array containing the Hipay feedback taken from the $_GET
 *   and $_POST superglobals, excluding 'q'.
 */
function commerce_hipay_tpp_get_feedback() {
  $feedback = array_replace_recursive($_GET, $_POST);
  unset($feedback['q']);
  return $feedback;
}

/**
 * Returns value of the requested feedback parameter.
 *
 * Parameter names should be provided in camel-case, and if its value will not
 * be found, they will be converted to under_score notation and searched for
 * again.
 *
 * For example when providing parameter name as 'threeDSecure', if not found
 * it will be converted to 'three_d_secure' and search again in the feedback
 * array.
 *
 * @param array $feedback
 *   An associative array containing the Hipay API call feedback.
 * @param string $parameter_name
 *   A feedback parameter name to return the value of, in camel-case format.
 *
 * @return string|null
 *   A value of the requested parameter, or NULL if it doesn't exist.
 *
 * @see commerce_hipay_tpp_process_notification
 */
function commerce_hipay_tpp_get_feedback_value($feedback, $parameter_name, $default_value = NULL) {
  if (isset($feedback[$parameter_name])) {
    return $feedback[$parameter_name];
  }
  else {
    $parameter_name = strtolower(preg_replace('/([A-Z])/', '_$1', $parameter_name));
    return (isset($feedback[$parameter_name])) ? $feedback[$parameter_name] : $default_value;
  }
}

/**
 * Verifies the call signature hash.
 *
 * @param array $parameters
 *   An array of parameters received from the gateway.
 * @param string $secret_passphrase
 *   Payment method instance secret passphrase used to generate the hash.
 *
 * @return bool
 *   A boolean indicating whether the signature verification succeeded or not.
 *
 * @see http://hipay-tpp-gateway-api.readthedocs.org/en/latest/Chap7-Signatureverif.html#example
 */
function commerce_hipay_tpp_validate_signature($parameters, $payment_method) {
  $string_to_hash = $hipay_signature = '';

  // If it is a redirection.
  if (isset($parameters['hash'])) {
    $hipay_signature = $parameters['hash'];
    unset($parameters['hash']);
    ksort($parameters);
    foreach ($parameters as $name => $value) {
      if (strlen($value) > 0) {
        $string_to_hash .= $name . $value . $payment_method['settings']['secret_passphrase'];
      }
    }
  }
  // If it is a server-to-server notification.
  elseif (isset($_SERVER['HTTP_X_ALLOPASS_SIGNATURE'])) {
    $hipay_signature = $_SERVER['HTTP_X_ALLOPASS_SIGNATURE'];
    $string_to_hash = file_get_contents("php://input") . $payment_method['settings']['secret_passphrase'];
  }

  $local_signature = sha1($string_to_hash);

  return ($local_signature === $hipay_signature) ? TRUE : FALSE;
}

/**
 * Returns an iframe embedding Hipay hosted payment page.
 *
 * @param array $response
 *   The Hipay initialization call response object.
 * @param array $payment_method
 *   The payment method instance used to generate the redirect link for the order.
 * @param object $order
 *   The order object the hosted checkout is for.
 *
 * @return
 *   The iframe HTML to use to embed Hipay's hosted payment page on-site.
 */
function commerce_hipay_tpp_get_iframe($response, $payment_method, $order) {
  return '<iframe class="commerce_hipay_tpp_iframe" src="' . $response['forwardUrl'] . '" scrolling="no" frameborder="0" width="600px" height="500px"></iframe>';
}

/**
 * Returns both prod and test Hipay TPP API endpoints.
 *
 * @return array
 *   An array of Hipay TPP API endpoints.
 */
function commerce_hipay_tpp_get_endpoints() {
  return array(
    COMMERCE_HIPAY_TPP_TEST => COMMERCE_HIPAY_TPP_ENDPOINT_TEST,
    COMMERCE_HIPAY_TPP_PRODUCTION => COMMERCE_HIPAY_TPP_ENDPOINT_PRODUCTION,
  );
}

/**
 * Returns the URL of Hipay TPP API for the specified environment.
 *
 * @param string $environment
 *   A string specifying which environment to return the Hipay TPP API URL for.
 *
 * @return string|null
 *   The URL of Hipay TPP API for the specified environment.
 */
function commerce_hipay_tpp_get_endpoint($environment) {
  $endpoints = commerce_hipay_tpp_get_endpoints();
  return (!empty($endpoints[$environment])) ? $endpoints[$environment] : NULL;
}

/**
 * Returns full URL of Hipay TPP API endpoint.
 *
 * @param array $payment_method
 *   Payment method definition array.
 *
 * @return string
 *   The full URL of Hipay TPP API endpoint
 */
function commerce_hipay_tpp_get_server_url($payment_method) {
  switch ($payment_method['settings']['endpoint']) {
    case COMMERCE_HIPAY_TPP_PRODUCTION:
      return COMMERCE_HIPAY_TPP_ENDPOINT_PRODUCTION;
    case COMMERCE_HIPAY_TPP_TEST:
      return COMMERCE_HIPAY_TPP_ENDPOINT_TEST;
  }
}

/**
 * Returns full URL of Hipay TPP API endpoint.
 *
 * @param array $payment_method
 *   Payment method definition array.
 *
 * @return string
 *   The full URL of Hipay TPP API endpoint
 */
function commerce_hipay_tpp_get_secure_vault_url($payment_method) {
  switch ($payment_method['settings']['endpoint']) {
    case COMMERCE_HIPAY_TPP_PRODUCTION:
      return COMMERCE_HIPAY_TPP_SECURE_VAULT_ENDPOINT_PRODUCTION;
    case COMMERCE_HIPAY_TPP_TEST:
      return COMMERCE_HIPAY_TPP_SECURE_VAULT_ENDPOINT_TEST;
  }
}

/**
 * Returns current user's language string formatted for API request.
 *
 * @param array $payment_method
 *   Payment method definition array.
 *
 * @return string
 *   Current user's language string formatted for API request.
 */
function commerce_hipay_tpp_get_request_language($payment_method) {
  global $language;

  $locale_elements = explode('-', $language->prefix);
  if (isset($locale_elements[1])) {
    $request_language = $locale_elements[0] . '_' . drupal_strtoupper($locale_elements[1]);
  }
  else {
    $request_language = $locale_elements[0] . '_' . drupal_strtoupper($locale_elements[0]);
  }

  if (!in_array($request_language, array_keys(commerce_hipay_get_supported_languages()))) {
    $request_language = $payment_method['settings']['language'];
  }

  return $request_language;
}

/**
 * Returns an array of order total amount elements.
 *
 * @param object $order
 *   The order object the hosted checkout is for.
 *
 * @return array
 *   An array of order total amount elements.
 */
function commerce_hipay_tpp_get_order_amounts_by_type($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  $amounts = array();
  foreach ($order_wrapper->commerce_line_items as $line_item_wrapper) {
    $type = $line_item_wrapper->type->value();

    if (!isset($amounts[$type])) {
      $amounts[$type] = 0;
    }

    $price = $line_item_wrapper->commerce_unit_price->value();
    $amounts[$type] += $price['amount'];

    // Tax needs to be taken from each price components.
    if (module_exists('commerce_tax')) {
      if (!isset($amounts['tax'])) {
        $amounts['tax'] = 0;
      }

      $tax_components = commerce_tax_components($price['data']['components']);
      $amounts['tax'] += commerce_tax_total_amount($tax_components, TRUE, $price['currency_code']);
    }
  }

  return $amounts;
}

/**
 * Loads Hipay TPP payment transactions for specified order.
 *
 * @param object $order
 *   An order object.
 * @param array $conditions
 *   An array of conditions on the {commerce_payment_transaction} table in the
 *   form 'field' => $value.
 *
 * @return array
 *   An array of transaction objects indexed by transaction_id.
 */
function commerce_hipay_tpp_get_order_transactions($order, $conditions = array()) {
  $conditions += array(
    'order_id' => $order->order_id,
    'payment_method' => array_keys(commerce_hipay_tpp_commerce_payment_method_info()),
  );
  return commerce_payment_transaction_load_multiple(array(), $conditions);
}

/**
 * Returns an array of order payment transactions keyed by operation type.
 *
 * @param object $order
 *   An order object.
 * @param array $conditions
 *   An array of conditions on the {commerce_payment_transaction} table in the
 *   form 'field' => $value.
 *
 * @return array
 *   An array of order payment transactions keyed by operation type.
 */
function commerce_hipay_tpp_get_order_transactions_by_operation($order, $conditions = array()) {
  $transactions = commerce_hipay_tpp_get_order_transactions($order, $conditions);
  $transactions_by_operation = array();

  foreach ($transactions as $transaction) {
    $operation = $transaction->data['operation'];
    $transactions_by_operation[$operation][] = $transaction;
  }

  return $transactions_by_operation;
}

/**
 * Returns an array of total amounts for each transaction type.
 *
 * @param object $order
 *   An order for which to calculate total amounts.
 * @param array $conditions
 *   Additional conditions to filter payment transaction for totals calculation.
 *
 * @return array
 *   An array of total amounts for each transaction type.
 */
function commerce_hipay_tpp_get_order_operation_totals($order, $conditions = NULL) {
  $totals = array();

  // By default, if no specific conditions were requested in the function param,
  // let's return only successful transactions (including pending, which is used
  // for Capture Requested and Refund Requested remote statuses).
  if (!isset($conditions)) {
    $conditions = array(
      'status' => array(
        COMMERCE_PAYMENT_STATUS_PENDING,
        COMMERCE_PAYMENT_STATUS_SUCCESS,
        COMMERCE_HIPAY_TPP_PAYMENT_STATUS_AUTHORIZED,
        COMMERCE_HIPAY_TPP_PAYMENT_STATUS_CAPTURED,
        COMMERCE_HIPAY_TPP_PAYMENT_STATUS_REFUNDED,
      ),
    );
  }

  $transactions = commerce_hipay_tpp_get_order_transactions_by_operation($order, $conditions);
  foreach ($transactions as $operation => $operation_transactions) {
    $totals[$operation] = 0;
    foreach ($operation_transactions as $transaction) {
      // Ignore authorization transactions that hasn't been executed.
      if ($transaction->status != 'pending' || !empty($transaction->remote_status)) {
        $totals[$operation] += $transaction->amount;
      }
    }
  }
  return $totals;
}

/**
 * Returns a total amount of all 'sale' and 'capture' transactions.
 *
 * @param array $totals
 *   And array of total amounts calculated for each transaction type.
 *
 * @return int
 *   Total amount of all sale/capture transactions.
 */
function commerce_hipay_tpp_get_order_total_captured($totals) {
  $total_captured = 0;

  $capture_operations = array(
    COMMERCE_HIPAY_TPP_OPERATION_SALE,
    COMMERCE_HIPAY_TPP_OPERATION_CAPTURE,
  );

  foreach ($capture_operations as $capture_operation) {
    if (!empty($totals[$capture_operation])) {
      $total_captured += $totals[$capture_operation];
    }
  }

  return $total_captured;
}

/**
 * Returns an array of remote payment statuses keyed by operation type.
 *
 * @return array
 *   An array of managed remote payment statuses keyed by operation type.
 */
function commerce_hipay_tpp_get_remote_statuses_by_operation_type() {
  return array(
    COMMERCE_HIPAY_TPP_OPERATION_AUTHORIZATION => array(
      COMMERCE_HIPAY_TPP_REMOTE_STATUS_AUTHORIZED,
    ),
    COMMERCE_HIPAY_TPP_OPERATION_CAPTURE => array(
      COMMERCE_HIPAY_TPP_REMOTE_STATUS_CAPTURE_REQUESTED,
      COMMERCE_HIPAY_TPP_REMOTE_STATUS_CAPTURED,
      COMMERCE_HIPAY_TPP_REMOTE_STATUS_PARTIALLY_CAPTURED,
    ),
    COMMERCE_HIPAY_TPP_OPERATION_REFUND => array(
      COMMERCE_HIPAY_TPP_REMOTE_STATUS_REFUND_REQUESTED,
      COMMERCE_HIPAY_TPP_REMOTE_STATUS_REFUNDED,
      COMMERCE_HIPAY_TPP_REMOTE_STATUS_PARTIALLY_REFUNDED,
    ),
  );
}

/**
 * Returns an array of remote payment statuses for a specific operation type.
 *
 * @param string $operation_type
 *   An operation type to return remote payment statuses for.
 *
 * @return mixed
 *   An array of remote payment statuses for a specific operation type.
 */
function commerce_hipay_tpp_get_remote_statuses_for_operation_type($operation_type) {
  $remote_statuses_by_type = commerce_hipay_tpp_get_remote_statuses_by_operation_type();
  return $remote_statuses_by_type[$operation_type];
}

/**
 * Returns an array of remote payment success statuses keyed by operation type.
 *
 * @return array
 *   An array of remote payment success statuses keyed by operation type.
 */
function commerce_hipay_tpp_get_remote_success_statuses_by_operation_type() {
  return array(
    COMMERCE_HIPAY_TPP_OPERATION_AUTHORIZATION => array(
      COMMERCE_HIPAY_TPP_REMOTE_STATUS_AUTHORIZED,
    ),
    COMMERCE_HIPAY_TPP_OPERATION_CAPTURE => array(
      COMMERCE_HIPAY_TPP_REMOTE_STATUS_CAPTURED,
    ),
    COMMERCE_HIPAY_TPP_OPERATION_REFUND => array(
      COMMERCE_HIPAY_TPP_REMOTE_STATUS_REFUNDED,
    ),
  );
}

/**
 * Returns an array of remote payment statuses for a specific operation type.
 *
 * @param string $operation_type
 *   An operation type to return remote payment statuses for.
 *
 * @return mixed
 *   An array of remote payment statuses for a specific operation type.
 */
function commerce_hipay_tpp_get_remote_success_statuses_for_operation_type($operation_type) {
  $remote_statuses_by_type = commerce_hipay_tpp_get_remote_success_statuses_by_operation_type();
  return isset($remote_statuses_by_type[$operation_type]) ? $remote_statuses_by_type[$operation_type] : array();
}

/**
 * Returns local success payment status for a specific operation type.
 *
 * @param string $operation_type
 *   An operation type to return the local success payment status for.
 *
 * @return string
 *   A local success payment status for a specific operation type.
 */
function commerce_hipay_tpp_get_remote_success_status_for_operation_type($operation_type) {
  switch ($operation_type) {
    case COMMERCE_HIPAY_TPP_OPERATION_AUTHORIZATION:
      return COMMERCE_HIPAY_TPP_PAYMENT_STATUS_AUTHORIZED;
    case COMMERCE_HIPAY_TPP_OPERATION_CAPTURE:
      return COMMERCE_HIPAY_TPP_PAYMENT_STATUS_CAPTURED;
    case COMMERCE_HIPAY_TPP_OPERATION_REFUND:
      return COMMERCE_HIPAY_TPP_PAYMENT_STATUS_REFUNDED;
  }
}
