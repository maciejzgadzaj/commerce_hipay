<?php

function commerce_hipay_ws_user_account_menu() {
  $items = array();

  $items['admin/commerce/hipay-wallet/user-accounts/add'] = array(
    'title' => 'Add a user account',
    'page callback' => 'commerce_hipay_ws_user_account_add',
    'page arguments' => array('hipay_user_account'),
    'access arguments' => array('create commerce_hipay_ws_user_account entities'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/entities/commerce_hipay_ws.entity_ui.user_account.inc',
  );

  $items['admin/commerce/hipay-wallet/user-accounts/%commerce_hipay_ws_user_account'] = array(
    'title callback' => 'commerce_hipay_ws_user_account_title',
    'title arguments' => array(4),
    'page callback' => 'commerce_hipay_ws_user_account_view',
    'page arguments' => array(4),
    'access arguments' => array('view any commerce_hipay_ws_user_account entity'),
    'file' => 'includes/entities/commerce_hipay_ws.entity_ui.user_account.inc',
  );

  $items['admin/commerce/hipay-wallet/user-accounts/%commerce_hipay_ws_user_account/view'] = array(
    'title' => 'view',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/entities/commerce_hipay_ws.entity_ui.user_account.inc',
  );

  $items['admin/commerce/hipay-wallet/user-accounts/%commerce_hipay_ws_user_account/view/entity'] = array(
    'title' => 'local',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/entities/commerce_hipay_ws.entity_ui.user_account.inc',
  );

  $items['admin/commerce/hipay-wallet/user-accounts/%commerce_hipay_ws_user_account/view/hipay'] = array(
    'title' => 'Hipay Wallet',
    'page callback' => 'commerce_hipay_ws_user_account_view_hipay_info',
    'page arguments' => array(4),
    'access arguments' => array('view any commerce_hipay_ws_user_account entity'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -5,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/entities/commerce_hipay_ws.entity_ui.user_account.inc',
  );

  $items['admin/commerce/hipay-wallet/user-accounts/%commerce_hipay_ws_user_account/edit'] = array(
    'title' => 'edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_hipay_ws_user_account_form', 4),
    'access arguments' => array('edit any commerce_hipay_ws_user_account entity'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/entities/commerce_hipay_ws.entity_ui.user_account.inc',
  );

  $items['admin/commerce/hipay-wallet/user-accounts/%commerce_hipay_ws_user_account/delete'] = array(
    'title' => 'delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_hipay_ws_user_account_delete_form', 4, 'account'),
    'access arguments' => array('delete any commerce_hipay_ws_user_account entity'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/entities/commerce_hipay_ws.entity_ui.user_account.inc',
  );

  // For Hipay user sub-account we use the same page callbacks, in some cases
  // just providing additional parameter saying that we are dealing with
  // a user sub-account.
  $items['admin/commerce/hipay-wallet/user-subaccounts/add'] = array(
    'title' => 'Add a user sub-account',
    'page callback' => 'commerce_hipay_ws_user_account_add',
    'page arguments' => array('hipay_user_subaccount'),
    'access arguments' => array('create commerce_hipay_ws_user_account entities'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'includes/entities/commerce_hipay_ws.entity_ui.user_account.inc',
  );

  $items['admin/commerce/hipay-wallet/user-subaccounts/%commerce_hipay_ws_user_account'] = array(
    'title callback' => 'commerce_hipay_ws_user_account_title',
    'title arguments' => array(4),
    'page callback' => 'commerce_hipay_ws_user_account_view',
    'page arguments' => array(4),
    'access arguments' => array('view any commerce_hipay_ws_user_account entity'),
    'file' => 'includes/entities/commerce_hipay_ws.entity_ui.user_account.inc',
  );

  $items['admin/commerce/hipay-wallet/user-subaccounts/%commerce_hipay_ws_user_account/view'] = array(
    'title' => 'view',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/entities/commerce_hipay_ws.entity_ui.user_account.inc',
  );

  $items['admin/commerce/hipay-wallet/user-subaccounts/%commerce_hipay_ws_user_account/edit'] = array(
    'title' => 'edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_hipay_ws_user_account_form', 4),
    'access arguments' => array('edit any commerce_hipay_ws_user_account entity'),
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/entities/commerce_hipay_ws.entity_ui.user_account.inc',
  );

  $items['admin/commerce/hipay-wallet/user-subaccounts/%commerce_hipay_ws_user_account/delete'] = array(
    'title' => 'delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_hipay_ws_user_account_delete_form', 4, 'sub-account'),
    'access arguments' => array('delete any commerce_hipay_ws_user_account entity'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/entities/commerce_hipay_ws.entity_ui.user_account.inc',
  );

  return $items;
}

/**
 * Menu callback: displays entity information.
 *
 * @param object $entity
 *   An entity to render.
 * @param string $view_mode
 *   A view mode as used by this entity type, e.g. 'full', 'teaser'...
 *
 * @return
 *   The renderable array, keyed by the entity type and by entity identifiers,
 *   for which the entity name is used if existing - see entity_id(). If there
 *   is no information on how to view an entity, FALSE is returned.
 *
 * @see commerce_hipay_ws_user_account_menu()
 */
function commerce_hipay_ws_user_account_view($entity, $view_mode = 'full') {
  return entity_view('commerce_hipay_ws_user_account', array($entity->user_account_id => $entity), $view_mode, NULL, TRUE);
}

/**
 * Menu callback: fetches and displays Hipay User Account information.
 *
 * @param object $entity
 *   An entity to render.
 * @param string $view_mode
 *   A view mode as used by this entity type, e.g. 'full', 'teaser'...
 *
 * @return mixed
 *   A renderable array, or a rendered HTML.
 *
 * @see commerce_hipay_ws_user_account_menu()
 */
function commerce_hipay_ws_user_account_view_hipay_info($entity, $view_mode = 'full') {
  $return = array(
    'hipay_user_account_title' => array(
      '#markup' => '<h2>' . t('Hipay user account') . '</h2>',
    ),
  );

  if (!empty($entity->hipay_account_id)) {
    $output = '';

    // Fetch: getAccountInfos.
    $parameters = array('accountId' => $entity->hipay_account_id);
    $context = array('commerce_hipay_ws_user_account' => $entity);
    $response = commerce_hipay_ws_api_request(COMMERCE_HIPAY_WS_RESOURCE_SOAP_GET_ACCOUNT_INFOS, $parameters, NULL, $context);
    if (isset($response['code']) && $response['code'] === COMMERCE_HIPAY_WS_STATUS_SUCCESS) {

      // Display: getAccountInfos.
      $output .= '<h3>' . t('getAccountInfos') . '</h3>';
      $exclude = array('code', 'description', 'websites', 'subAccounts');
      $header = $row = array();
      foreach (array_diff_key($response, array_flip($exclude)) as $key => $value) {
        $header[$key] = check_plain($key);
        $row[$key] = check_plain($value);
      }
      $output .= theme('table', array(
        'header' => $header,
        'rows' => array($row)
      ));

      // Display: getAccountInfos: websites.
      if (!empty($response['websites'])) {
        $output .= '<h3>' . t('getAccountInfos: websites') . '</h3>';
        $header = $rows = array();
        foreach ($response['websites'] as $item) {
          $row = array();
          foreach ($item as $key => $value) {
            $header[$key] = check_plain($key);
            $row[$key] = check_plain($value);
          }
          $rows[] = $row;
        }
        $output .= theme('table', array(
          'header' => $header,
          'rows' => array($row)
        ));
      }

      // @TODO: Display: getAccountInfos: subAccounts.
      if (!empty($response['subAccounts'])) {
        $output .= '<h3>' . t('getAccountInfos: subAccounts') . '</h3>';
      }
    }

    // Fetch: getBalance.
    $parameters = array('wsSubAccountId' => $entity->hipay_account_id);
    $context = array('commerce_hipay_ws_user_account' => $entity);
    $response = commerce_hipay_ws_api_request(COMMERCE_HIPAY_WS_RESOURCE_SOAP_GET_BALANCE, $parameters, NULL, $context);

    // Display: getBalance.
    if (!empty($response['balances'])) {
      $output .= '<h3>' . t('getBalance') . '</h3>';
      $header = $rows = array();
      foreach ($response['balances'] as $item) {
        $row = array();
        foreach ($item as $key => $value) {
          $header[$key] = check_plain($key);
          $row[$key] = check_plain($value);
        }
        $rows[] = $row;
      }
      $output .= theme('table', array('header' => $header, 'rows' => array($row)));
    }

    // Fetch: getTransactions.
    $parameters = array(
      'wsSubAccountId' => $entity->hipay_account_id,
      'startDate' => date('Y-m-d H:i:s', $entity->created),
      'endDate' => date('Y-m-d H:i:s', REQUEST_TIME),
      'pageNumber' => 1,
    );
    $context = array('commerce_hipay_ws_user_account' => $entity);
    $response = commerce_hipay_ws_api_request(COMMERCE_HIPAY_WS_RESOURCE_SOAP_GET_TRANSACTIONS, $parameters, NULL, $context);

    // @TODO: Display: getTransactions.
    if (!empty($response['transactions'])) {
      $output .= '<h3>' . t('getTransactions') . '</h3>';
    }

    $return['hipay_user_account'] = array(
      '#markup' => $output,
    );
  }
  else {
    $return['hipay_user_account'] = drupal_get_form('commerce_hipay_ws_user_account_view_hipay_create_form', $entity);
  }

  // KYC documents.
  $wrapper = entity_metadata_wrapper('commerce_hipay_ws_user_account', $entity);
  $kyc_documents = $wrapper->hipay_ws_user_kyc_documents->value();

  if (!empty($kyc_documents)) {
    $return['kyc_documents_title'] = array(
      '#markup' => '<h2>' . t('KYC documents') . '</h2>',
    );

    $return['kyc_documents'] = array(
      '#theme' => 'kyc_documents_table',
      '#items' => $kyc_documents,
    );

    // Check if all KYC documents were uploaded to Hipay Wallet,
    // and display an upload form if there is still something left.
    $all_documents_uploaded = TRUE;
    foreach ($kyc_documents as $kyc_document) {
      if (empty($kyc_document['kyc_uploaded'])) {
        $all_documents_uploaded = FALSE;
      }
    }
    if (!$all_documents_uploaded) {
      $return['kyc_documents_upload'] = drupal_get_form('commerce_hipay_ws_user_account_view_hipay_kyc_upload_form', $entity);
    }
  }

  return $return;
}

/**
 * Returns a form to create a user account in Hipay Wallet.
 *
 * @see commerce_hipay_ws_user_account_view_hipay_info()
 * @see commerce_hipay_ws_user_account_view_hipay_create_form_submit()
 */
function commerce_hipay_ws_user_account_view_hipay_create_form($form, &$form_state, $entity) {
  $form_state['commerce_hipay_ws_user_account'] = $entity;

  $form['info'] = array(
    '#markup' => '<p>' . t('The user account has not yet been created for this entity in Hipay Wallet.') . '</p>',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create user account in Hipay Wallet'),
  );

  return $form;
}

/**
 * Form submit handler: creates a user account in Hipay Wallet.
 *
 * @see commerce_hipay_ws_user_account_view_hipay_create_form()
 */
function commerce_hipay_ws_user_account_view_hipay_create_form_submit($form, $form_state) {
  $user_account = $form_state['commerce_hipay_ws_user_account'];

  $response = commerce_hipay_ws_api_user_account_create($user_account);

  if (!isset($response['code']) || $response['code'] !== COMMERCE_HIPAY_WS_STATUS_SUCCESS) {
    drupal_set_message(t('Error creating a new user account in Hipay Wallet: @error.', array('@error' => $response['description'])), 'error');
  }
}

/**
 * Returns a form to upload KYC documents if not uploaded yet.
 *
 * @see commerce_hipay_ws_user_account_view_hipay_info()
 * @see commerce_hipay_ws_user_account_view_hipay_kyc_upload_form_submit()
 */
function commerce_hipay_ws_user_account_view_hipay_kyc_upload_form($form, &$form_state, $entity) {
  $form_state['commerce_hipay_ws_user_account'] = $entity;

  $form['info'] = array(
    '#markup' => '<p>' . t('Not all KYC documents have been uploaded to Hipay Wallet yet.') . '</p>',
  );

  // If user account has already been created in Hipay Wallet,
  // allow to upload the KYC documents.
  if (!empty($entity->hipay_account_id)) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Upload remaining KYC documents to Hipay Wallet'),
    );
  }
  // Otherwise just display relevant info.
  else {
    $form['info_create'] = array(
      '#markup' => '<p>' . t('You have to create the user account in Hipay Wallet first before being able to upload the KYC documents.') . '</p>',
    );
  }

  return $form;
}

/**
 * Form submit handler: uploads KYC documents to Hipay Wallet.
 *
 * @see commerce_hipay_ws_user_account_view_hipay_kyc_upload_form()
 */
function commerce_hipay_ws_user_account_view_hipay_kyc_upload_form_submit($form, $form_state) {
  $user_account = $form_state['commerce_hipay_ws_user_account'];
  commerce_hipay_ws_user_account_upload_kyc_documents($user_account);
}

/**
 * Uploads all not yet uploaded entity KYC documents to Hipay Wallet.
 *
 * @param object $user_account
 *   A Hipay user account entity object which to upload the KYC documents for.
 */
function commerce_hipay_ws_user_account_upload_kyc_documents($user_account) {
  $wrapper = entity_metadata_wrapper('commerce_hipay_ws_user_account', $user_account);
  $kyc_documents = $wrapper->hipay_ws_user_kyc_documents->value();
  $success = TRUE;

  foreach ($kyc_documents as $delta => $kyc_document) {
    if (empty($kyc_document['kyc_uploaded'])) {
      $kyc_document['delta'] = $delta;
      $response = commerce_hipay_ws_api_upload($user_account, $kyc_document);

      // If there was an error uploading the KYC document.
      if (!isset($response['code']) || $response['code'] !== COMMERCE_HIPAY_WS_STATUS_SUCCESS) {
        // Combine all error messages into one string.
        $error_message = '';
        if (!empty($response['errors'])) {
          $error_messages = array();
          foreach ($response['errors'] as $error) {
            $error_messages[] = implode(': ', $error);
          }
          $error_message = ': ' . implode(', ', $error_messages);
        }

        drupal_set_message(t('Error uploading KYC document %filename to Hipay Wallet: @error.', array(
          '%filename' => $kyc_document['filename'],
          '@error' => $response['message'] . $error_message,
        )), 'error');
        $success = FALSE;
      }
      // Everything was fine with the upload.
      else {
        drupal_set_message(t('Successfully uploaded KYC document %filename to Hipay Wallet.', array(
          '%filename' => $kyc_document['filename'],
        )));
      }
    }
  }

  return $success;
}

/**
 * Provides a wrapper on the edit form to add a new Hipay user account entity.
 *
 * @see commerce_hipay_ws_user_account_menu()
 */
function commerce_hipay_ws_user_account_add($type) {
  // Create a basic entity structure to be used and passed to the validation
  // and submission functions.
  $user_account = entity_get_controller('commerce_hipay_ws_user_account')->create(array('type' => $type));
  return drupal_get_form('commerce_hipay_ws_user_account_form', $user_account);
}

/**
 * Form function to edit a Hipay user account entity.
 *
 * @see commerce_hipay_ws_user_account_form_validate()
 * @see commerce_hipay_ws_user_account_form_submit()
 */
function commerce_hipay_ws_user_account_form($form, &$form_state, $user_account) {
  global $user;

  // Ensure the owner name is accessible if the uid is set.
  if (isset($user_account->uid) && $owner = user_load($user_account->uid)) {
    $user_account->name = $owner->name;
  }

  if (empty($user_account->created)) {
    $user_account->date = format_date(REQUEST_TIME, 'custom', 'Y-m-d H:i:s O');
  }

  $form['commerce_hipay_ws_user_account'] = array(
    '#type' => 'value',
    '#value' => $user_account,
  );

  // Add the field related form elements.
  field_attach_form('commerce_hipay_ws_user_account', $user_account, $form, $form_state);

  // Add custom processing function to each uploaded file, so that we can
  // replace its description field with own KYC type dropdown.
  foreach (element_children($form['hipay_ws_user_kyc_documents'][LANGUAGE_NONE], TRUE) as $delta => $key) {
    $form['hipay_ws_user_kyc_documents'][LANGUAGE_NONE][$key]['#process'][] = 'commerce_hipay_ws_file_field_widget_process';
  }

  $form['additional_settings'] = array(
    '#type' => 'vertical_tabs',
    '#weight' => 99,
  );

  // Add the user account field.
  $form['user'] = array(
    '#type' => 'fieldset',
    '#title' => t('User information'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#group' => 'additional_settings',
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'commerce_hipay_ws') . '/includes/entities/commerce_hipay_ws.entity_ui.js',
        array(
          'type' => 'setting',
          'data' => array('anonymous' => variable_get('anonymous', t('Anonymous'))),
        ),
      ),
    ),
    '#weight' => 50,
  );
  $form['user']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Owned by'),
    '#description' => t('Leave blank for %anonymous.', array('%anonymous' => variable_get('anonymous', t('Anonymous')))),
    '#maxlength' => 60,
    '#autocomplete_path' => 'user/autocomplete',
    '#default_value' => isset($user_account->name) ? $user_account->name : $user->name,
    '#weight' => -1,
  );

  // Add a log checkbox and timestamp field to a Revision information tab.
  $form['revision_information'] = array(
    '#type' => 'fieldset',
    '#title' => t('Revision information', array()),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#group' => 'additional_settings',
    '#weight' => 40,
    '#attached' => array(
      'js' => array(drupal_get_path('module', 'commerce_hipay_ws') . '/includes/entities/commerce_hipay_ws.entity_ui.js'),
    ),
  );
  $form['revision_information']['revision'] = array(
    '#type' => 'checkbox',
    '#title' => t('Create new revision'),
    '#description' => t('If a revision log message is entered, a revision will be created even if this is unchecked.'),
    '#default_value' => empty($user_account->is_new),
    '#access' => user_access('administer commerce_hipay_ws_user_account entities'),
  );
  $form['revision_information']['date'] = array(
    '#type' => 'textfield',
    '#title' => t('Created on'),
    '#description' => t('Format: %time. The date format is YYYY-MM-DD and %timezone is the time zone offset from UTC. Leave blank to use the time of form submission.', array(
      '%time' => !empty($user_account->date) ? date_format(date_create($user_account->date), 'Y-m-d H:i:s O') : format_date($user_account->created, 'custom', 'Y-m-d H:i:s O'),
      '%timezone' => !empty($user_account->date) ? date_format(date_create($user_account->date), 'O') : format_date($user_account->created, 'custom', 'O'),
    )),
    '#maxlength' => 25,
    '#default_value' => !empty($user_account->created) ? format_date($user_account->created, 'custom', 'Y-m-d H:i:s O') : '',
  );
  $form['revision_information']['log'] = array(
    '#type' => 'textarea',
    '#title' => t('Revision log message'),
    '#description' => t('Provide an explanation of the changes you are making. This will provide a meaningful audit trail for updates to this entity.'),
    '#rows' => 4,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 100,
  );
  $form['delete'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
    '#submit' => array('commerce_hipay_ws_user_account_delete'),
    '#weight' => 200,
  );

  return $form;
}

/**
 * Validation handler for Hipay user account edit form.
 *
 * @see commerce_hipay_ws_user_account_form()
 * @see commerce_hipay_ws_user_account_form_submit()
 */
function commerce_hipay_ws_user_account_form_validate($form, &$form_state) {
  $user_account = $form_state['values']['commerce_hipay_ws_user_account'];

  // Validate the 'Owned by' field.
  if (!empty($form_state['values']['name']) && !($account = user_load_by_name($form_state['values']['name']))) {
    // The use of empty() is mandatory in the context of usernames as the empty
    // string denotes an anonymous user.
    form_set_error('name', t('The username %name does not exist.', array('%name' => $form_state['values']['name'])));
  }

  // Validate the 'Created on' field.
  if (!empty($form_state['values']['date']) && strtotime($form_state['values']['date']) === FALSE) {
    form_set_error('date', t('You have to specify a valid date.'));
  }

  // Notify field widgets to validate their data.
  field_attach_form_validate('commerce_hipay_ws_user_account', $form_state['values']['commerce_hipay_ws_user_account'], $form, $form_state);

  if ($user_account->type != 'hipay_user_account') {
    return;
  }

  // Validate the 'Email' address.
  if ($error = user_validate_mail($form_state['values']['hipay_ws_user_email'][LANGUAGE_NONE][0]['value'])) {
    form_set_error('hipay_ws_user_email', $error);
  }
  // Check if the email address is not taken by an existing Hipay user account.
  else {
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'commerce_hipay_ws_user_account')
      ->fieldCondition('hipay_ws_user_email', 'value', $form_state['values']['hipay_ws_user_email'][LANGUAGE_NONE][0]['value'], '=');
    // If we are modifying an existing user account, do not check the form email
    // address against this account email address.
    if (!empty($user_account->user_account_id)) {
      $query->propertyCondition('user_account_id', $user_account->user_account_id, '<>');
    }
    $result = $query->execute();
    if (!empty($result['commerce_hipay_ws_user_account'])) {
      form_set_error('hipay_ws_user_email', t('The e-mail address %email is already registered.', array('%email' => $form_state['values']['hipay_ws_user_email'][LANGUAGE_NONE][0]['value'])));
    }
  }

  // Validate the 'Contact email' address.
  if ($error = user_validate_mail($form_state['values']['hipay_ws_user_contact_email'][LANGUAGE_NONE][0]['value'])) {
    form_set_error('hipay_ws_user_contact_email', $error);
  }
}

/**
 * Submission handler for Hipay user account edit form.
 *
 * @see commerce_hipay_ws_user_account_form()
 * @see commerce_hipay_ws_user_account_form_validate()
 */
function commerce_hipay_ws_user_account_form_submit($form, &$form_state) {
  $user_account = $form_state['values']['commerce_hipay_ws_user_account'];

  if ($form_state['values']['revision'] || !empty($form_state['values']['log'])) {
    $user_account->revision = TRUE;
    $user_account->log = $form_state['values']['log'];
  }

  // Set the profile's owner uid based on the supplied name.
  if (!empty($form_state['values']['name']) && $account = user_load_by_name($form_state['values']['name'])) {
    $user_account->uid = $account->uid;
  }
  else {
    $user_account->uid = 0;
  }

  $user_account->created = !empty($form_state['values']['date']) ? strtotime($form_state['values']['date']) : REQUEST_TIME;

  // Notify field widgets.
  field_attach_submit('commerce_hipay_ws_user_account', $user_account, $form, $form_state);

  // Save the Hipay user account.
  commerce_hipay_ws_user_account_save($user_account);

  drupal_set_message(t('Hipay user account saved.'));
  $form_state['redirect'] = 'admin/commerce/hipay-wallet/user-accounts/' . $user_account->user_account_id;
}

/**
 * Menu callback: returns Hipay user account deletion form.
 *
 * @see commerce_hipay_ws_user_account_menu()
 */
function commerce_hipay_ws_user_account_delete($form, &$form_state) {
  return drupal_get_form('commerce_hipay_ws_user_account_delete_form', $form_state['values']['commerce_hipay_ws_user_account']);
}

/**
 * Form constructor for delete an accounting reference form.
 *
 * @see commerce_hipay_ws_user_account_delete_form_submit()
 */
function commerce_hipay_ws_user_account_delete_form($form, &$form_state, $user_account, $type) {
  // Do not allow to delete a principal user account if it has a sub-account
  // connected to it.
  if (
    $user_account->type == 'hipay_user_account'
    && $subaccounts = commerce_hipay_ws_user_account_load_subaccounts($user_account->user_account_id)
  ) {
    $form['info'] = array(
      '#markup' => t('There are !count user sub-accounts connected to this user account. Please delete them first.', array(
        '!count' => count($subaccounts),
      )),
    );
    return $form;
  }

  // Do not allow to delete a user account if it has a bank account
  // connected to it.
  if (commerce_hipay_ws_user_account_load_bank_accounts($user_account->user_account_id)) {
    $form['info'] = array(
      '#markup' => t('There is a bank account connected to this user account. Please delete it first.'),
    );
    return $form;
  }

  $form_state['type'] = $type;
  $form_state['commerce_hipay_ws_user_account'] = $user_account;

  $form = confirm_form($form,
    t('Are you sure you want to delete this user !type?', array('!type' => $type)),
    'admin/commerce/hipay-wallet/user-accounts',
    '<p>' . t('This action cannot be undone.') . '</p>',
    t('Delete'),
    t('Cancel'),
    'confirm'
  );

  return $form;
}

/**
 * Submission handler for Hipay user account delete form.
 *
 * @see commerce_hipay_ws_user_account_delete_form()
 */
function commerce_hipay_ws_user_account_delete_form_submit($form, &$form_state) {
  $form_state['commerce_hipay_ws_user_account']->delete();

  drupal_set_message(t('The user !type has been deleted.', array('!type' => $form_state['type'])));

  $account_path = ($form_state['commerce_hipay_ws_user_account']->type == 'hipay_user_subaccount') ? 'user-subaccounts' : 'user-accounts';
  $form_state['redirect'] = 'admin/commerce/hipay-wallet/' . $account_path;
}
