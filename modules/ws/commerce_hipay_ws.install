<?php

/**
 * Implements hook_requirements().
 */
function commerce_hipay_ws_requirements($phase) {
  $t = get_t();
  $requirements = array();

  // Add cURL requirement only if SimpleTest is not installed,
  // to avoid multiple cURL rows.
  if (!module_exists('simpletest')) {
    $has_curl = function_exists('curl_init');

    $requirements['commerce_hipay_ws_curl'] = array(
      'title' => $t('Hipay Wallet: cURL'),
      'value' => $has_curl ? $t('cURL library enabled') : $t('cURL library not found'),
    );

    if (!$has_curl) {
      $requirements['commerce_hipay_ws_curl'] += array(
        'severity' => REQUIREMENT_ERROR,
        'description' => $t("Hipay Wallet requires the PHP <a href='!curl_url'>cURL</a> library.", array('!curl_url' => 'http://php.net/manual/en/curl.setup.php')),
      );
    }
  }

  // Verify that the SoapClient class is found.
  $has_soap = class_exists('SoapClient');

  $requirements['commerce_hipay_ws_soap'] = array(
    'title' => $t('Hipay Wallet: SoapClient'),
    'value' => $has_soap ? $t('SoapClient class found') : $t('SoapClient class not found'),
  );

  if (!$has_soap) {
    $requirements['commerce_hipay_ws_soap'] += array(
      'severity' => REQUIREMENT_ERROR,
      'description' => $t("Hipay WS requires the PHP <a href='!soap_url'>SoapClient</a> extension.", array('!soap_url' => 'http://php.net/manual/en/soap.setup.php')),
    );
  }

  return $requirements;
}

/**
 * Implements hook_schema().
 */
function commerce_hipay_ws_schema() {
  $schema = array();

  module_load_include('inc', 'commerce_hipay_ws', 'includes/entities/commerce_hipay_ws.entity.user_account');
  $schema += commerce_hipay_ws_user_account_schema();

  module_load_include('inc', 'commerce_hipay_ws', 'includes/entities/commerce_hipay_ws.entity.bank_account');
  $schema += commerce_hipay_ws_bank_account_schema();

  module_load_include('inc', 'commerce_hipay_ws', 'includes/entities/commerce_hipay_ws.entity.file');
  $schema += commerce_hipay_ws_file_schema();

  module_load_include('inc', 'commerce_hipay_ws', 'includes/entities/commerce_hipay_ws.entity.transfer');
  $schema += commerce_hipay_ws_transfer_schema();

  $schema['commerce_hipay_ws_account'] = array(
    'description' => 'Details of Hipay Wallet accounts.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'account_id' => array(
        'description' => 'The Hipay account ID.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'store_id' => array(
        'description' => 'The store_id that owns this account.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'email' => array(
        'description' => 'The account main email address.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => 0,
      ),
      'hipay_vendor_account' => array(
        'description' => 'The details of Hipay wallet vendor account.',
        'type' => 'text',
        'size' => 'big',
        'serialize' => TRUE,
        'not null' => FALSE,
      ),
      'hipay_bank_account' => array(
        'description' => 'The details of Hipay Wallet vendor bank account.',
        'type' => 'text',
        'size' => 'big',
        'serialize' => TRUE,
        'not null' => FALSE,
      ),
    ),
    'foreign keys' => array(
      'store_id' => array(
        'table' => 'commerce_store',
        'columns' => array('store_id' => 'store_id'),
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'store_id' => array('store_id'),
    ),
  );

  $schema['commerce_hipay_ws_withdrawal'] = array(
    'description' => 'Details of Hipay Wallet withdrawals.',
    'fields' => array(
      'id' => array(
        'description' => 'The primary identifier.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'account_id' => array(
        'description' => 'The Hipay account ID.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'amount' => array(
        'description' => 'Amount of the withdrawal in the account currency.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'currency_code' => array(
        'description' => 'Currency code of the withdrawal.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
        'default' => '',
      ),
      'label' => array(
        'description' => 'Label of the withdrawal.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
        'default' => '',
      ),
      'created' => array(
        'description' => 'The Unix timestamp when this withdrawal was created.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when this withdrawal was last changed.',
        'type' => 'int',
        'not null' => FALSE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'The status code of this withdrawal.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => FALSE,
        'default' => '',
      ),
      'status_message' => array(
        'description' => 'The status message of this withdrawal.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
        'default' => '',
      ),
      'transaction_id' => array(
        'description' => 'Transaction ID of the withdrawal.',
        'type' => 'varchar',
        'length' => 32,
        'not null' => FALSE,
        'default' => '',
      ),
      'notification' => array(
        'description' => 'The details of server-to-server notification.',
        'type' => 'text',
        'size' => 'big',
        'serialize' => TRUE,
        'not null' => FALSE,
      ),
    ),
    'foreign keys' => array(
      'account_id' => array(
        'table' => 'commerce_hipay_ws_account',
        'columns' => array('account_id' => 'account_id'),
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'transaction_id' => array('transaction_id'),
      'account_id' => array('account_id'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function commerce_hipay_ws_install() {
  module_load_include('inc', 'commerce_hipay_ws', 'includes/entities/commerce_hipay_ws.entity.user_account');
  commerce_hipay_ws_user_account_create_fields();

  module_load_include('inc', 'commerce_hipay_ws', 'includes/entities/commerce_hipay_ws.entity.bank_account');
  commerce_hipay_ws_bank_account_create_fields();
}

/**
 * Implements hook_uninstall().
 */
function commerce_hipay_ws_uninstall() {
  module_load_include('inc', 'commerce_hipay_ws', 'includes/entities/commerce_hipay_ws.entity.user_account');
  commerce_hipay_ws_user_account_delete_fields();

  module_load_include('inc', 'commerce_hipay_ws', 'includes/entities/commerce_hipay_ws.entity.bank_account');
  commerce_hipay_ws_bank_account_delete_fields();
}
