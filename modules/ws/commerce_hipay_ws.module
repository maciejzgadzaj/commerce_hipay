<?php

/**
 * @file
 * Provides integration with Hipay Wallet.
 */

require_once 'includes/commerce_hipay_ws.account.inc';
require_once 'includes/commerce_hipay_ws.codes.inc';
require_once 'includes/commerce_hipay_ws.constants.inc';
require_once 'includes/commerce_hipay_ws.transfer.inc';
require_once 'includes/commerce_hipay_ws.withdrawal.inc';
require_once 'includes/entities/commerce_hipay_ws.entity.user_account.inc';
require_once 'includes/entities/commerce_hipay_ws.entity.bank_account.inc';
require_once 'includes/entities/commerce_hipay_ws.entity.file.inc';
require_once 'includes/entities/commerce_hipay_ws.entity_ui.user_account.inc';
require_once 'includes/entities/commerce_hipay_ws.entity_ui.bank_account.inc';
require_once 'includes/api/commerce_hipay_ws.api.inc';
require_once 'includes/api/commerce_hipay_ws.api.user_account.inc';
require_once 'includes/api/commerce_hipay_ws.api.bank_account.inc';
require_once 'includes/api/commerce_hipay_ws.api.upload.inc';

/**
 * Implements hook_entity_info().
 */
function commerce_hipay_ws_entity_info() {
  return commerce_hipay_ws_user_account_entity_info()
    + commerce_hipay_ws_bank_account_entity_info();
}

/**
 * Implements hook_commerce_payment_method_info().
 *
 * @see hook_commerce_payment_method_info()
 */
function commerce_hipay_ws_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_hipay_ws'] = array(
    'title' => 'Hipay Wallet',
    'description' => t('Hipay Wallet'),
    'checkout' => FALSE,
    'terminal' => FALSE,
  );

  return $payment_methods;
}

/**
 * Implements hook_permission().
 */
function commerce_hipay_ws_permission() {
  $permissions = array(
    'administer Hipay Wallet configuration' => array(
      'title' => t('Administer Hipay Wallet configuration'),
      'description' => t('Allows users to administer Hipay Wallet configuration.'),
      'restrict access' => TRUE,
    ),
  );

  $permissions += commerce_entity_access_permissions('commerce_hipay_ws_user_account');
  $permissions += commerce_entity_access_permissions('commerce_hipay_ws_bank_account');

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function commerce_hipay_ws_menu() {
  $items = array();

  $items['admin/commerce/hipay-wallet'] = array(
    'title' => 'Hipay Wallet',
    'description' => 'Manage Hipay Wallet settings.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer Hipay Wallet configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  // Server-to-server notification URL.
  $items['commerce-hipay-ws/notify'] = array(
    'page callback' => 'commerce_hipay_ws_callback_notification',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Testing menu item for direct calls to the API.
  $items['commerce-hipay-ws/soap/%'] = array(
    'page callback' => 'commerce_hipay_ws_soap',
    'page arguments' => array(2),
    'access arguments' => array('access devel information'),
    'type' => MENU_CALLBACK,
  );

  $items['store/%commerce_store/hipay-wallet'] = array(
    'title' => 'Hipay Wallet',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'commerce_hipay_ws_store_overview',
    'page arguments' => array(1),
    'access callback' => 'commerce_store_access',
    'access arguments' => array('update', 1),
    'weight' => 0,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_hipay_ws.admin.inc',
  );

  $items['store/%commerce_store/hipay-wallet/view'] = array(
    'title' => 'Account details',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -5,
  );

  $items['store/%commerce_store/hipay-wallet/received-transfers'] = array(
    'title' => 'Received transfers',
    'page callback' => 'commerce_hipay_ws_store_transfers_received',
    'page arguments' => array(1),
    'access callback' => 'commerce_store_access',
    'access arguments' => array('update', 1),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_hipay_ws.admin.inc',
  );

  $items['store/%commerce_store/hipay-wallet/sent-transfers'] = array(
    'title' => 'Sent transfers',
    'page callback' => 'commerce_hipay_ws_store_transfers_sent',
    'page arguments' => array(1),
    'access callback' => 'commerce_store_access',
    'access arguments' => array('update', 1),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_hipay_ws.admin.inc',
  );

  $items['store/%commerce_store/hipay-wallet/withdrawals'] = array(
    'title' => 'Withdrawals',
    'page callback' => 'commerce_hipay_ws_store_withdrawals',
    'page arguments' => array(1),
    'access callback' => 'commerce_store_access',
    'access arguments' => array('update', 1),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'includes/commerce_hipay_ws.admin.inc',
  );

  // User accounts.
  $items += commerce_hipay_ws_user_account_menu();

  // Bank accounts.
  $items += commerce_hipay_ws_bank_account_menu();

  return $items;
}

/**
 * Implements hook_theme().
 */
function commerce_hipay_ws_theme() {
  return array(
    'kyc_documents_table' => array(
      'variables' => array('items' => NULL),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function commerce_hipay_ws_views_api() {
  return array(
    'api' => 3,
    'version' => '3.0',
    'path' => drupal_get_path('module', 'commerce_hipay_ws') . '/includes/views',
  );
}

/**
 * Implements hook_entity_presave().
 */
function commerce_hipay_ws_entity_presave($entity, $type) {
  // When saving a Hipay bank account entity, check if we already have its
  // related Hipay user account ID, and set it if available.
  if ($type == 'commerce_hipay_ws_bank_account' && empty($entity->hipay_account_id)) {
    $wrapper = entity_metadata_wrapper($type, $entity);
    $hipay_user_account = $wrapper->hipay_ws_bank_user_account->value();
    $entity->hipay_account_id = $hipay_user_account->hipay_account_id;
  }
}

/**
 * Implements hook_entity_insert().
 */
function commerce_hipay_ws_entity_insert($entity, $type) {
  // Create new user account in Hipay Wallet.
  if ($type == 'commerce_hipay_ws_user_account') {
    $payment_method_instance = commerce_hipay_ws_payment_method_instance();
    // Only if payment method is enabled (otherwise the instance would be empty)
    // and configured to create accounts in Hipay Wallet immediately.
    if (!empty($payment_method_instance['settings']['api']['create_account_immediately'])) {
      $hipay_user_account = commerce_hipay_ws_user_account_load($entity->user_account_id);
      $response = commerce_hipay_ws_api_user_account_create($hipay_user_account);
      if (!isset($response['code']) || $response['code'] !== COMMERCE_HIPAY_WS_STATUS_SUCCESS) {
        drupal_set_message(t('Error creating a new user account in Hipay Wallet: @error.', array('@error' => $response['description'])), 'error');
      }
      else {
        drupal_set_message(t('User account created in Hipay Wallet.'));
      }
    }
  }

  // Create new bank account in Hipay Wallet.
  if ($type == 'commerce_hipay_ws_bank_account') {
    $payment_method_instance = commerce_hipay_ws_payment_method_instance();
    // Only if payment method is enabled (otherwise the instance would be empty)
    // and configured to create accounts in Hipay Wallet immediately.
    if (!empty($payment_method_instance['settings']['api']['create_account_immediately'])) {
      $hipay_bank_account = commerce_hipay_ws_bank_account_load($entity->bank_account_id);
      $response = commerce_hipay_ws_api_bank_account_create($hipay_bank_account);
      if (!isset($response['code']) || $response['code'] !== COMMERCE_HIPAY_WS_STATUS_SUCCESS) {
        drupal_set_message(t('Error creating a new bank account in Hipay Wallet: @error.', array('@error' => $response['description'])), 'error');
      }
      else {
        drupal_set_message(t('Bank account created in Hipay Wallet.'));
      }
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function commerce_hipay_ws_entity_update($entity, $type) {
  if ($type == 'commerce_hipay_ws_user_account') {
    $payment_method_instance = commerce_hipay_ws_payment_method_instance();
    // Only if payment method is enabled (otherwise the instance would be empty)
    // and configured to create accounts in Hipay Wallet immediately.
    if (!empty($payment_method_instance['settings']['api']['create_account_immediately'])) {
      // Reload the entity to have fully populated KYC document file fields.
      $hipay_user_account = commerce_hipay_ws_user_account_load($entity->user_account_id);
      commerce_hipay_ws_user_account_upload_kyc_documents($hipay_user_account);
    }
  }
}

/**
 * Returns default settings for the Hipay Wallet payment method.
 *
 * @see commerce_hipay_ws_settings_form()
 */
function commerce_hipay_ws_settings_default() {
  return array(
    'endpoint' => COMMERCE_HIPAY_WS_TEST,
    'account_id' => '',
    'email' => '',
    'entity' => '',
    'api_username' => '',
    'api_password' => '',
    'locale' => 'en_GB',
    'api' => array(
      'create_account_immediately' => TRUE,
      'test_mode' => FALSE,
      'logging' => array(
        'request' => FALSE,
        'response' => FALSE,
      ),
      'cache' => FALSE,
      'cache_lifetime' => 0,
    ),
    'website' => array(
      'business_line_id' => '',
      'topic_id' => '',
      'contact_email' => variable_get('site_mail'),
      'name' => variable_get('site_name'),
      'url' => $GLOBALS['base_url'],
      'merchant_password' => '',
    ),
    'bank_account' => array(
      'bankName' => '',
      'bankAddress' => '',
      'bankZipCode' => '',
      'bankCity' => '',
      'bankCountry' => '',
      'iban' => '',
      'swift' => '',
      'acct_num' => '',
      'aba_num' => '',
      'transit_num' => '',
    ),
  );
}

/**
 * Payment method callback: settings form.
 *
 * @see hook_commerce_payment_method_info()
 */
function commerce_hipay_ws_settings_form($settings = array()) {
  // Make sure the PHP SOAP extension is installed.
  if (!class_exists('SoapClient')) {
    drupal_set_message(t('SoapClient class not found! The Hipay Wallet settings form will not be available until PHP <a href="!soap_url">SOAP extension</a> is installed.', array('!soap_url' => 'http://php.net/manual/en/book.soap.php')), 'error');
    return array();
  }

  // Merge default settings into the stored settings array.
  // Settings are stored in multi-level array, so we need recursive merge. And
  // actually replace instead of merge, to make sure the default settings are
  // correctly overriden by custom user settings (array_merge_recursive() would
  // just add new array elements instead of overriding existing ones).
  $settings = array_replace_recursive(commerce_hipay_ws_settings_default(), $settings);

  // When the payment method is configured for the very first time, only part
  // of the settings form is displayed - as for the remaining part we need to
  // have API credentials provided first, to be able to make few API requests
  // to get data required for form element options etc.
  if (empty($settings['api_password'])) {
    drupal_set_message(t('Please note that this is only a part of the Hipay Wallet payment method settings form. After providing the Hipay Wallet API credentials below, the form will be refreshed to show all remaining options.'), 'warning');
  }

  $form = array();

  // Pass the original settings to the submit callback, so that we are know
  // if it is the very first time the payment method is being configured or not.
  $form['settings'] = array(
    '#type' => 'value',
    '#value' => $settings,
  );

  $form['endpoint'] = array(
    '#type' => 'radios',
    '#title' => t('Environment'),
    '#options' => array(
      COMMERCE_HIPAY_WS_TEST => t('Test - process test operations on the test account'),
      COMMERCE_HIPAY_WS_PROD => t('Production - process real operations on the production account'),
    ),
    '#default_value' => $settings['endpoint'],
    '#required' => TRUE,
  );

  $form['account_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Account ID'),
    '#description' => t('Hipay Wallet account ID.'),
    '#default_value' => $settings['account_id'],
    '#required' => TRUE,
  );

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Account email'),
    '#description' => t('Hipay Wallet account email address.'),
    '#default_value' => $settings['email'],
    '#required' => TRUE,
  );

  $form['entity'] = array(
    '#type' => 'textfield',
    '#title' => t('Entity'),
    '#description' => t('Entity of the accounts involved in API operations (provided by Hipay after Hipay Wallet account setup).'),
    '#default_value' => $settings['entity'],
    '#required' => TRUE,
  );

  $form['api_username'] = array(
    '#type' => 'textfield',
    '#title' => t('API username'),
    '#description' => t('The name of the user for accessing Hipay Wallet webservice. This, as well as API password, can be found in your Hipay Wallet Account under <em>Hipay wallet integration / Merchant Tool Kit / API</em>.'),
    '#default_value' => $settings['api_username'],
    '#required' => TRUE,
  );

  $form['api_password'] = array(
    '#type' => 'textfield',
    '#title' => t('API password'),
    '#description' => t('The password for the user specified in the above field.'),
    '#default_value' => $settings['api_password'],
    '#required' => TRUE,
  );

  $form['locale'] = array(
    '#type' => 'select',
    '#title' => t('Locale'),
    '#description' => t('Default API locale.'),
    '#options' => commerce_hipay_ws_get_supported_languages(),
    '#default_value' => $settings['locale'],
    '#required' => TRUE,
  );

  // API settings.
  $form['api'] = array(
    '#type' => 'fieldset',
    '#title' => t('API settings'),
    '#collapsible' => TRUE,
  );

  $form['api']['create_account_immediately'] = array(
    '#type' => 'checkbox',
    '#title' => t('Create Hipay Wallet accounts immediately'),
    '#description' => t('When enabled, after each new Hipay user or bank account entity is created in Drupal, a relevant API will be called immediately to create it in the Hipay Wallet as well.'),
    '#default_value' => $settings['api']['create_account_immediately'],
  );

  $form['api']['test_mode'] = array(
    '#type' => 'checkbox',
    '#title' => t('Test mode'),
    '#description' => t('When enabled, the email address of each vendor account created in Hipay Wallet will be altered with current timestamp (for example, when creating a user account for <em>email@domain.net</em>, it will be altered to <em>email+1463740832@domain.net</em>). This could be useful when testing Hipay Wallet integration - when creating a user account for the same email address multiple times, or from multiple environments - to avoid Hipay complaining that the user account for a provided email address has already been created.'),
    '#default_value' => $settings['api']['test_mode'],
  );

  $form['api']['logging'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#description' => t('Enabling this option will save full information on each API request and/or response in the dblog.'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => $settings['api']['logging'],
  );

  // API response caching.
  // Based on system_performance_settings().
  $form['api']['cache'] = array(
    '#type' => 'checkbox',
    '#title' => t('Cache API responses'),
    '#description' => t('Enable caching for generic API responses (countries, currencies, locales, timezones, business lines and website topics).'),
    '#default_value' => $settings['api']['cache'],
  );

  $day = 86400;
  $period = drupal_map_assoc(array($day, $day * 2, $day * 3, $day * 7, $day * 14, $day * 30), 'format_interval');
  $period[0] = '<' . t('none') . '>';
  $form['api']['cache_lifetime'] = array(
    '#type' => 'select',
    '#title' => t('Minimum cache lifetime'),
    '#description' => t('Cached API responses will not be re-fetched until at least this much time has elapsed.'),
    '#options' => $period,
    '#default_value' => $settings['api']['cache_lifetime'],
    '#states' => array(
      'visible' => array(
        ':input[name="parameter[payment_method][settings][payment_method][settings][api][cache]"]' => array('checked' => TRUE),
      ),
    ),
  );

  if (!empty($settings['api_password'])) {

    // Website configuration.
    $form['website'] = array(
      '#type' => 'fieldset',
      '#title' => t('Website settings'),
      '#description' => t('The settings below will be used for the <code>websites</code> item of each <code>createFullUseraccount</code> API call.'),
      '#collapsible' => TRUE,
      '#prefix' => '<div id="website_settings">',
      '#suffix' => '</div>',
    );

    $form['website']['business_line_id'] = array(
      '#type' => 'select',
      '#title' => t('Business line ID'),
      '#description' => t('Main website theme.'),
      '#options' => array('' => t('- select -')) + commerce_hipay_ws_get_website_business_lines_options(),
      '#default_value' => $settings['website']['business_line_id'],
      // Ajax callback to populate the 'Topic ID' select options.
      '#ajax' => array(
        'callback' => 'commerce_hipay_ws_settings_form_ajax_callback',
        'wrapper' => 'website_settings',
      ),
      '#required' => TRUE,
    );

    $topic_options = array('' => t('- select -'));
    if (!empty($settings['website']['business_line_id'])) {
      $topic_options += commerce_hipay_ws_get_website_topics_options($settings['website']['business_line_id']);
    }

    $form['website']['topic_id'] = array(
      '#type' => 'select',
      '#title' => t('Topic ID'),
      '#description' => t('Secondary website theme.'),
      // When the Business Line ID is selected, real options will be added
      // in commerce_hipay_ws_form_rules_ui_edit_element_alter()
      // (as here we don't have access to $form_state values).
      '#options' => $topic_options,
      '#default_value' => $settings['website']['topic_id'],
      '#required' => TRUE,
    );

    $form['website']['contact_email'] = array(
      '#type' => 'textfield',
      '#title' => t('Contact email'),
      '#description' => t('Contact email displayed on payment page.'),
      '#default_value' => $settings['website']['contact_email'],
      '#required' => TRUE,
    );

    $form['website']['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Website name'),
      '#default_value' => $settings['website']['name'],
      '#required' => TRUE,
    );

    $form['website']['url'] = array(
      '#type' => 'textfield',
      '#title' => t('Website URL'),
      '#description' => t('Full HTTP URL of website (http://www.merchant.com).'),
      '#default_value' => $settings['website']['url'],
      '#required' => TRUE,
    );

    $form['website']['merchant_password'] = array(
      '#type' => 'textfield',
      '#title' => t('Merchant password'),
      '#description' => t('Merchant password to use with MAPI KIT on payment buttons only.'),
      '#default_value' => $settings['website']['merchant_password'],
      '#required' => TRUE,
    );

    // Vendor account details.
    $form['vendor_account'] = array(
      '#type' => 'fieldset',
      '#title' => t('Vendor account details'),
      '#collapsible' => TRUE,
    );

    $rows = array();

    // Balance.
    $response = commerce_hipay_ws_api_request(COMMERCE_HIPAY_WS_RESOURCE_SOAP_GET_BALANCE);
    if (isset($response['code']) && $response['code'] === COMMERCE_HIPAY_WS_STATUS_SUCCESS) {
      $rows[] = array(
        t('Account ID'),
        $response['balances']['item']['userAccountId'],
      );
      $rows[] = array(
        t('Balance'),
        commerce_currency_format(commerce_currency_decimal_to_amount($response['balances']['item']['balance'], $response['balances']['item']['currency']), $response['balances']['item']['currency']),
      );
      $rows[] = array(
        t('Money available for withdrawal'),
        commerce_currency_format(commerce_currency_decimal_to_amount($response['balances']['item']['moneyAvailableForWithdrawal'], $response['balances']['item']['currency']), $response['balances']['item']['currency']),
      );
    }

    $form['vendor_account']['info'] = array(
      '#type' => 'markup',
      '#markup' => theme('table', array('rows' => $rows)),
    );

    // Bank account details.
    $form['bank_account'] = array(
      '#type' => 'fieldset',
      '#title' => t('Bank account details'),
      '#description' => '<p>' . t('Note that once the bank details are saved, and the bank account gets created in your Hipay Wallet account, they cannot be changed anymore. The only way to change or delete them is to contact Hipay support.') . '</p>'
        . '<p>' . t('To avoid creating the bank account in your Hipay Wallet account after submitting this form you can leave the <em>Bank country</em> field empty - then the Hipay Wallet API will not be called when you submit the form, and the bank account will not be created (even if all other bank-related fields are filled).') . '</p>'
        . '<p>' . t('Note that the required fields are different for different countries. To see which fields are required for your country, please select relevant <em>Bank country</em> value (leaving all other bank fields empty) and submit the form.') . '</p>',
      '#collapsible' => TRUE,
    );

    // Check current bank information status only if API username and password
    // have already been provided - otherwise we won't be able to make API call.
    $response = commerce_hipay_ws_api_get_bank_info_status();
    if (isset($response['code']) && $response['code'] === COMMERCE_HIPAY_WS_STATUS_SUCCESS) {
      // Display current status of bank account information.
      $form['bank_account']['current_status'] = array(
        '#markup' => t('Current Hipay Wallet bank information status: <strong>@status</strong>', array(
          '@status' => $response['status'],
        )),
      );

      // Add it to the form as well so we have access to it in validate
      // and submit callbacks.
      $form['bank_account']['status'] = array(
        '#type' => 'value',
        '#value' => $response['status'],
      );

      // If bank account has been already created in Hipay Wallet, we won't be
      // able to change it anymore through API, so just disable all bank-related
      // form fields, and collapse whole 'Bank account details' fieldset.
      if ($response['status'] != COMMERCE_HIPAY_WS_ACCOUNT_NO_BANK_INFO) {
        $disable_bank_form_elements = TRUE;

        // If bank account details has been validated in Hipay Wallet, let's
        // fetch all the information and display them in the form, overriding
        // whatever settings has been saved locally before.
        if ($response['status'] != COMMERCE_HIPAY_WS_ACCOUNT_BANK_INFO_VALIDATED) {
          $response = commerce_hipay_ws_api_request(COMMERCE_HIPAY_WS_RESOURCE_SOAP_BANK_INFOS_CHECK);
          if (isset($response['code']) && $response['code'] === COMMERCE_HIPAY_WS_STATUS_SUCCESS) {
            // Alter existing payment method instance settings.
            $settings['bank_account'] = $response;
            // 'bankInfosCheck' API resource return 'bankCountry' as a label
            // instead of country code (for example, it returns 'FRANCE' instead
            // of 'FR'), but we need country code to set the dropdown default
            // value, so we need another API call to get full country list,
            // from which we can map country label to country code.
            if (!empty($response['bankCountry'])) {
              $settings['bank_account']['bankCountry'] = commerce_hipay_ws_get_code_from_country($response['bankCountry']);
            }
          }
        }
      }
    }

    $form['bank_account']['bankName'] = array(
      '#type' => 'textfield',
      '#title' => t('Bank name'),
      '#default_value' => $settings['bank_account']['bankName'],
      '#disabled' => !empty($disable_bank_form_elements),
    );

    $form['bank_account']['bankAddress'] = array(
      '#type' => 'textfield',
      '#title' => t('Bank address'),
      '#default_value' => $settings['bank_account']['bankAddress'],
      '#disabled' => !empty($disable_bank_form_elements),
    );

    $form['bank_account']['bankZipCode'] = array(
      '#type' => 'textfield',
      '#title' => t('Bank zip code'),
      '#default_value' => $settings['bank_account']['bankZipCode'],
      '#disabled' => !empty($disable_bank_form_elements),
    );

    $form['bank_account']['bankCity'] = array(
      '#type' => 'textfield',
      '#title' => t('Bank city'),
      '#default_value' => $settings['bank_account']['bankCity'],
      '#disabled' => !empty($disable_bank_form_elements),
    );

    require_once DRUPAL_ROOT . '/includes/locale.inc';
    $options = array('' => '- select -') + country_get_list();
    $form['bank_account']['bankCountry'] = array(
      '#type' => 'select',
      '#title' => t('Bank country'),
      '#options' => $options,
      '#default_value' => $settings['bank_account']['bankCountry'],
      '#disabled' => !empty($disable_bank_form_elements),
    );

    $form['bank_account']['iban'] = array(
      '#type' => 'textfield',
      '#title' => t('IBAN'),
      '#default_value' => $settings['bank_account']['iban'],
      '#disabled' => !empty($disable_bank_form_elements),
    );

    $form['bank_account']['swift'] = array(
      '#type' => 'textfield',
      '#title' => t('SWIFT / BIC'),
      '#default_value' => $settings['bank_account']['swift'],
      '#disabled' => !empty($disable_bank_form_elements),
    );

    $form['bank_account']['acct_num'] = array(
      '#type' => 'textfield',
      '#title' => t('Account number'),
      '#default_value' => $settings['bank_account']['acct_num'],
      '#disabled' => !empty($disable_bank_form_elements),
    );

    $form['bank_account']['aba_num'] = array(
      '#type' => 'textfield',
      '#title' => t('ABA number'),
      '#default_value' => $settings['bank_account']['aba_num'],
      '#disabled' => !empty($disable_bank_form_elements),
    );

    $form['bank_account']['transit_num'] = array(
      '#type' => 'textfield',
      '#title' => t('Transit number'),
      '#default_value' => $settings['bank_account']['transit_num'],
      '#disabled' => !empty($disable_bank_form_elements),
    );

  }

  return $form;
}

/**
 * Implements hook_form_FORM_ID_alter() for rules_ui_edit_element().
 *
 * Adds custom validation for Hipay Wallet payment method settings form.
 */
function commerce_hipay_ws_form_rules_ui_edit_element_alter(&$form, &$form_state) {
  if (
    !empty($form_state['element_settings']['payment_method']['method_id'])
    && $form_state['element_settings']['payment_method']['method_id'] == 'commerce_hipay_ws'
    || !empty($form_state['element_settings']['payment_method'])
    && $form_state['element_settings']['payment_method'] == 'commerce_hipay_ws'
  ) {

    if (!empty($form_state['values']['parameter']['payment_method']['settings']['payment_method']['settings']['website']['business_line_id'])) {
      $form['parameter']['payment_method']['settings']['payment_method']['settings']['website']['topic_id']['#options'] += commerce_hipay_ws_get_website_topics_options($form_state['values']['parameter']['payment_method']['settings']['payment_method']['settings']['website']['business_line_id']);
    }

    $form['#submit'][] = 'commerce_hipay_ws_settings_form_submit';
    $form['#submit'][] = 'commerce_hipay_ws_settings_form_submit_save_vendor_account';

    // Submitted bank details.
    if (!empty($form['parameter']['payment_method']['settings']['payment_method']['settings']['bank_account'])) {
      $bank_account = $form['parameter']['payment_method']['settings']['payment_method']['settings']['bank_account'];

      // Add custom validate and submit callbacks only
      // if bank account hasn't been created yet.
      if (
        isset($bank_account['status'])
        && $bank_account['status'] == COMMERCE_HIPAY_WS_ACCOUNT_NO_BANK_INFO
      ) {
        $form['#validate'][] = 'commerce_hipay_ws_settings_form_validate_bank_account';
        $form['#submit'][] = 'commerce_hipay_ws_settings_form_submit_create_bank_account';
      }
    }
  }
}

/**
 * Form ajax callback for Website section of commerce_hipay_ws_settings_form().
 *
 * @see commerce_hipay_ws_settings_form()
 */
function commerce_hipay_ws_settings_form_ajax_callback($form, $form_state) {
  return $form['parameter']['payment_method']['settings']['payment_method']['settings']['website'];
}

/**
 * Custom payment method settings form submit callback.
 *
 * @see commerce_hipay_ws_settings_form()
 * @see  commerce_hipay_ws_form_rules_ui_edit_element_alter().
 */
function commerce_hipay_ws_settings_form_submit(&$form, &$form_state) {
  $original_settings = $form_state['values']['parameter']['payment_method']['settings']['payment_method']['settings']['settings'];
  if (empty($original_settings['api_password'])) {
    drupal_set_message(t("But wait! There's more!"), 'warning');
    $form_state['redirect'] = current_path();
  }
}

/**
 * Validates submitted bank account details.
 *
 * @see commerce_hipay_ws_settings_form()
 * @see commerce_hipay_ws_form_rules_ui_edit_element_alter().
 */
function commerce_hipay_ws_settings_form_validate_bank_account(&$form, &$form_state) {
  // Submitted bank details.
  $bank_account = $form_state['values']['parameter']['payment_method']['settings']['payment_method']['settings']['bank_account'];

  // Run the validation only if bank country was selected.
  if (!empty($bank_account['bankCountry'])) {
    // Get all required fields for selected country from Hipay API.
    $response = commerce_hipay_ws_api_get_bank_fields($bank_account['bankCountry']);

    // If any of the required fields is empty, set form error.
    if (!empty($response['fields']['item'])) {
      foreach ($response['fields']['item'] as $field) {
        if ($field['code'] != 'bankCountry' && empty($bank_account[$field['code']])) {
          form_set_error('parameter][payment_method][settings][payment_method][settings][bank_account][' . $field['code'], t('Bank @field_label is required.', array(
            '@field_label' => $field['label'],
          )));
        }
      }
    }
  }
}

/**
 * Creates a bank account in Hipay Wallet.
 *
 * @param array $bank_account
 *   An array of bank account details.
 *
 * @return bool|void
 */
function commerce_hipay_ws_settings_form_submit_create_bank_account(&$form, &$form_state) {
  $bank_account = $form_state['values']['parameter']['payment_method']['settings']['payment_method']['settings']['bank_account'];

  // If bank country was not selected, do not try to create the bank account.
  if (empty($bank_account['bankCountry'])) {
    return;
  }

  // Do the API call.
  if (!$response = commerce_hipay_ws_api_request(COMMERCE_HIPAY_WS_RESOURCE_SOAP_BANK_INFOS_REGISTER, $bank_account)) {
    drupal_set_message(t('There was an error calling Hipay Wallet API. See log for more details.'), 'error');
    return FALSE;
  }

  // If an error code was returned in the response.
  if (!isset($response['code']) || $response['code'] !== COMMERCE_HIPAY_WS_STATUS_SUCCESS) {
    drupal_set_message(t('There was an error creating bank account at Hipay Wallet (@error_code): @error_description', array(
      '@error_code' => $response['code'],
      '@error_description' => $response['description'],
    )), 'error');
    return FALSE;
  }

  drupal_set_message(t('Bank details have been successfully registered in your Hipay Wallet account.'));
  return $response;
}

/**
 * @TODO: Get rid of this.
 */
function commerce_hipay_ws_settings_form_submit_save_vendor_account(&$form, &$form_state) {
  // Submitted payment method settings.
  $settings = $form_state['values']['parameter']['payment_method']['settings']['payment_method']['settings'];

  $record = array(
    'account_id' => $settings['account_id'],
    'store_id' => 0,
    'email' => $settings['email'],
    'hipay_vendor_account' => array(
      'userAccountId' => $settings['account_id'],
      'wsLogin' => $settings['api_username'],
      'wsPassword' => $settings['api_password'],
    ),
  );

  if ($account = commerce_hipay_ws_account_load_by_account_id($settings['account_id'])) {
    $record = array_replace_recursive($account, $record);
  }

  commerce_hipay_ws_account_save($record);
}

/**
 * Menu item callback: allows for custom calls to Hipay Wallet API.
 *
 * @see commerce_hipay_ws_menu()
 */
function commerce_hipay_ws_soap($resource) {
  $parameters = commerce_hipay_ws_get_feedback();

  $response = commerce_hipay_ws_api_request($resource, $parameters);

  if (function_exists('kpr')) {
    kpr($response);
  }
  else {
    var_dump($response);
  }
}

/**
 * Performs a call to Hipay Wallet API.
 *
 * @param string $resource
 *   Hipay Wallet API resource.
 * @param array $request_data
 *   A string of parameters to be sent to Hipay Wallet API.
 * @param array $context
 *   An associative array containing additional information about the request.
 * @param bool $add_default_parameters
 *   A boolean indicating whether the default API access credentials should be
 *   automatically added to the API call parameters.
 *
 * @return array
 *   An array of Hipay Wallet API response parameters.
 */
function commerce_hipay_ws_api_request($resource, $parameters = array(), $context = array(), $add_default_parameters = TRUE) {
  // If no specific payment method instance was requested in function parameter,
  // load and use the first active 'commerce_hipay_ws' payment method instance.
  if (empty($context['payment_method_instance'])) {
    // Return if Hipay Wallet payment method instance has not been enabled yet.
    if (!$context['payment_method_instance'] = commerce_hipay_ws_payment_method_instance()) {
      watchdog('commerce_hipay_ws', 'Unable to call Hipay API: payment method instance does not exist or is not enabled.', array(), WATCHDOG_ERROR);
      return FALSE;
    }
  }

  // Return if Hipay Wallet payment method instance has not been configured yet.
  if (empty($context['payment_method_instance']['settings'])) {
    watchdog('commerce_hipay_ws', 'Unable to call Hipay API: payment method instance is not configured.', array(), WATCHDOG_ERROR);
    return FALSE;
  }

  // By default, add API access credentials to API call parameters, allowing
  // them to be overriden by parameters provided in the function call.
  if ($add_default_parameters) {
    $parameters = array_replace_recursive(array(
      'wsLogin' => $context['payment_method_instance']['settings']['api_username'],
      'wsPassword' => $context['payment_method_instance']['settings']['api_password'],
      'entity' => $context['payment_method_instance']['settings']['entity'],
      'locale' => $context['payment_method_instance']['settings']['locale'],
    ), $parameters);
  }

  // Allow other modules to alter the $parameters array.
  drupal_alter('commerce_hipay_ws_api_request', $parameters, $resource, $context);

  $api_type = commerce_hipay_ws_get_api_type($resource);

  // Log the request data if request logging is enabled.
  if (!empty($context['payment_method_instance']['settings']['api']['logging']['request'])) {
    watchdog('commerce_hipay_ws', '@api_type @resource: request: !parameters', array(
      '@api_type' => $api_type,
      '@resource' => $resource,
      '!parameters' => '<pre>' . var_export($parameters, TRUE) . '</pre>',
    ), WATCHDOG_DEBUG);
  }

  // The resource name is exactly the same for getting both business lines as
  // well as website topics (just 'get'). Therefore in these 2 cases our
  // definition includes also the resource type, and in both cases it needs
  // to be exploded to get its proper value.
  $resource_path = $resource;
  $resource_elements = explode('/', $resource_path);
  $resource = array_pop($resource_elements);

  $url = commerce_hipay_ws_get_server_url($context['payment_method_instance'], $api_type) . commerce_hipay_ws_get_resource_type($resource_path) . $resource;

  // Call the relevant Hipay Wallet API type.
  $callback = __FUNCTION__ . '_' . $api_type;
  if (function_exists($callback)) {
    $response = $callback($url, $resource, $parameters, $context);
  }
  else {
    watchdog('commerce_hipay_ws', 'Unable to call Hipay Wallet API: unable to find a function to call @api_type API: @callback().', array(
      '@api_type' => $api_type,
      '@callback' => $callback,
    ), WATCHDOG_ERROR);
    return FALSE;
  }

  // Allow other modules to process the response.
  foreach (module_implements('commerce_hipay_ws_api_response') as $module) {
    $function = $module . '_commerce_hipay_ws_api_response';
    $function($response, $parameters, $resource, $context);
  }

  return $response;
}

/**
 * Performs a call to Hipay Wallet SOAP API.
 *
 * @param string $url
 *   Hipay Wallet SOAP API URL.
 * @param string $resource
 *   Hipay Wallet SOAP API resource.
 * @param array $parameters
 *   An array of parameters to be sent to Hipay Wallet SOAP API.
 * @param array $context
 *   An associative array containing additional information about the request.
 *
 * @return array
 *   An array of Hipay Wallet SOAP API response parameters.
 */
function commerce_hipay_ws_api_request_soap($url, $resource, $parameters, $context) {
  $options = array(
    'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP,
    'cache_wsdl' => WSDL_CACHE_NONE,
    'soap_version' => SOAP_1_1,
    'encoding' => 'UTF-8'
  );

  // Perform the call to Hipay Wallet SOAP API.
  try {
    $client = new SoapClient($url . '?wsdl', $options);
    $result = $client->$resource(array('parameters' => $parameters));
  }
  // If there was any kind of error calling the API...
  catch (SoapFault $fault) {
    watchdog('commerce_hipay_ws', '@api_type @resource: SOAPFault: @faultstring<br />Request URL: @request_url<br />Request parameters: !parameters', array(
      '@api_type' => COMMERCE_HIPAY_WS_API_TYPE_SOAP,
      '@resource' => $resource,
      '@faultstring' => $fault->faultstring,
      '@request_url' => $url,
      '!parameters' => '<pre>' . var_export($parameters, TRUE) . '</pre>',
    ), WATCHDOG_ERROR);

    // Create response object in the same format as decoded Hipay API response.
    return array(
      'code' => $fault->faultcode,
      'description' => t($fault->faultstring),
    );
  }

  // Log the request data if request logging is enabled.
  if (!empty($context['payment_method_instance']['settings']['api']['logging']['response'])) {
    watchdog('commerce_hipay_ws', '@api_type @resource: response: !response', array(
      '@api_type' => COMMERCE_HIPAY_WS_API_TYPE_SOAP,
      '@resource' => $resource,
      '!response' => '<pre>' . var_export($result, TRUE) . '</pre>',
    ), WATCHDOG_DEBUG);
  }

  $response_key = $resource . 'Result';
  if (!isset($result->$response_key)) {
    watchdog('commerce_hipay_ws', '@api_type @resource: Unable to find @response_key parameter in API response: !response', array(
      '@api_type' => COMMERCE_HIPAY_WS_API_TYPE_SOAP,
      '@resource' => $resource,
      '@response_key' => $response_key,
      '!response' => '<pre>' . var_export($result, TRUE) . '</pre>',
    ), WATCHDOG_ERROR);

    // Create response object in the same format as decoded Hipay API response.
    return array(
      'code' => 'Response',
      'description' => t('Unable to parse Hipay Wallet API response.'),
    );
  }

  return json_decode(json_encode($result->$response_key), TRUE);
}

/**
 * Performs a call to Hipay Wallet REST API.
 *
 * @param string $url
 *   Hipay Wallet REST API URL.
 * @param string $resource
 *   Not really used in case of REST API (just for logging).
 * @param array $parameters
 *   An array of parameters to be sent to Hipay Wallet REST API.
 * @param array $context
 *   An associative array containing additional information about the request.
 *
 * @return array
 *   An array of Hipay Wallet REST API response parameters.
 */
function commerce_hipay_ws_api_request_rest($url, $resource, $parameters, $context) {
  $ch = curl_init($url);

  curl_setopt($ch, CURLOPT_USERPWD, $context['payment_method_instance']['settings']['api_username'] . ':' . $context['payment_method_instance']['settings']['api_password']);
  curl_setopt($ch, CURLOPT_HTTPHEADER, array(
    'Accept: application/json',
  ));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_FAILONERROR, FALSE);
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);
  curl_setopt($ch, CURLOPT_HEADER, FALSE);
  curl_setopt($ch, CURLOPT_POST, TRUE);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $parameters);

  // Execute the request.
  $result = curl_exec($ch);

  // Log the cURL response if response logging is enabled.
  if (!empty($context['payment_method_instance']['settings']['api']['logging']['response'])) {
    watchdog('commerce_hipay_ws', '@api_type @resource: cURL response: !response', array(
      '@api_type' => COMMERCE_HIPAY_WS_API_TYPE_REST,
      '@resource' => $resource,
      '!response' => '<pre>' . var_export($result, TRUE) . '</pre>',
    ), WATCHDOG_DEBUG);
  }

  // If there was an error performing cURL request.
  if ($error = curl_error($ch)) {
    // Log cURL error.
    watchdog('commerce_hipay_ws', '@api_type @resource: cURL error: @error', array(
      '@api_type' => COMMERCE_HIPAY_WS_API_TYPE_REST,
      '@resource' => $resource,
      '@error' => $error,
    ), WATCHDOG_ERROR);

    // Create response object in the same format as decoded Hipay API exception
    // response.
    $response = array(
      'code' => curl_errno($ch),
      'message' => 'cURL error',
      'description' => $error,
    );
  }
  // No cURL errors, the request worked fine.
  else {
    // Decode JSON response into array.
    $response = json_decode($result, TRUE);

    // Log the response if response logging is enabled.
    if (!empty($context['payment_method_instance']['settings']['api']['logging']['response'])) {
      watchdog('commerce_hipay_ws', '@api_type @resource: response: !response', array(
        '@api_type' => COMMERCE_HIPAY_WS_API_TYPE_REST,
        '@resource' => $resource,
        '!response' => '<pre>' . var_export($response, TRUE) . '</pre>',
      ), WATCHDOG_DEBUG);
    }
  }

  curl_close($ch);

  return $response;
}

/**
 * Implements hook_commerce_hipay_ws_api_request_alter().
 */
function commerce_hipay_ws_commerce_hipay_ws_api_request_alter(&$parameters, $resource, $context) {
  // If API test mode is enabled, when creating new user accounts in Hipay
  // Wallet, alter the email address with current timestamp, to avoid Hipay
  // complaining that a user account with this email address has already
  // been created.
  if (
    !empty($context['payment_method_instance']['settings']['api']['test_mode'])
    && $resource == COMMERCE_HIPAY_WS_RESOURCE_SOAP_CREATE_FULL_USER_ACCOUNT
    && !empty($parameters['userAccountBasic']['email'])
  ) {
    $email_elements = explode('@', $parameters['userAccountBasic']['email']);
    $email_elements[0] .= '+' . REQUEST_TIME;
    $parameters['userAccountBasic']['email'] = implode('@', $email_elements);
  }
}

/**
 * Processes XML feedback.
 *
 * @param array $xml_string
 *   A string containing XML feedback received from Hipay Wallet API.
 */
function commerce_hipay_ws_callback_notification_process_feedback_xml($xml_string) {
  if ($xml = simplexml_load_string($xml_string)) {
    $feedback_xml = json_decode(json_encode($xml->result), TRUE);

    if (!empty($feedback_xml['operation'])) {
      switch ($feedback_xml['operation']) {

        // Hipay user account has been identified.
        case 'identification':
          commerce_hipay_ws_api_user_account_validate_notification($feedback_xml);
          break;

        // Hipay bank account information has been validated.
        case 'bank_info_validation':
          commerce_hipay_ws_api_bank_account_validate_notification($feedback_xml);
          break;

        case 'withdraw_validation':
          $withdrawal = commerce_hipay_ws_withdrawal_load_by_withdrawal_id($feedback_xml['transid']);
          $withdrawal['notification'] = $feedback_xml;
          $transfer['status'] = $feedback_xml['status'];
          commerce_hipay_ws_withdrawal_save($withdrawal);
          break;

      }
    }

  }
}

/**
 * Callback page for gateway server-to-server notifications.
 *
 * @see commerce_hipay_ws_menu().
 */
function commerce_hipay_ws_callback_notification() {
  // Get Hipay Wallet API notification feedback.
  $feedback = commerce_hipay_ws_get_feedback();

  // Log the feedback.
  watchdog('commerce_hipay_ws', 'Notification received: !feedback', array(
    '!feedback' => '<pre>' . check_plain(var_export($feedback, TRUE)) . '</pre>',
  ), WATCHDOG_DEBUG);

  // Process received XML feedback.
  if (!empty($feedback['xml'])) {
    commerce_hipay_ws_callback_notification_process_feedback_xml($feedback['xml']);
  }

  // Allow other modules to process the notification.
  foreach (module_implements('commerce_hipay_ws_api_notification') as $module) {
    $function = $module . '_commerce_hipay_ws_api_notification';
    $function($feedback);
  }
}

/**
 * Returns parameters returned by Hipay TPP API.
 *
 * @return array
 *   An associative array containing the Hipay feedback taken from the $_GET
 *   and $_POST superglobals, excluding 'q'.
 */
function commerce_hipay_ws_get_feedback() {
  $feedback = array_replace_recursive($_GET, $_POST);
  unset($feedback['q']);
  return $feedback;
}

/**
 * Returns full URL of Hipay Wallet API endpoint.
 *
 * @param array $payment_method
 *   Payment method instance definition array.
 * @param array $api_type
 *   API type to use for the call.
 *
 * @return string
 *   The full URL of Hipay Wallet API endpoint.
 */
function commerce_hipay_ws_get_server_url($payment_method, $api_type) {
  $constant_name = 'COMMERCE_HIPAY_WS_ENDPOINT_' . $api_type . '_' . $payment_method['settings']['endpoint'];
  return constant(strtoupper($constant_name));
}

/**
 * Returns the API type to call based on the requested resource.
 *
 * @param string $resource
 *   A resource to call.
 *
 * @return string
 *   An API type to use for the call.
 */
function commerce_hipay_ws_get_api_type($resource) {
  switch ($resource) {
    case COMMERCE_HIPAY_WS_RESOURCE_REST_BUSINESS_LINES:
    case COMMERCE_HIPAY_WS_RESOURCE_REST_WEBSITE_TOPICS:
    case COMMERCE_HIPAY_WS_RESOURCE_REST_LOCALE_CODES:
    case COMMERCE_HIPAY_WS_RESOURCE_REST_LOCALE_COUNTRIES:
    case COMMERCE_HIPAY_WS_RESOURCE_REST_LOCALE_TIMEZONES:
    case COMMERCE_HIPAY_WS_RESOURCE_REST_UPLOAD:
      return COMMERCE_HIPAY_WS_API_TYPE_REST;
    default:
      return COMMERCE_HIPAY_WS_API_TYPE_SOAP;
  }
}

/**
 * Returns the resource type to call based on the requested resource.
 *
 * @param string $resource
 *   A resource to call.
 *
 * @return string
 *   A resource type to use for the call.
 */
function commerce_hipay_ws_get_resource_type($resource) {
  switch ($resource) {
    // SOAP.
    case COMMERCE_HIPAY_WS_RESOURCE_SOAP_TRANSFER:
      return COMMERCE_HIPAY_WS_RESOURCE_TYPE_SOAP_TRANSFER;
    case COMMERCE_HIPAY_WS_RESOURCE_SOAP_WITHDRAWAL:
      return COMMERCE_HIPAY_WS_RESOURCE_TYPE_SOAP_WITHDRAWAL;
    case COMMERCE_HIPAY_WS_RESOURCE_SOAP_LOCALE_CODES:
    case COMMERCE_HIPAY_WS_RESOURCE_SOAP_LOCALE_TIMEZONES:
    case COMMERCE_HIPAY_WS_RESOURCE_SOAP_LOCALE_COUNTRIES:
      return COMMERCE_HIPAY_WS_RESOURCE_TYPE_SOAP_LOCALE;
    case COMMERCE_HIPAY_WS_RESOURCE_SOAP_GET_BUSINESS_LINES:
      return COMMERCE_HIPAY_WS_RESOURCE_TYPE_SOAP_BUSINESS_LINES;
    case COMMERCE_HIPAY_WS_RESOURCE_SOAP_GET_WEBSITE_TOPICS:
      return COMMERCE_HIPAY_WS_RESOURCE_TYPE_SOAP_WEBSITE_TOPICS;
    // REST.
    case COMMERCE_HIPAY_WS_RESOURCE_REST_BUSINESS_LINES:
    case COMMERCE_HIPAY_WS_RESOURCE_REST_WEBSITE_TOPICS:
      return COMMERCE_HIPAY_WS_RESOURCE_TYPE_REST_TOOLS;
    case COMMERCE_HIPAY_WS_RESOURCE_REST_LOCALE_CODES:
    case COMMERCE_HIPAY_WS_RESOURCE_REST_LOCALE_COUNTRIES:
    case COMMERCE_HIPAY_WS_RESOURCE_REST_LOCALE_TIMEZONES:
      return COMMERCE_HIPAY_WS_RESOURCE_TYPE_REST_LOCALE;
    case COMMERCE_HIPAY_WS_RESOURCE_REST_UPLOAD:
      return COMMERCE_HIPAY_WS_RESOURCE_TYPE_REST_IDENTIFICATION;
    // SOAP again.
    default:
      return COMMERCE_HIPAY_WS_RESOURCE_TYPE_SOAP_ACCOUNT;
  }
}

/**
 * Returns all payment method instances for a given payment method id.
 *
 * @param $method_id
 *   A payment method id
 * @param $include_disabled
 *   Return enabled and disabled instances
 *
 * @return
 *   An array of all loaded payment method instances keyed by instance_id
 */
function commerce_hipay_ws_payment_method_instances($method_id = 'commerce_hipay_ws', $include_disabled = FALSE) {
  $cached_ids = &drupal_static(__FUNCTION__, array());
  $include_disabled = !empty($include_disabled);

  if (!array_key_exists($method_id, $cached_ids)) {
    $cached_ids[$method_id] = array();

    // load all rules ... no easier way
    $rules_configs = rules_config_load_multiple(FALSE);

    // find all rules with an action to enable this method
    foreach ($rules_configs as $rule_name => $rule) {
      // Only rules and sub-types have actions.
      if (!($rule instanceof Rule)) {
        continue;
      }

      // fast skip if rule does not depend on commerce_payment
      if (!isset($rule->dependencies) || !in_array('commerce_payment', $rule->dependencies)) {
        continue;
      }

      foreach ($rule->actions() as $action) {
        // skip any actions that are not simple rules actions, ie loops
        if (!($action instanceof RulesAction)) {
          continue;
        }

        if ($action->getElementName() == 'commerce_payment_enable_' . $method_id) {
          $instance_id = commerce_payment_method_instance_id($method_id, $rule);
          $cached_ids[$method_id][$instance_id] = $rule->active;
          continue 2; // skip to next rule
        }
      }
    }
  }

  // load instances
  $instances = array();
  if (!empty($cached_ids[$method_id])) {
    foreach ($cached_ids[$method_id] as $instance_id => $instance_active) {
      if ($instance_active || $include_disabled) {
        $instances[$instance_id] = commerce_payment_method_instance_load($instance_id);
      }
    }
  }

  return $instances;
}

/**
 * Returns first payment method instance for a given payment method id.
 *
 * @param $method_id
 *   A payment method id
 * @param $include_disabled
 *   Return enabled and disabled instances
 *
 * @return
 *   An array of payment method instance details.
 */
function commerce_hipay_ws_payment_method_instance($method_id = 'commerce_hipay_ws', $include_disabled = FALSE) {
  if ($instances = commerce_hipay_ws_payment_method_instances($method_id, $include_disabled)) {
    return reset($instances);
  }
}

/**
 * Combines multiple non-empty address elements into one string.
 *
 * $param array $address
 *   An array of address values.
 * $param array $element_names
 *   An array of address element names ($address keys) which values to combine.
 *
 * @return string
 *   A string containing multiple non-empty address elements combined.
 */
function commerce_hipay_ws_combine_address_lines($address, $element_names) {
  $nonempty_elements = array();

  foreach ($element_names as $element_name) {
    if (!empty($address[$element_name])) {
      $nonempty_elements[] = $address[$element_name];
    }
  }

  return implode(', ', $nonempty_elements);
}

/**
 * Returns a list of locale identifiers supported by Hipay Wallet.
 *
 * @return array
 *   An array of locale identifiers supported by Hipay Wallet.
 */
function commerce_hipay_ws_get_supported_languages() {
  return array(
    'de_DE' => t('deutsch'),
    'en_GB' => t('english'),
    'es_ES' => t('español'),
    'fr_FR' => t('français'),
    'it_IT' => t('italiano'),
    'nl_BE' => t('nederlands'),
    'pt_PT' => t('português'),
    'pt_BR' => t('português (Brasil)'),
  );
}
