<?php

/**
 * @file
 * Provides integration with Hipay Wallet.
 */

require_once 'includes/commerce_hipay_ws.admin.inc';
require_once 'includes/commerce_hipay_ws.codes.inc';
require_once 'includes/commerce_hipay_ws.constants.inc';
require_once 'includes/entities/commerce_hipay_ws.entity.user_account.inc';
require_once 'includes/entities/commerce_hipay_ws.entity.bank_account.inc';
require_once 'includes/entities/commerce_hipay_ws.entity.transfer.inc';
require_once 'includes/entities/commerce_hipay_ws.entity.withdrawal.inc';
require_once 'includes/entities/commerce_hipay_ws.entity.file.inc';
require_once 'includes/entities/commerce_hipay_ws.entity_ui.user_account.inc';
require_once 'includes/entities/commerce_hipay_ws.entity_ui.bank_account.inc';
require_once 'includes/entities/commerce_hipay_ws.entity_ui.transfer.inc';
require_once 'includes/entities/commerce_hipay_ws.entity_ui.withdrawal.inc';
require_once 'includes/api/commerce_hipay_ws.api.inc';
require_once 'includes/api/commerce_hipay_ws.api.user_account.inc';
require_once 'includes/api/commerce_hipay_ws.api.bank_account.inc';
require_once 'includes/api/commerce_hipay_ws.api.transfer.inc';
require_once 'includes/api/commerce_hipay_ws.api.withdrawal.inc';
require_once 'includes/api/commerce_hipay_ws.api.upload.inc';

/**
 * Implements hook_entity_info().
 */
function commerce_hipay_ws_entity_info() {
  return commerce_hipay_ws_user_account_entity_info()
    + commerce_hipay_ws_bank_account_entity_info()
    + commerce_hipay_ws_transfer_entity_info()
    + commerce_hipay_ws_withdrawal_entity_info();
}

/**
 * Implements hook_commerce_payment_method_info().
 *
 * @see hook_commerce_payment_method_info()
 */
function commerce_hipay_ws_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['commerce_hipay_ws'] = array(
    'title' => 'Hipay Wallet',
    'description' => t('Hipay Wallet'),
    'checkout' => FALSE,
    'terminal' => FALSE,
  );

  return $payment_methods;
}

/**
 * Implements hook_permission().
 */
function commerce_hipay_ws_permission() {
  $permissions = array(
    'administer Hipay Wallet configuration' => array(
      'title' => t('Administer Hipay Wallet configuration'),
      'description' => t('Allows users to administer Hipay Wallet configuration.'),
      'restrict access' => TRUE,
    ),
    'access Hipay Wallet API calls payload' => array(
      'title' => t('Access Hipay Wallet API calls payload'),
      'description' => t('Allows users to administer Hipay Wallet configuration.'),
      'restrict access' => TRUE,
    ),
  );

  $permissions += commerce_entity_access_permissions('commerce_hipay_ws_user_account');
  $permissions += commerce_entity_access_permissions('commerce_hipay_ws_bank_account');
  $permissions += commerce_entity_access_permissions('commerce_hipay_ws_transfer');
  $permissions += commerce_entity_access_permissions('commerce_hipay_ws_withdrawal');

  return $permissions;
}

/**
 * Implements hook_menu().
 */
function commerce_hipay_ws_menu() {
  $items = array();

  $items['admin/commerce/hipay-wallet'] = array(
    'title' => 'Hipay Wallet',
    'description' => 'Manage Hipay Wallet settings.',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer Hipay Wallet configuration'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );

  // Server-to-server notification URL.
  $items['commerce-hipay-ws/notify'] = array(
    'page callback' => 'commerce_hipay_ws_callback_notification',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // Testing menu item for direct calls to the API.
  $items['commerce-hipay-ws/soap/%'] = array(
    'page callback' => 'commerce_hipay_ws_soap',
    'page arguments' => array(2),
    'access arguments' => array('access devel information'),
    'type' => MENU_CALLBACK,
  );

  // User accounts.
  $items += commerce_hipay_ws_user_account_menu();

  // Bank accounts.
  $items += commerce_hipay_ws_bank_account_menu();

  // Transfers.
  $items += commerce_hipay_ws_transfer_menu();

  // Withdrawals.
  $items += commerce_hipay_ws_withdrawal_menu();

  return $items;
}

/**
 * Implements hook_theme().
 */
function commerce_hipay_ws_theme() {
  return array(
    'kyc_documents_table' => array(
      'variables' => array('items' => NULL),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function commerce_hipay_ws_views_api() {
  return array(
    'api' => 3,
    'version' => '3.0',
    'path' => drupal_get_path('module', 'commerce_hipay_ws') . '/includes/views',
  );
}

/**
 * Implements hook_entity_presave().
 */
function commerce_hipay_ws_entity_presave($entity, $type) {
  // When saving a Hipay bank account entity, check if we already have its
  // related Hipay user account ID, and set it if available.
  if ($type == 'commerce_hipay_ws_bank_account' && empty($entity->hipay_account_id)) {
    $wrapper = entity_metadata_wrapper($type, $entity);
    $hipay_user_account = $wrapper->hipay_ws_bank_user_account->value();
    $entity->hipay_account_id = $hipay_user_account->hipay_account_id;
  }
}

/**
 * Implements hook_entity_insert().
 */
function commerce_hipay_ws_entity_insert($entity, $type) {
  // Create new user account in Hipay Wallet.
  if ($type == 'commerce_hipay_ws_user_account') {
    $payment_method_instance = commerce_hipay_ws_payment_method_instance();
    // Only if payment method is enabled (otherwise the instance would be empty)
    // and configured to create accounts in Hipay Wallet immediately.
    if (!empty($payment_method_instance['settings']['api']['create_account_immediately'])) {
      $hipay_user_account = commerce_hipay_ws_user_account_load($entity->user_account_id);
      $response = commerce_hipay_ws_api_user_account_create($hipay_user_account);
      if (!isset($response['code']) || $response['code'] !== COMMERCE_HIPAY_WS_STATUS_SUCCESS) {
        drupal_set_message(t('Error creating a new user account in Hipay Wallet: @error.', array('@error' => $response['description'])), 'error');
      }
      else {
        drupal_set_message(t('User account created in Hipay Wallet.'));
      }
    }
  }

  // Create new bank account in Hipay Wallet.
  if ($type == 'commerce_hipay_ws_bank_account') {
    $payment_method_instance = commerce_hipay_ws_payment_method_instance();
    // Only if payment method is enabled (otherwise the instance would be empty)
    // and configured to create accounts in Hipay Wallet immediately.
    if (!empty($payment_method_instance['settings']['api']['create_account_immediately'])) {
      $hipay_bank_account = commerce_hipay_ws_bank_account_load($entity->bank_account_id);
      $response = commerce_hipay_ws_api_bank_account_create($hipay_bank_account);
      if (!isset($response['code']) || $response['code'] !== COMMERCE_HIPAY_WS_STATUS_SUCCESS) {
        drupal_set_message(t('Error creating a new bank account in Hipay Wallet: @error.', array('@error' => $response['description'])), 'error');
      }
      else {
        drupal_set_message(t('Bank account created in Hipay Wallet.'));
      }
    }
  }
}

/**
 * Implements hook_entity_update().
 */
function commerce_hipay_ws_entity_update($entity, $type) {
  if ($type == 'commerce_hipay_ws_user_account') {
    $payment_method_instance = commerce_hipay_ws_payment_method_instance();
    // Only if payment method is enabled (otherwise the instance would be empty)
    // and configured to create accounts in Hipay Wallet immediately.
    if (!empty($payment_method_instance['settings']['api']['create_account_immediately'])) {
      // Reload the entity to have fully populated KYC document file fields.
      $hipay_user_account = commerce_hipay_ws_user_account_load($entity->user_account_id);
      commerce_hipay_ws_user_account_upload_kyc_documents($hipay_user_account);
    }
  }
}

/**
 * Menu item callback: allows for custom calls to Hipay Wallet API.
 *
 * @see commerce_hipay_ws_menu()
 */
function commerce_hipay_ws_soap($resource) {
  $parameters = commerce_hipay_ws_get_feedback();

  $response = commerce_hipay_ws_api_request($resource, $parameters);

  if (function_exists('kpr')) {
    kpr($response);
  }
  else {
    var_dump($response);
  }
}

/**
 * Performs a call to Hipay Wallet API.
 *
 * @param string $resource
 *   Hipay Wallet API resource.
 * @param array $request_data
 *   A string of parameters to be sent to Hipay Wallet API.
 * @param array $context
 *   An associative array containing additional information about the request.
 * @param bool $add_default_parameters
 *   A boolean indicating whether the default API access credentials should be
 *   automatically added to the API call parameters.
 *
 * @return array
 *   An array of Hipay Wallet API response parameters.
 */
function commerce_hipay_ws_api_request($resource, $parameters = array(), $context = array(), $add_default_parameters = TRUE) {
  $payment_method_instance = commerce_hipay_ws_payment_method_instance();
  if (!empty($context['payment_method_instance'])) {
    $payment_method_instance = array_replace_recursive($payment_method_instance, $context['payment_method_instance']);
  }
  $context['payment_method_instance'] = $payment_method_instance;

  // Return if Hipay Wallet payment method instance has not been enabled yet.
  if (empty($context['payment_method_instance'])) {
    watchdog('commerce_hipay_ws', 'Unable to call Hipay API: payment method instance does not exist or is not enabled.', array(), WATCHDOG_ERROR);
    return FALSE;
  }

  // Return if Hipay Wallet payment method instance has not been configured yet.
  if (empty($context['payment_method_instance']['settings'])) {
    watchdog('commerce_hipay_ws', 'Unable to call Hipay API: payment method instance is not configured.', array(), WATCHDOG_ERROR);
    return FALSE;
  }

  // By default, add API access credentials to API call parameters, allowing
  // them to be overriden by parameters provided in the function call.
  if ($add_default_parameters) {
    $default_currency_code = commerce_default_currency();
    $currency_code = !empty($context['currency_code']) ? $context['currency_code'] : $default_currency_code;
    $parameters = array_replace_recursive(array(
      'wsLogin' => !empty($context['payment_method_instance']['settings']['accounts'][$currency_code]['api_username']) ? $context['payment_method_instance']['settings']['accounts'][$currency_code]['api_username'] : $context['payment_method_instance']['settings']['accounts'][$default_currency_code]['api_username'],
      'wsPassword' => !empty($context['payment_method_instance']['settings']['accounts'][$currency_code]['api_password']) ? $context['payment_method_instance']['settings']['accounts'][$currency_code]['api_password'] : $context['payment_method_instance']['settings']['accounts'][$default_currency_code]['api_password'],
      'entity' => $context['payment_method_instance']['settings']['entity'],
      'locale' => $context['payment_method_instance']['settings']['locale'],
    ), $parameters);
  }

  // Allow other modules to alter the $parameters array.
  drupal_alter('commerce_hipay_ws_api_request', $parameters, $resource, $context);

  $api_type = commerce_hipay_ws_get_api_type($resource);

  // Log the request data if request logging is enabled.
  if (!empty($context['payment_method_instance']['settings']['api']['logging']['request'])) {
    watchdog('commerce_hipay_ws', '@api_type @resource: request: !parameters', array(
      '@api_type' => $api_type,
      '@resource' => $resource,
      '!parameters' => '<pre>' . var_export($parameters, TRUE) . '</pre>',
    ), WATCHDOG_DEBUG);
  }

  // The resource name is exactly the same for getting both business lines as
  // well as website topics (just 'get'). Therefore in these 2 cases our
  // definition includes also the resource type, and in both cases it needs
  // to be exploded to get its proper value.
  $resource_path = $resource;
  $resource_elements = explode('/', $resource_path);
  $resource = array_pop($resource_elements);

  $url = commerce_hipay_ws_get_server_url($context['payment_method_instance'], $api_type) . commerce_hipay_ws_get_resource_type($resource_path) . $resource;

  // Call the relevant Hipay Wallet API type.
  $callback = __FUNCTION__ . '_' . $api_type;
  if (function_exists($callback)) {
    $response = $callback($url, $resource, $parameters, $context);
  }
  else {
    watchdog('commerce_hipay_ws', 'Unable to call Hipay Wallet API: unable to find a function to call @api_type API: @callback().', array(
      '@api_type' => $api_type,
      '@callback' => $callback,
    ), WATCHDOG_ERROR);
    return FALSE;
  }

  // Allow other modules to process the response.
  foreach (module_implements('commerce_hipay_ws_api_response') as $module) {
    $function = $module . '_commerce_hipay_ws_api_response';
    $function($response, $parameters, $resource, $context);
  }

  return $response;
}

/**
 * Performs a call to Hipay Wallet SOAP API.
 *
 * @param string $url
 *   Hipay Wallet SOAP API URL.
 * @param string $resource
 *   Hipay Wallet SOAP API resource.
 * @param array $parameters
 *   An array of parameters to be sent to Hipay Wallet SOAP API.
 * @param array $context
 *   An associative array containing additional information about the request.
 *
 * @return array
 *   An array of Hipay Wallet SOAP API response parameters.
 */
function commerce_hipay_ws_api_request_soap($url, $resource, $parameters, $context) {
  $options = array(
    'compression' => SOAP_COMPRESSION_ACCEPT | SOAP_COMPRESSION_GZIP,
    'cache_wsdl' => WSDL_CACHE_NONE,
    'soap_version' => SOAP_1_1,
    'encoding' => 'UTF-8',
    'cache_wsdl' => WSDL_CACHE_DISK,
    'trace' => 1,
    'connection_timeout' => 10,
  );

  $start = microtime(TRUE);

  // Perform the call to Hipay Wallet SOAP API.
  try {
    $client = new SoapClient($url . '?wsdl', $options);
    $result = $client->$resource(array('parameters' => $parameters));

    if ($client instanceof SoapClient) {
      // Log SOAP verbose information to a file.
      if (!empty($context['payment_method_instance']['settings']['api']['logging']['request']) || !empty($context['payment_method_instance']['settings']['api']['logging']['response'])) {
        $soap_debug_file = file_directory_temp() . '/soap.log';
        $fh = fopen($soap_debug_file, "a+");
        fputs($fh, $client->__getLastRequestHeaders());
        fputs($fh, $client->__getLastRequest() . PHP_EOL);
        fputs($fh, $client->__getLastResponseHeaders());
        fputs($fh, $client->__getLastResponse() . PHP_EOL);
        fclose($fh);
      }
    }
  }
  // If there was any kind of error calling the API...
  catch (SoapFault $fault) {
    $message = '@api_type @resource: SOAPFault: @faultstring<br />Request URL: @request_url<br />Request parameters: !parameters';
    $message_variables = array(
      '@api_type' => COMMERCE_HIPAY_WS_API_TYPE_SOAP,
      '@resource' => $resource,
      '@faultstring' => $fault->faultstring,
      '@request_url' => $url,
      '!parameters' => '<pre>' . var_export($parameters, TRUE) . '</pre>',
    );
    if ($client instanceof SoapClient) {
      $message .= '<br />SOAP request headers: !soap_request_headers<br />SOAP request: !soap_request<br />SOAP response headers: !soap_response_headers<br />SOAP response: !soap_response';
      $message_variables['!soap_request_headers'] = '<pre>' . var_export($client->__getLastRequestHeaders(), TRUE) . '</pre>';
      $message_variables['!soap_request'] = '<pre>' . htmlentities($client->__getLastRequest(), ENT_NOQUOTES) . '</pre>';
      $message_variables['!soap_response_headers'] = '<pre>' . var_export($client->__getLastResponseHeaders(), TRUE) . '</pre>';
      $message_variables['!soap_response'] = '<pre>' . htmlentities($client->__getLastResponse(), ENT_NOQUOTES) . '</pre>';
    }
    watchdog('commerce_hipay_ws', $message, $message_variables, WATCHDOG_ERROR);

    // Create response object in the same format as decoded Hipay API response.
    return array(
      'code' => $fault->faultcode,
      'description' => t($fault->faultstring),
    );
  }

  $request_time = microtime(TRUE) - $start;

  // Log the request data if request logging is enabled.
  if (!empty($context['payment_method_instance']['settings']['api']['logging']['response'])) {
    watchdog('commerce_hipay_ws', '@api_type @resource: response: !response Request time: @request_time', array(
      '@api_type' => COMMERCE_HIPAY_WS_API_TYPE_SOAP,
      '@resource' => $resource,
      '!response' => '<pre>' . htmlentities($client->__getLastResponse(), ENT_NOQUOTES) . '</pre>',
      '@request_time' => $request_time,
    ), WATCHDOG_DEBUG);
  }

  $response_key = $resource . 'Result';
  if (!isset($result->$response_key)) {
    watchdog('commerce_hipay_ws', '@api_type @resource: Unable to find @response_key parameter in API response: !response', array(
      '@api_type' => COMMERCE_HIPAY_WS_API_TYPE_SOAP,
      '@resource' => $resource,
      '@response_key' => $response_key,
      '!response' => '<pre>' . var_export($result, TRUE) . '</pre>',
    ), WATCHDOG_ERROR);

    // Create response object in the same format as decoded Hipay API response.
    return array(
      'code' => 'Response',
      'description' => t('Unable to parse Hipay Wallet API response.'),
    );
  }

  return json_decode(json_encode($result->$response_key), TRUE);
}

/**
 * Performs a call to Hipay Wallet REST API.
 *
 * @param string $url
 *   Hipay Wallet REST API URL.
 * @param string $resource
 *   Not really used in case of REST API (just for logging).
 * @param array $parameters
 *   An array of parameters to be sent to Hipay Wallet REST API.
 * @param array $context
 *   An associative array containing additional information about the request.
 *
 * @return array
 *   An array of Hipay Wallet REST API response parameters.
 */
function commerce_hipay_ws_api_request_rest($url, $resource, $parameters, $context) {
  $ch = curl_init($url);

  // Log cURL verbose information to a file.
  if (!empty($context['payment_method_instance']['settings']['api']['logging']['request']) || !empty($context['payment_method_instance']['settings']['api']['logging']['response'])) {
    $curl_debug_file = file_directory_temp() . '/curl.log';
    $fh = fopen($curl_debug_file, "a+");
    curl_setopt($ch, CURLOPT_STDERR, $fh);
    curl_setopt($ch, CURLOPT_VERBOSE, TRUE);
  }

  $default_currency_code = commerce_default_currency();
  $currency_code = !empty($context['currency_code']) ? $context['currency_code'] : $default_currency_code;
  $api_username = !empty($context['payment_method_instance']['settings']['accounts'][$currency_code]['api_username']) ? $context['payment_method_instance']['settings']['accounts'][$currency_code]['api_username'] : $context['payment_method_instance']['settings']['accounts'][$default_currency_code]['api_username'];
  $api_password = !empty($context['payment_method_instance']['settings']['accounts'][$currency_code]['api_password']) ? $context['payment_method_instance']['settings']['accounts'][$currency_code]['api_password'] : $context['payment_method_instance']['settings']['accounts'][$default_currency_code]['api_password'];

  curl_setopt($ch, CURLOPT_USERPWD, $api_username . ':' . $api_password);
  curl_setopt($ch, CURLOPT_HTTPHEADER, array(
    'Accept: application/json',
  ));
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  curl_setopt($ch, CURLOPT_FAILONERROR, FALSE);
  curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 10);
  curl_setopt($ch, CURLOPT_HEADER, FALSE);
  curl_setopt($ch, CURLOPT_POST, TRUE);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $parameters);

  $start = microtime(TRUE);

  // Execute the request.
  $result = curl_exec($ch);

  $request_time = microtime(TRUE) - $start;

  // Log the cURL response if response logging is enabled.
  if (!empty($context['payment_method_instance']['settings']['api']['logging']['response'])) {
    watchdog('commerce_hipay_ws', '@api_type @resource: cURL response: !response', array(
      '@api_type' => COMMERCE_HIPAY_WS_API_TYPE_REST,
      '@resource' => $resource,
      '!response' => '<pre>' . var_export($result, TRUE) . '</pre>',
    ), WATCHDOG_DEBUG);
  }

  // If there was an error performing cURL request.
  if ($error = curl_error($ch)) {
    // Log cURL error.
    watchdog('commerce_hipay_ws', '@api_type @resource: cURL error: @error', array(
      '@api_type' => COMMERCE_HIPAY_WS_API_TYPE_REST,
      '@resource' => $resource,
      '@error' => $error,
    ), WATCHDOG_ERROR);

    // Create response object in the same format as decoded Hipay API exception
    // response.
    $response = array(
      'code' => curl_errno($ch),
      'message' => 'cURL error',
      'description' => $error,
    );
  }
  // No cURL errors, the request worked fine.
  else {
    // Decode JSON response into array.
    $response = json_decode($result, TRUE);

    // Log the response if response logging is enabled.
    if (!empty($context['payment_method_instance']['settings']['api']['logging']['response'])) {
      watchdog('commerce_hipay_ws', '@api_type @resource: response: !response Request time: @request_time', array(
        '@api_type' => COMMERCE_HIPAY_WS_API_TYPE_REST,
        '@resource' => $resource,
        '!response' => '<pre>' . var_export($response, TRUE) . '</pre>',
        '@request_time' => $request_time,
      ), WATCHDOG_DEBUG);
    }
  }

  curl_close($ch);
  if ((!empty($context['payment_method_instance']['settings']['api']['logging']['request']) || !empty($context['payment_method_instance']['settings']['api']['logging']['response'])) && is_resource($fh)) {
    fclose($fh);
  }

  return $response;
}

/**
 * Implements hook_commerce_hipay_ws_api_request_alter().
 */
function commerce_hipay_ws_commerce_hipay_ws_api_request_alter(&$parameters, $resource, $context) {
  // If API test mode is enabled, when creating new user accounts in Hipay
  // Wallet, alter the email address with current timestamp, to avoid Hipay
  // complaining that a user account with this email address has already
  // been created.
  if (
    !empty($context['payment_method_instance']['settings']['api']['test_mode'])
    && $resource == COMMERCE_HIPAY_WS_RESOURCE_SOAP_CREATE_FULL_USER_ACCOUNT
    && !empty($parameters['userAccountBasic']['email'])
  ) {
    $email_elements = explode('@', $parameters['userAccountBasic']['email']);
    $email_elements[0] .= '+' . REQUEST_TIME;
    $parameters['userAccountBasic']['email'] = implode('@', $email_elements);
  }
}

/**
 * Processes XML feedback.
 *
 * @param array $xml_string
 *   A string containing XML feedback received from Hipay Wallet API.
 */
function commerce_hipay_ws_callback_notification_process_feedback_xml($xml_string) {
  $result = FALSE;

  if (
    ($xml = simplexml_load_string($xml_string))
    && commerce_hipay_ws_callback_notification_validate_checksum($xml)
  ) {
    $feedback_xml = json_decode(json_encode($xml->result), TRUE);

    if (!empty($feedback_xml['operation'])) {
      switch ($feedback_xml['operation']) {

        // Hipay user account has been identified.
        case 'identification':
          $result = commerce_hipay_ws_api_user_account_validate_notification($feedback_xml);
          break;

        // KYC document has just been rejected.
        // (There are no 'document_validation' notifications for successfully
        // validated KYC documents, instead Hipay sends the 'identification'
        // notification for the seller account if all documents are ok.)
        case 'document_validation':
          $result = commerce_hipay_ws_api_upload_validate_notification($feedback_xml);
          break;

        // Hipay bank account information has been validated.
        case 'bank_info_validation':
          $result = commerce_hipay_ws_api_bank_account_validate_notification($feedback_xml);
          break;

        // Hipay transfer has been validated.
        case 'authorization':
        case 'capture':
          $result = commerce_hipay_ws_api_transfer_validate_notification($feedback_xml);
          break;

        // Hipay withdrawal has been validated.
        case 'withdraw_validation':
          $result = commerce_hipay_ws_api_withdrawal_validate_notification($feedback_xml);
          break;

      }
    }
  }

  if ($result === FALSE) {
    drupal_add_http_header('status', '400 Error processing notification. Please retry.');
  }
}

/**
 * Validates the notification 'md5content' checksum value.
 *
 * @param SimpleXMLElement $xml
 *   A SimpleXMLElement object created from received notification.
 *
 * @return bool
 *   A boolean indicating whether the notification 'md5content' checksum value
 *   matches the value calculated from notification 'result' element.
 *
 * @see commerce_hipay_ws_callback_notification_process_feedback_xml()
 */
function commerce_hipay_ws_callback_notification_validate_checksum(SimpleXMLElement $xml) {
  $payment_method_instance = commerce_hipay_ws_payment_method_instance();

  // The 'md5content' checksum is calculated from a concatenation
  // of '<result>...</result' sub-element and the salt string.
  $result_string = $xml->result->asXml() . $payment_method_instance['settings']['notification_checksum_salt'];
  $md5content = $xml->md5content->__toString();

  $valid = md5($result_string) == $md5content;

  if (!$valid) {
    watchdog('commerce_hipay_ws', 'Invalid md5content checksum for notification: !notification', array(
      '!notification' => '<pre>' . check_plain(var_export($xml->asXml(), TRUE)) . '</pre>',
    ), WATCHDOG_ERROR);
  }

  return $valid;
}

/**
 * Callback page for gateway server-to-server notifications.
 *
 * @see commerce_hipay_ws_menu().
 */
function commerce_hipay_ws_callback_notification() {
  // Get Hipay Wallet API notification feedback.
  $feedback = commerce_hipay_ws_get_feedback();

  // Log the feedback.
  watchdog('commerce_hipay_ws', 'Notification received: !feedback', array(
    '!feedback' => '<pre>' . check_plain(var_export($feedback, TRUE)) . '</pre>',
  ), WATCHDOG_DEBUG);

  // Process received XML feedback.
  if (!empty($feedback['xml'])) {
    commerce_hipay_ws_callback_notification_process_feedback_xml($feedback['xml']);
  }

  // Allow other modules to process the notification.
  foreach (module_implements('commerce_hipay_ws_api_notification') as $module) {
    $function = $module . '_commerce_hipay_ws_api_notification';
    $function($feedback);
  }
}

/**
 * Returns parameters returned by Hipay TPP API.
 *
 * @return array
 *   An associative array containing the Hipay feedback taken from the $_GET
 *   and $_POST superglobals, excluding 'q'.
 */
function commerce_hipay_ws_get_feedback() {
  $feedback = array_replace_recursive($_GET, $_POST);
  unset($feedback['q']);
  return $feedback;
}

/**
 * Returns full URL of Hipay Wallet API endpoint.
 *
 * @param array $payment_method
 *   Payment method instance definition array.
 * @param array $api_type
 *   API type to use for the call.
 *
 * @return string
 *   The full URL of Hipay Wallet API endpoint.
 */
function commerce_hipay_ws_get_server_url($payment_method, $api_type) {
  $constant_name = 'COMMERCE_HIPAY_WS_ENDPOINT_' . $api_type . '_' . $payment_method['settings']['endpoint'];
  return constant(strtoupper($constant_name));
}

/**
 * Returns the API type to call based on the requested resource.
 *
 * @param string $resource
 *   A resource to call.
 *
 * @return string
 *   An API type to use for the call.
 */
function commerce_hipay_ws_get_api_type($resource) {
  switch ($resource) {
    case COMMERCE_HIPAY_WS_RESOURCE_REST_BUSINESS_LINES:
    case COMMERCE_HIPAY_WS_RESOURCE_REST_WEBSITE_TOPICS:
    case COMMERCE_HIPAY_WS_RESOURCE_REST_LOCALE_CODES:
    case COMMERCE_HIPAY_WS_RESOURCE_REST_LOCALE_COUNTRIES:
    case COMMERCE_HIPAY_WS_RESOURCE_REST_LOCALE_TIMEZONES:
    case COMMERCE_HIPAY_WS_RESOURCE_REST_UPLOAD:
      return COMMERCE_HIPAY_WS_API_TYPE_REST;
    default:
      return COMMERCE_HIPAY_WS_API_TYPE_SOAP;
  }
}

/**
 * Returns the resource type to call based on the requested resource.
 *
 * @param string $resource
 *   A resource to call.
 *
 * @return string
 *   A resource type to use for the call.
 */
function commerce_hipay_ws_get_resource_type($resource) {
  switch ($resource) {
    // SOAP.
    case COMMERCE_HIPAY_WS_RESOURCE_SOAP_TRANSFER:
      return COMMERCE_HIPAY_WS_RESOURCE_TYPE_SOAP_TRANSFER;
    case COMMERCE_HIPAY_WS_RESOURCE_SOAP_WITHDRAWAL:
      return COMMERCE_HIPAY_WS_RESOURCE_TYPE_SOAP_WITHDRAWAL;
    case COMMERCE_HIPAY_WS_RESOURCE_SOAP_LOCALE_CODES:
    case COMMERCE_HIPAY_WS_RESOURCE_SOAP_LOCALE_TIMEZONES:
    case COMMERCE_HIPAY_WS_RESOURCE_SOAP_LOCALE_COUNTRIES:
      return COMMERCE_HIPAY_WS_RESOURCE_TYPE_SOAP_LOCALE;
    case COMMERCE_HIPAY_WS_RESOURCE_SOAP_GET_BUSINESS_LINES:
      return COMMERCE_HIPAY_WS_RESOURCE_TYPE_SOAP_BUSINESS_LINES;
    case COMMERCE_HIPAY_WS_RESOURCE_SOAP_GET_WEBSITE_TOPICS:
      return COMMERCE_HIPAY_WS_RESOURCE_TYPE_SOAP_WEBSITE_TOPICS;
    // REST.
    case COMMERCE_HIPAY_WS_RESOURCE_REST_BUSINESS_LINES:
    case COMMERCE_HIPAY_WS_RESOURCE_REST_WEBSITE_TOPICS:
      return COMMERCE_HIPAY_WS_RESOURCE_TYPE_REST_TOOLS;
    case COMMERCE_HIPAY_WS_RESOURCE_REST_LOCALE_CODES:
    case COMMERCE_HIPAY_WS_RESOURCE_REST_LOCALE_COUNTRIES:
    case COMMERCE_HIPAY_WS_RESOURCE_REST_LOCALE_TIMEZONES:
      return COMMERCE_HIPAY_WS_RESOURCE_TYPE_REST_LOCALE;
    case COMMERCE_HIPAY_WS_RESOURCE_REST_UPLOAD:
      return COMMERCE_HIPAY_WS_RESOURCE_TYPE_REST_IDENTIFICATION;
    // SOAP again.
    default:
      return COMMERCE_HIPAY_WS_RESOURCE_TYPE_SOAP_ACCOUNT;
  }
}

/**
 * Returns all payment method instances for a given payment method id.
 *
 * @param $method_id
 *   A payment method id
 * @param $include_disabled
 *   Return enabled and disabled instances
 *
 * @return
 *   An array of all loaded payment method instances keyed by instance_id
 */
function commerce_hipay_ws_payment_method_instances($method_id = 'commerce_hipay_ws', $include_disabled = FALSE) {
  $cached_ids = &drupal_static(__FUNCTION__, array());
  $include_disabled = !empty($include_disabled);

  if (!array_key_exists($method_id, $cached_ids)) {
    $cached_ids[$method_id] = array();

    // load all rules ... no easier way
    $rules_configs = rules_config_load_multiple(FALSE);

    // find all rules with an action to enable this method
    foreach ($rules_configs as $rule_name => $rule) {
      // Only rules and sub-types have actions.
      if (!($rule instanceof Rule)) {
        continue;
      }

      // fast skip if rule does not depend on commerce_payment
      if (!isset($rule->dependencies) || !in_array('commerce_payment', $rule->dependencies)) {
        continue;
      }

      foreach ($rule->actions() as $action) {
        // skip any actions that are not simple rules actions, ie loops
        if (!($action instanceof RulesAction)) {
          continue;
        }

        if ($action->getElementName() == 'commerce_payment_enable_' . $method_id) {
          $instance_id = commerce_payment_method_instance_id($method_id, $rule);
          $cached_ids[$method_id][$instance_id] = $rule->active;
          continue 2; // skip to next rule
        }
      }
    }
  }

  // load instances
  $instances = array();
  if (!empty($cached_ids[$method_id])) {
    foreach ($cached_ids[$method_id] as $instance_id => $instance_active) {
      if ($instance_active || $include_disabled) {
        $instances[$instance_id] = commerce_payment_method_instance_load($instance_id);
      }
    }
  }

  return $instances;
}

/**
 * Returns first payment method instance for a given payment method id.
 *
 * @param $method_id
 *   A payment method id
 * @param $include_disabled
 *   Return enabled and disabled instances
 *
 * @return
 *   An array of payment method instance details.
 */
function commerce_hipay_ws_payment_method_instance($method_id = 'commerce_hipay_ws', $include_disabled = FALSE) {
  if ($instances = commerce_hipay_ws_payment_method_instances($method_id, $include_disabled)) {
    return reset($instances);
  }
}

/**
 * Combines multiple non-empty address elements into one string.
 *
 * $param array $address
 *   An array of address values.
 * $param array $element_names
 *   An array of address element names ($address keys) which values to combine.
 *
 * @return string
 *   A string containing multiple non-empty address elements combined.
 */
function commerce_hipay_ws_combine_address_lines($address, $element_names) {
  $nonempty_elements = array();

  foreach ($element_names as $element_name) {
    if (!empty($address[$element_name])) {
      $nonempty_elements[] = $address[$element_name];
    }
  }

  return implode(', ', $nonempty_elements);
}

/**
 * Returns a list of locale identifiers supported by Hipay Wallet.
 *
 * @return array
 *   An array of locale identifiers supported by Hipay Wallet.
 */
function commerce_hipay_ws_get_supported_languages() {
  return array(
    'de_DE' => t('deutsch'),
    'en_GB' => t('english'),
    'es_ES' => t('español'),
    'fr_FR' => t('français'),
    'it_IT' => t('italiano'),
    'nl_BE' => t('nederlands'),
    'pt_PT' => t('português'),
    'pt_BR' => t('português (Brasil)'),
  );
}

/**
 * Returns a lock name for provided entity type and entity ID.
 *
 * @param string $entity_type
 *   An entity type to return the lock name for.
 * @param int $entity_id
 *   An entity ID to return the lock name for.
 *
 * @return string
 *   The lock name for provided entity type and entity ID.
 */
function commerce_hipay_ws_get_lock_name($entity_type, $entity_id) {
  return implode('_', array('lock', $entity_type, $entity_id));
}
